{"pred": "   private final transient KademliaRoutingTable routingTable;\n    private final transient KademliaStorageEntry storage;\n    private final transient KademliaStorageEntry[] storageEntries;\n    private final transient KademliaStorageEntry[] storageEntriesToSend", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       mImmersiveSensorNavigation = new ImmersiveSensorNavigation(mSpectaculumView);\n        mImmersiveTouchNavigation = new ImmersiveTouchNavigation(mSpectaculumView);\n        mImmersiveSensorNavigation.setOnTouchListener(", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, x, y):\n        x = RotateLeft(x", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n    private ImmersiveEffect mImmersiveEffect;\n    private ImmersiveEffect.ImmersiveEffectListener mImmersiveEffectListener;\n    private ImmersiveEffect.ImmersiveEffectListener mImmersive", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "               new EventCommandHandler<>(SetStatusMessageCommand.class, MessageEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusMessageCommand.class, MessageEvent::fromCommand, this::queueEvent));\n        commandProcessor.", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    */\n    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务运行器\n     */\n    private TaskRunner taskRunner;\n\n    /**\n     * 任务运行器配置\n     */\n    private TaskRunnerConfig taskRunner", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\t\tintegrityCheck.check(passphrase);\n\t\t\t} catch (AbortCheckException e) {\n\t\t\t\tprint(e.getMessage());\n\t\t\t}\n\t}\n\n}\n\n\n\n\nclass CheckCommand {\n\n\tprivate final", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           //save deviceId to storage\n            DebugManager.getInstance().saveDeviceId(deviceId);\n            //send notification to the user\n            DebugManager.getInstance().sendNotification(deviceId, regId);\n            return true;\n        } catch (RestServiceException e) {\n            e", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME);\n\n    SignRequest signRequest = new SignRequest(ACCOUNT_NAME, SERVER_CHALLENGE_SIGN);\n    assertEquals(signRequest, u2fServer.getSign", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "           self.uaA.recvEvent(event)\n            self.state = CCStateDead\n        else:\n            self.uaA.recvEvent(event)\n            self.state = CCStateDead\n        return\n\n    def placeOriginate(self, route):", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   def __init__(self, *args, **kwargs):\n        super(URI, self).__init__(*args, **kwargs)\n        self.uri = None\n\n\nclass FlagList(Signature):\nNext line of code:\n    def __init__(self, *args,", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "           return\n\n      if cstr_node.terminal:\n        return\n\n      if cstr_node.kind == Expr.COMPARATOR:\n        if cstr_node.cmp_id == CMP_IMPLICIT_NOT_EMPTY:\n         ", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void playVideoIntern(TDActivity activity, Bundle args) {\n        if (activity != null) {\n            VideoFragment fragment = new", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       String city = getCity(latitude, longitude);\n        String state = getState(latitude, longitude);\n        String country = getCountry(latitude, longitude);\n        String zip = getZip(latitude, longitude);\n        String user = getUser(latitude, longitude);", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       self.assertEqual(len(self.nnet.inter_layers), 1)\n\n    def test_valid_args_2(self):\n        ''' Valid arguments. '''\nNext line of code:\n        self.assertEqual(len(self.nnet.inter_layers", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   def __new__(cls, *args, **kwargs):\n        init_called = True\n        return super().__new__(cls)\n\n    class User(BaseModel):\n        pass\n\n    user = User(id=\"user_id\", email=\"user@domain.com\")\n", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "   yield result\n\n\n@method(infix('?', bp=32))\ndef select_union_operator(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for context.item in context.inner_focus_", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTransformation(),\n                    new MirrorTransformation(),", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "   private static final ButterKnife.Action<View> HIDE_ALL = (view, index) -> view.setVisibility(View.GONE);\n    private static final ButterKnife.Action<View> SHOW_ALL = (view, index) -> view.", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               writeResponse(INSTANCE_OF, correlationId);\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, INSTANCE_OF, correlationId);\n", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       wild.monitor_task = wild.create_task_tuple(wild.monitor_status())\n\n\n    @group(pass_context=True, category='Bot Info', aliases=[\"wild\"])\n    @channel_checks.wild_report_enabled", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   if c['vocab_text']:\n        vocab_text = Vocabulary(c['vocab_text'])\n    else:\n        vocab_text = None\n    # Load data\n    if c['data']:\n        data = c['data", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.coeffs == (50. /", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "               mParticipants.remove(participant);\n                resultAdapter(mParticipants);\n            }\n        }\n    }\n\n    private void checkPermission() {\n        if (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.WRITE_EXTERN", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "               assert self.redlock.acquire()\n                assert self.redis.exists(self.redlock.key)\n                assert self.redlock.locked()\n                assert self.redlock.acquire()\n                assert self.redis.exists(self.redlock.key", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "       return ConeSettings(self._get_fmod_ptr(\"FMOD_Sound_Get3DCones\"))\n\n    def threed_cone_settings(self):\n        \"\"\"The inside and outside angles of the 3D projection cone and the\n        outside volume.\n", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "       self._calg = calg\n\n    def __init__(self, calg):\n        self._calg = calg\n\n    def __repr__(self):\n        return \"CompressedData(calg={})\".format(self._calg)\n\n    def __", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "   cellSize = getParameter(detectSpotsParameter, \"cellSize\", cellSize);\n    \n    # illumination correction\n    #img4 = img.copy();\n    #img4 = correctIllumination(img4, correctIlluminationParameter = correctIlluminationParameter", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           if (accuracy.compareTo(Accuracy.PERFECT) > 0) {\n                perfectCount++;\n            } else {\n                missCount++;\n            }\n            if (accuracy.compareTo(Accuracy.PERFECT) > 0)", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "\r\n            while (transactionIterator.hasNext()) {\r\n                Transaction t = transactionIterator.next();\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n\r\n            //not really needed\r\n           ", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               }\n            }\n        }\n        return pgm;\n    }\n\n    /**\n     * Get an in memory representation of broken SQL query. This may require \n     * contacting druid for resolving dimensions Vs metrics for SELECT queries\n     * hence it also optionally accepts", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "               EncryptionAlgorithmCoded.TWOKEY3DES,\n                algorithm_parameter_name=AlgorithmParameterName.PIN,\n                algorithm_parameter_value=self.generate_random_bytes(32),\n            ),\n            key_name=KeyName.PIN", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           if (env.combExp[i] != null) {\n                                env.combExp[i].numCombExpCheck = 0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (Config.USE_", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "   url(r'^(?P<pipeline_id>[0-9a-f-]+)/(?P<lang>[a-z]+)/(?P<branch>[a-z]+)/(?P<commit>[a-z0-9]+)/(?P<message>[a-z", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tpublic ResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors) {\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags = tags;\n\t\t\tthis.", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self._storage_type = storage_type\n        return self\n\n\n#\n# DB OPEN\n#\n# Opens a database in the OrientDB Server instance.\n#\n# Request: (database-name:string)\n# Response: (result:byte)\n#\n#", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(String description,\n            Class<$Argument2> mutableArgumentClass, CheckedConsumer<$Argument2> givenStep) {\n        return andArgument(mutableArgument", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "   try {\n      return process.await(expectedExitCodes);\n    } catch (CommandFailureException e) {\n      throw new IosDeviceException(this, e);\n    }\n  }\n\n  private static class ForwardingSocket extends Socket {\n    private final Socket socket", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (textColor == Color.BLACK)\n\t\t\ttextColor = Color.WHITE;\n\t\telse\n\t\t\ttextColor = Color.BLACK;\n\t}\n\t\n\tprivate void setSections() {\n\t\tif (sections.length == ", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = Message.parse(xml);\n\t\tif (message.getType() == Message.TYPE_TEXT) {\n\t\t\tString text = message.getText();\n\t\t\tlog.info(\"text: \" + text);\n\t\t\treturn talk(message.get", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   if os.path.exists(file_path + '_info_'):\n        return\n    else:\n        os.makedirs(file_path + '_info_')\n    adb = subprocess.Popen(['adb', '-s', get_identifier(), 'shell', '", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   async def cmd_raidcity(self, ctx, *city):\n        \"\"\"\n        **!raid-city city** - sets the raid party city\n        \"\"\"\n        city = await ctx.city()\n        if city is None:\n            raise BadArgument(\"city\")\n        else", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertTrue(date_to_date(\"25/11/2015\") == datetime.datetime(2015, 11, 25, 0, 0))\n        self.assertTrue(date_to_date(\"11/1", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       persistence_actor = PersistenceActor(config_file)\n        persistence_actor.start()\n\n        # TODO: Use message request - not orm access!\n        db_session = database_setup.get_session()\n        sessions = db_session.query(Session", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           holder.tv_share.setText(text);\n                            holder.tv_share.setTypeface(Typeface.DEFAULT);\n                            holder.tv_share.setTextColor(mActivity.getResources().getColor(\n                                    secondary_text_default_material_light", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\tfor j in range(num_contrasts):\n\t\t\t\t\t\t\tcontrast_names.append((\"tstat_pFWER_con%d\" % (j+1)))\n\t\t\t\t\t\tfor k in range(num_", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               StreamsFragment.class,\n                StreamContentProvider.class,\n                StreamSyncAdapter.class,\n                OAuthActivity.class,\n                OAuthActivity.OAuthFragment.class,\n                OAuthActivity.OAuthFragment.class,\n                OAuthActivity.OAuthFragment", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "               PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDH: ECDHSignature,\n                PubKeyAlgorithm.ECDHEncrypt: ECDHSignature,\n                PubKeyAlgorithm.ECDHEnc", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   elif isinstance(context, XPathSchemaContext):\n        for item in context.iter_self():\n            if item is not None:\n                yield item\n\n\n@method(nullary('.'))\ndef select_self_shortcut_with_context(self, context=None", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter\n    }\n\n  def __init__(self, sink_provider, sink_properties, sink_role):\n    \"\"\"Initialize the sink.\n\n    Args:\n      sink_provider - The sink provider.\n      sink_properties - The sink", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc.send_message(protocol, 'hello world')\n        self.assertEqual(nc._connections, {protocol: protocol})\n        protocol.send_string.assert_called_once_with('hello world')\n\n    def test_send_message_with_protocol_", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);\n        assertTrue(\"is prepared\", qe instanceof PreparedExecution);\n        assertTrue(\"is batch prepared\", qe instanceof PreparedBatchExecution);\n        assertTrue(\"is callable\", qe instanceof Callable", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionCount() {\n        StatementExecution se = new StatementExecution();", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "               continue\n            \n            # Send the ADR message\n            yield device.sendADRMessage(self.band, target)\n            \n            # Update the device adr_datr\n            device.adr_datr = target\n            \n            # If we are queueing commands, create", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                   ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       if (chat != null) {\n            chatInfo.setOnClickListener(new View.OnClickListener() {\n                @Override\n                public void onClick(View v) {\n                    Intent intent = new Intent(getActivity(), ChatListActivity.class);\n                    intent.putExtra(Ch", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\nNext line of code:\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "           img_time = self.img_handle.time\n\n        else:\n\n            # Get time from config\n            img_time = self.config.time\n\n\n        # Save the image time\n        json_dict['time'] = img_time\n\n\n        # Save the", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       if (mPublicRoomsListList == null) {\n            mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n            mPublicRoomsListList.add(new ArrayList<PublicRoom>());\n        }\n        mAdapter.notifyDataSetChanged();\n", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = ChimeraDetector(target_sequences, phylogeny,\n                                      args.solid_scaffolds,\n                                      args.solid_scaffolds_threshold,\n                                      args.solid_sca", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockPlaceListener(this), this);Next line of code:\n        plugins.registerEvents(new BlockBreakListener(this), this);Next line of code:\n        plugins.registerEvents(new BlockChangeListener(this), this);Next line of code:\n", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   startMiPush();\n                    stopHwPush();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"HuaweiPush\":\n                if(shouldInit()) {Next line of code", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponseHandler<QueryExp>(QUERY_EXP));\n        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new Marsh", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   public boolean dirty = false;\n    public boolean dirty = false;\n    public boolean dirty = false;\n    public boolean dirty = false;\n    public boolean dirty = false;\n    public boolean dirty = false;\n    public boolean dirty = false;\n    public boolean dirty = false;\n", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   private void createMetricChartPanel(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, false);\n", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.getType() == PacketType.ACK) {\n            AckRequest ackRequest = (AckRequest) packet.getData();\n            if (ackRequest.isAckRequested()) {\n                ackManager.ack(ackRequest);\n            }", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       lMS.setConstraints(appRtcClient.videoConstraints());\n      }\n      VideoSource vSource = new VideoSource(lMS);\n      vSource.setLocalRenderer(new VideoRenderer(vsv));\n      vSource.setLocalRenderer(new VideoRenderer(vsv));", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_BACKOFF_MS, -1L);\n            contentValues.put(JobStorage.COLUMN_BACKOFF_POLICY, JobRequest.BACKOFF_POLICY_NONE);\n            contentValues.", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private Check", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   return obj\n\n\ndef init_snapshot(obj, basedir=None):\n    if not obj:\n        raise Exception(CORE_LOG_PREFIX + \"Must input a valid object\")\n\n    validate_system(obj)\n\n    # if no snapshot files,", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "\n    def determine_executable(self, desktop_file):\n        if self.config.debug_gdb:\n            return 'gdb'\n        elif self.config.debug_valgrind:\n            return 'valgrind'\n        elif self.config.debug_g", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   return SMTHHelper.getInstance().wService.getAllBoards().flatMap(new Function<ResponseBody, Observable<Board>>() {\n      @Override public Observable<Board> apply(@NonNull ResponseBody responseBody) throws Exception {\n        try {\n          String response = SMTHHelper", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       FragmentObservable.getInstance().registerBackgroundTask(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable.getInstance().removeBackgroundTask(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\t\tif (model.getTestBase() != null) {\r\n\t\t\tif (model.getTestBase().getTestMethod() != null) {\r\n\t\t\t\tif (model.getTestBase().getTestMethod().getMethod() != null) {\r\n\t\t\t\t\t", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       if not isclose(fdm_data.received_simulator_data_datagram, mock_simulator_data_datagram, 0.001): return False\n        if not isclose(fdm_data.received_simulator_data_datagram.", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           if (httpMessage.getRes().getResponse().getContentType().equals(\"text/html\")) {\n                textareaMessage.setText(httpMessage.getRes().getResponse().getContent());\n            } else {\n                textareaMessage.setText(httpMessage.getRes().getResponse", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert_unordered(create_table_request(\"SimpleTable\", SimpleModel), description)\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    (\"ACT", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   def _load_file(self, fileobj):\n        \"\"\"Load an IFF file\"\"\"\n        self._pre_load_header(fileobj)\n        self._load_header(fileobj)\n        self._load_tags(fileobj)\n        self._load_v", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r\n\r\n      return null;\r\n    }\r\n\r\n    visitProxOp(new VisitOrd3(n), query);\r\n\r\n    return null;\r\n  }\r\n\r", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EmbossTransformation(),\n                    new EmbossTransformation().setStrength(.5f),\n                    new EmbossTransformation().setStrength(.5f),\n                    new EmbossTransformation().setStrength(.5f),\n                    new EmbossTransformation", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "           self._decode_field( FIELD_STRING )\n\n            # Parse the error\n            exception_class = self._decode_field( FIELD_STRING )\n            exception_message = self._decode_field( FIELD_STRING )\n\n            # raise the exception\n            raise Py", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n\n    params = {\n        'FromSettlementDate': args.fromdate or date.today() - timedelta(days=1),\n        'ToSettlementDate': args.todate or args", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\t\titem = new GalleryAlbum( proxy.getId(), proxy.getTitle() );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy.getId(), proxy.getTitle() );\n\t\t\t} // if-else\n\t\t", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   assert dump_key(user, user_key) == {\"id\": {\"S\": \"foo\"}}\n\n\ndef test_extract_key(engine):\n    user = User(id=\"foo\")\n    user_key = {\"id\": {\"S\": \"foo\"}}\nNext line", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new ProgressBar(10, \"ProgressBar\"),\n        new StaticString(\"Status\"),\n        new Percentage(10),\n        new Fraction(10),\n        new TaskName(\"TaskName\"),\n        new Status(\"Status\"),\n        new StringWrapper(\"StringWrapper", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static Form form(Object resource, Object... fields) {\n\t\treturn new Form(resource);\n\t}\n\tpublic static Html html(Object resource, Object... fields) {\n\t\treturn new Html(resource);\n\t}\n\tpublic static Head head(Object resource, Object", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "           events.append(Event(e, self))\n\n        return events\n\n    def create_event(self, event_id, params=None):\n        params = {\"event\": event_id}\n        data = self.call_api(\"events\", type=\"POST\", params=params", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "           Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n    ", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           if (mWallpaper != null) {\r\n                WallpaperPropertiesLoaderTask task = new WallpaperPropertiesLoaderTask(this);\r\n                task.execute(mWallpaper);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onResume()", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private final static Logger logger = Logger.getLogger(QsolToQueryVisitor.class.getPackage().getName());\r\n  private final static Logger logger = Logger.getLogger(QsolToQueryVisitor.class.getPackage().getName());\r\n  private final static Logger logger = Logger", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif args.mapper_chunk:\n\t\t\tif args.mapper_chunk>MAPPER_CHUNK_SIZE:\n\t\t\t\traise ValueError('Mapper chunk size {} > {}'.format(args.mapper_chunk,MAPPER_CHUNK_SIZE", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       self.beginning_datetime = self.vidinfo.beginning_datetime\n\n        # If the beginning time is not found, set it to the current time\n        if self.beginning_datetime is None:\n            self.beginning_datetime = datetime.datetime.now()\n\n", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   psf = np.random.randn(p.shape[0], 3)\n    psf = np.random.randn(p.shape[0], 3)\n    psf = np.random.randn(p.shape[0], 3)\n   ", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tif (FOOD_MODIFIER_ENABLED)\n\t\t{\n\t\t\tsetRoundingMode();\n\t\t\tFoodModifier.onGlobalFormulaChanged();\n\t\t\tFoodHistory.get(player).onHistoryTypeChanged();\n\t\t", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       if request.user.username != post.user.username:\n            messages.error(request, 'You are not allowed to view this post.')\n            return redirect(reverse('ploghubapp:home_page'))\n        else:\n            return render(request, self.template", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\t\tnatTable.setFocus();\n\t\t\t\t\t\t\tnatTable.doCommand(new SelectCellCommand(selectionLayer, 0, 0, false, false));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "       def keyclass_int(self, val):\n            self._keyclass = val\n\n    @keyclass.register(int)\nNext line of code:\n        def keyclass_int(self, val):\n            self._keyclass = val\n\n    @keyclass.register", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "       if is_processing_instruction_node(item):\n            yield item\n\n\n@method(function('comment', nargs=(0, 1), bp=79, label='kind test'))\ndef select_comment_kind_test(self, context=None):\n   ", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "   puffles_as2_str = getAS2PuffleString(client, puffles)\n", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   I.draw_ortho(im, H, cmap='Greys_r')\n\ndef make_image_1():\n    P = objs.PlatonicSpheresCollection(pos, rad)\n    H = psfs.AnisotropicGaussian()\n", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "           for job in jobs:\n                job.compile_information()\n        else:\n            for job in jobs:\n                job.compile_information()\n        compile_info_end = time.time()\n        self.logger.debug(f\"Compiling information took {compile_info_", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   platepar.rotation_wrt_horizon = rotationWrtHorizon(platepar.RA_d, platepar.dec_d, platepar.JD, \\\n        platepar.lat, platepar.lon)\n\n    # Recompute the rotation wrt horizon\n", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_FLEX_MS, 60_000L);\n        contentValues.put(JobStorage.COL", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       FragmentObservable.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable.getInstance().unregister(this);\n    }\n\n    @Override\n    public void onResume() {\n       ", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['indicator', 'target', 'area', 'code']\n\n\nclass AreaTypeFilter(django_filters.FilterSet):\n    name = django_filters.CharFilter(lookup_expr='icontains')\n    code = django_filters.Char", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           fab.setOnClickListener(new OnClickListener() {\n                @Override\n                public void onClick(View v) {\n                    if (fab.getVisibility() == GONE) {\n                        fab.show();\n                    } else {\n                        fab.hide();\n                    }", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "\n                return deferred.setResult(null);\n            }\n        });\n\n        return deferred;\n    }\n\n    @Override\n    public void close(final ConnectionContext context) {\n        _channel.close().then(new Catch<Void>() {\n            @", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "               message == R.string.registration_successful ? R.string.registration_successful : R.string.registration_not_successful);\n    }\n}\n\npackage de.fau.cs.mad.yasme.android.ui.fragments;", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final RoadMap map;\n    private final SpatialOperator spatialOperator;\n    private final Router router;\n    private final AtomicInteger counter = new AtomicInteger(0);\n    private final Map<String, Map<String, Map<String, Map<String, Map<String", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private String[] urls;\n    private String[] checkedTitles;\n    private String[] checkedUrls;\n    private List<String> checkedList;\n    private List<String> uncheckedList;\n    private List<String> checkedListTitle;\n    private List<String>", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " assert isinstance(args.gps_sv[0], GPSMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv',", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "       for i in range(len(fills)):\n            self.svg.n_tris += 1\n            self.svg.draw_triangle(fills[i], self.transform)\n\n        if self.style.fill_opacity > 0:\n            self.svg.", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\ttry {\n\t\t\t\t\ta = BaseData.fromJson(data);\n\t\t\t\t\tapps.add(a);\n\t\t\t\t\tneedSave = true;\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tTo", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (AppSetAction.isShow && AppSetAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSetAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.beg_alt = self.beg_vect.alt\n        self.end_alt = self.end_vect.alt\n\n        # Compute great circle\n        self.gc = greatCircle(self.beg_alt, self.end_alt)\n\n       ", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(ctx.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void enterFunction(@NotNull Function", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "   /**\n     * Called when the visitor reaches a node that is a {@link com.bazaarvoice.jless.ast.node.SimpleNode}.\n     * @return Determines whether the node's children will be visited.\n     */\n    boolean visitSimple(SimpleNode node", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "   private SpecificationGenerator specificationGenerator;\n    private CodeGeneratorFactory codeGeneratorFactory;\n    private CodeGenerator codeGenerator;\n\n    private final AtomicReference<Swagger> runtimeSwagger = new AtomicReference<>();\n\n    private final AtomicReference<String> baseGenerationPackage = new", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritCheckoutProvider.class).to(GerritCheckoutProvider.class);\n        bind(GerritPushExtension.class).to(GerritPushExtension.class);\n        bind(GerritRestModule.class).to(GerritRestModule", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (snapshots.get(i).getZxid().contentEquals(zxid)) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n            }\r\n\r\n", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "           entries = [e for e in entries if e.filter(query, filter_type)]\n        return entries\n\n    def _create_pane(self, pane_type, account=None):\n        if pane_type == PaneType.Account:\n            if account is", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   ]\n    def __init__(self, layer):\n        self.layer = layer\n        self.constructorList = []\n        self.constructorList.append(self.constructorList)\n        self.constructorList.append(self.constructorList)\n        self.constructorList.append(", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\t\treturn Observable.just(null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn searchSuggestionsAdaper.getSuggestions(query);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   # 2. coverslip\n    rad = 0.5 * np.random.randn(BKGVALS.shape[0]) + 4.5  # 4.5 +- 0.5 px coverslip\nNext line of code:\n    # ", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "       result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_, left.index)\n\n\ndef apply_", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request.getIcon() != null) {\r\n                        stringBuilder.append(\"\\nIcon: \")\r\n                                .append(request.getIcon());\r\n                    }\r\n\r\n                ", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "           instance, (int, float, Decimal, datetime, Duration)\n        ) and not isinstance(instance, bool)\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n       ", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "           return SearchMenuPage(self.searchHistory)\n        if pageletId == 'RubricPage':\n            return RubricPage(self.searchHistory)\n        if pageletId == 'RubricsPage':\n            return RubricsPage(self.searchHistory)\n        if", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "               if pattern.dataFile is None:\n                    errmsg += \"Pattern -- %s\\n\"%(pattern.name)\n                    errmsg += \"    Data File -- %s\\n\"%(pattern.dataFile)\n                    errmsg += \"    Existence -- %", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'type')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n    private Comm", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\t\tfor (Preprocessor preprocessor : preprocessors) {\n\t\t\t\tfor (Postprocessor postprocessor : postprocessors) {\n\t\t\t\t\tddi2fo.process(basePathDDI2FO, preprocessor, postprocessor);\n\t\t\t\t}", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // Save the user\n                        DatabaseManager.INSTANCE.saveUser(user);\n                        // Save the device\n                        DatabaseManager.INSTANCE.saveDevice(device);\n                        // Save the push token\n                        DatabaseManager.INSTANCE.savePushToken(pushToken", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "   url(r'^$', PackageView.as_view(), name=\"package-view\"),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()), name=\"package-new\"),\n    url(r'^edit/(?P<pk", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, BandBitEncoder)\n  assert encoder.bandIndex == NormalRateConfig.GPS.L1.", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tgAsDict[\"tierList\"][0][\"entries\"]\n\"\"\"\nCreated on Jan 27, 2016\n\n@author: tmahrt\n\nTests that praat files can be read in and then written out, and that the two\nresult", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                   procs.append(KaldiProcess(function, return_queue, error_dict, stopped))\n                    pbar.update(1)\n                if i == self.num_utterances - 1:\n                    procs.append(KaldiProcess(function,", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "           dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_trackingnet(self):\n        root_dir = os.path.join(self.data_dir, 'TrackingNet')\n       ", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   void add(FixTag tag);\n    void add(FixTag tag, boolean isLast);\n    void add(FixTag tag, boolean isLast, boolean isSet);\n    void add(FixTag tag, boolean isLast, boolean isSet, Validity validity);", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "           yield self._create_chunk(bounds)\n\n        \"\"\"\n        yield self._create_chunk(bounds)\n\n        \"\"\"\n        yield self._create_chunk(bounds)\n\n    def _create_chunk(self, bounds):\n        \"\"\"Create a chunk.\"\"\"\n        start", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\t\treturn result;\n\t}\n\n\t@Override\n\tpublic ExpansionResult visit(AlvisIRQueryNode queryNode, Void param) {\n\t\tAdvancedQueryNodeExpander exp = new AdvancedQueryNodeExpander(NullTextExpander.INSTANCE);\n\t\treturn", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate Validator validator;\n\tprivate ValidationMessage validationMessage;\n\tprivate ValidationMessage validationMessage2;\n\tprivate ValidationMessage validationMessage3;\n\tprivate ValidationMessage validationMessage4;\n\tprivate ValidationMessage validationMessage5;\n\tprivate ValidationMessage validationMessage", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));Next line of code:\n        registry.put((byte) (SEND_NOTIFICATION ^ RES", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       log.info(\"Found a tweet: \" + content);\n                        log.info(\"URL: \" + url);\n                        log.info(\"Original content: \" + origContent);\n                        log.info(\"Cleaned content: \" + content);\n                        logDb", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "       return lines\n\n\nclass Renderer(object):\n    \"\"\"\n    Renderer class for the pybufr package.\n    \"\"\"\n\n    def __init__(self, indent=INDENT_CHARS):\n        self.indent = indent\n\n    def __call__(self, obj", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "       help=\"\"\"network latency time [millisecond].\n        the minimum latency time is 1 ms.\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 10ms\n        \"\"\".format(\n            \", \".join([\", \".", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_contact(self):\n        return Contact.objects.filter(phone_number=self.phone_number).first()\n\n    def get_contacts_by_group(self,", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "       pipeline.apply(\"Read live projects\", Read.from(new GCPProjectSource()));\n\n    // Tag the live projects to indicate they're from a live repo.\n    PCollection<KV<GCPResource, KV<StateSource, GCPProject>>> liveStates =", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.engine = Engine()\n        self.rule = SimilarPathRule()\n        self.rule.set_engine(self.engine)\n        self.rule.set_similar_path_generator(SimilarPathGenerator())\n\n    def test_similar_path_generator_returns_", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, module_name)\n        ffibuilderRX.compile()\n        cls.tmpdirnameRX = tempfile.", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(AndCondition(operations[0], operations[1]))\n    if \"or\" in operations:\n        conditions.append(OrCondition(operations[0], operations[1]))\n    if \"not\" in operations:\n        conditions.append(NotCondition(operations", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       assert get_square(1, 2) == 1\n\n\nclass TestDutchNationalFlag(object):\n    \"\"\"\n    Question 6.18\n    \"\"\"\n\n    def test_book_example(self):\n        assert buy_sell_stock_twice", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   private final ICompilationUnit testClass2;\n\n    private final ICompilationUnit testClass3;\n\n    private final ICompilationUnit testClass4;\n\n    private final ICompilationUnit testClass5;\n\n    private final ICompilationUnit testClass6;\n", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "     sink_properties,\n      global_properties)\n\n  def AsyncProcessRequest(self, sink_stack, msg, stream, headers):\n    self._varz.Update(msg.timeout)\n    sink_stack.AsyncProcessResponse(self, None, stream, msg)\n\n", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate boolean debug = false;\n\tprivate boolean debugImages = false;\n\tprivate boolean debugSplits = false;\n\tprivate boolean debugSplits = false;\n\tprivate boolean debugSplits = false;\n\tprivate boolean debugSplits = false;\n\tprivate boolean", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "     {\n        var files = line.files();\n        if (files.isEmpty()) {\n          return null;\n        }\n        return files.stream().map(file -> file.getFileName().toString()).collect(Collectors.joining(File.pathSeparator));\n      });\n", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "       return RespostaSAT.analisar(retorno)\n\n    def consultar_numero_sessao(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_numero_s", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPEAKER_ACTION_", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   try:\n      result = self.commands[name](self, gopts, argv)\n    except RepoChangedException as e:\n      print(e)\n      result = 1\n    except Exception as e:\n      print(e)\n      result = 1\n\n", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Named(\"prefs\")\n    SharedPreferences providePrefs() { return PreferenceManager.getDefaultSharedPreferences(app); }\n\n    @Provides @Singleton\n    Prefs providePrefs() { return new Prefs(provideSharedPreferences(app)); }\n\n   ", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(3));\n        Assert.assertThat(ds, totalQueryCount(3));\n    }\n\n    @Test\n    public void testTotalCountForOutOfIndex() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "   return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCommitCommand()\n    {\n        return new SvnJavaCommitCommand();\n    }\n\n    /**\n     * {@", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       // create verifiers\n        VerifierBackground verifier = new ValidSchemaNameVerifierImpl();\n        verifiers.put(\"Valid schema name\", verifier);\n\n        verifier = new RemoteFilesExistVerifierImpl();\n        verifiers.put(\"Remote files exist\", verifier", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n        }\n    }\n\n    public void onPostLoginError(String error) {\n        showProgress(false);\n        Log.e(getClass().getSimpleName(), \"Login failed: \" + error);\n    }\n\n    public void onPost", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    * @throws DrupalFetchException if there's an error during the request.\n     */\n    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (inv", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       for q in quirks:\n            if q.name == text:\n                self.chum = q\n                self.chumopen = False\n                self.chum.setChecked(True)\n                self.chum.setCheckState(0, 1)\n                self", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/logout', LogOutHandler),\n            (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/register', RegisterHandler),\n            (r'/login', LogInHandler),\n            (r'", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRRelationQueryNode relationQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getRelationQueryNodeExplanations(relationQueryNode);\n\t\t\treturn expandAtom(", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Unknown criterion: \" + criterion);\n        }\n\n        return informationCriterion;\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.facade", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(ty1, ty2, e1, e2)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn a simply typed argument into a Fst.\n    \n    Arguments:\n    - `expr`: an expression", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(AudioManager audioManager);Next line of code:\n    void inject(AudioBookManager audioBookManager);Next line of code:\n    void inject(AudioBookPlayerModule audioBookPlayerModule);Next line of code:\n    void inject(ClassicPlaybackUi classicPlayback", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   private ArrayList<SliceValue> sliceValues;\n    private ArrayList<CreditCard> creditCards;\n    private ArrayList<CreditPeriod> creditPeriods;\n    private ArrayList<Expense> expenses;\n    private ArrayList<Expense> expensesToShow;\n    private", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   with pytest.raises(ResponseValidationError, match='Response content type is missing'):\n        handle_request(\n            Mock(settings={'pyramid_swagger.skip_validation': True}),\n            Mock(settings={'pyramid_swagger.skip_validation':", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\tpublic void enterAddOrDeleteEdge(AddOrDeleteEdgeCommandContext ctx) {\n\t\tSDocumentGraph graph = atomicalConsole.getDocumentGraph();\n\t\tSDocumentGraph newGraph = null;\n\t\tSDocumentGraph oldGraph = null;\n\t\tSDocumentGraph oldGraph", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "               self.return_dict[\"decode_error_files\"].append(e)\n                self.return_q.put(e)\n            except SoundFileInfoDictError as e:\n                self.return_dict[\"sound_file_info_dict_error\"].append(e)\n               ", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "       PitotTubeResource,\n        \"/aircraft/sensors/pitot_tube\",\n        resource_class_args=(sensors.pitot_tube,)\n    )\n\n    api.add_resource(\n        PressureSensorResource,\n        \"/aircraft", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueKts())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n        self.assert", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   '--ns, --namespace NAMESPACE Filter the result set by namespace',\n    '--ns, --namespace NAMESPACE Filter the result set by namespace',\n    '--ns, --namespace NAMESPACE Filter the result set by namespace',\n    '--ns, --namespace NAMESPACE", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\t@RequestMapping(value = \"/manage/index.html\")\n\tpublic ModelAndView index(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tModelAndView modelAndView = new ModelAndView(\"manage/index\");\n\t\tmodelAndView.add", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           AWSLambdaException awsLambdaException = (AWSLambdaException) t;\n                            if(awsLambdaException.getErrorCode() == null) {\n                                throw new RuntimeException(awsLambdaException.getMessage(), t);\n                            }\n                            logError(awsLambdaException.", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                      join_keyword=u'\\u0915\\u0930\\u0935')\n\n    def test_full_e2e_gujarati_signup_and_cancel_flow(self):\n        logging.info(\"running e2e", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdate", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "       print \"\\n[INFO] MobSF will perform Dynamic Analysis on Android Virtual Device\"\n    else:\n        print \"\\n[INFO] MobSF will perform Dynamic Analysis on VM\"\n    print \"\\n[INFO] MobSF will perform Dynamic Analysis on %s\" % SETTING", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "# 44018, section 10.2\n# standard RRC header\nNext line of code:\n# 44018, section 10.3\n# standard RRC header\nNext line of code:\n# 44018, section ", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\t\t# create adjacency matrix\n\t\t\t\tadjacency = np.zeros((len(faces_lh),len(faces_rh)))\n\t\t\t\tfor i, face_lh in enumerate(faces_lh):\n\t\t\t\t\tfor", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "     result.append(\" \").append(exp.getOperator()).append(\" \");\n    } else {\n      result.append(\" \").append(exp.getOperator()).append(\" \");\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n   ", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "       cacheService.createCacheList(listName);\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final Optional<String> listNameOption = Dialogs.\n        create().\n        title(resourceBundle.", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   ]\r\n    def __init__(self, **kwargs):\r\n        Layer.__init__(self, **kwargs)\r\n        self.add_field('Transaction_ID', 16)\r\n        self.add_field('Cause', 16)\r\n        self.add_", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       \"overtime\",\n                        \"overtime\",\n                        \"overtime\",\n                        \"overtime\",\n                        \"overtime\",\n                        \"overtime\",\n                        \"overtime\",\n                        \"overtime\",\n                        \"overtime\",\n                ", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "           (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.DSAEncrypt): DSAPub,\n            (True, PubKeyAlgorithm.DSAEncryptOrSign): DSAPub,\n            (True,", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "                                 BoardInfo.BOARDTYPE)\n\n    @property\n    def supports_analog_input(self):\n        return self._board_type == 0\n\n    @property\n    def supports_analog_output(self):\n        return self._board_type ==", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "       self.key_size = read_u16le(f)\n\n        for i in range(count):\n            key = read_u16le(f)\n            value = self.objects[key]\n            value.read_index(f)\n\n        return\n", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "           user = create_inactive_user(email, full_name, site)\n\n            # Send email\n            subject = _('Invitation to join %(site_name)s') % {\n                'site_name': site.name\n            }\n            message = _('You", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       draft = await self.fetch_draft_for_channel(ctx.guild.id, ctx.channel.id)\n        if draft:\n            await Utilities.message(ctx.channel, f\"Draft {draft.number_of_players}/{draft.", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "           ex = Hitbtc('BCC_BTC')\n        elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n            ex = Hitbtc('BCC_ETH')\n        elif name == \"%s_ETH_BTC", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           if isinstance(item, (TypedAttribute, TypedElement)):\n                yield item\n            else:\n                context.item = self.get_typed_node(item)\n                yield context.item\n\n    else:\n        for item in context.iter_self():\n", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   DummySherpaServer server = new DummySherpaServer(10);\n    try {\n      DataSource ds = new SHPDataSource(server.getAddress().getHostName(), server.getAddress().getPort());\n      Connection conn = ds.getConnection(NoCredentials", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\treturn result;\n\t}\n\n\tprivate static IndexReader", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   MiPushClient.init(this, \"10000000000000000000000000000000000000000000000000000", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n    private final KadStatistician statistician;\n    private final KadRoutingTable routingTable;\n    private final KadRoutingTable localRoutingTable;\n    private final KadRoutingTable bootstrapRoutingTable;\n    private", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "               tablefmt = None\n            output.append(table(rows, headers, numalign, stralign, tablefmt))\n        if status:\n            output.append(status)\n    return '\\n'.join(output)\n\n\ndef utf8tounicode(s):\n    return", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "       return words_api(wordnik_api, token)\n\n    @app.route('/api/corpus/<token>')\n    @as_json\n    def corpus_api_route(token):\n        return corpus(token)\n\n    @app.route('/", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate TaskListByJQLActivity() {\n\t\tsuper();\n\t}\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.tasklist_by_jql);\n\t\t", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       self.assertIsInstance(handle, events.Event)\n\n    def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False)\nNext line of code:\n        self.assertRaises(", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.vms = new SpringVms(restTemplate, root);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n    }\n\n   ", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   return parserHolder.parse(typeUtils, elementUtils, roundEnv, currentAnnotatedElement, originatingElements);\n                })\n                .collect(Collectors.toList());\n        if (parsedPaths.isEmpty()) {\n            return;\n        }\n        LOG.", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   protected CrawlerSession crawlerSession;\n\n    protected CrawlerSession getCrawlerSession() {\n        return crawlerSession;\n    }\n\n    protected void setCrawlerSession(CrawlerSession crawlerSession) {\n        this.crawlerSession =", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           actionPopupGroup.add(new AddKeyAction(mongoDocumentOperations));\n            actionPopupGroup.add(new AddValueAction(mongoDocumentOperations));\n            actionPopupGroup.add(new DeleteKeyAction(mongoDocumentOperations));\n        }\n       ", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiButton addChannel;\n    private GuiButton removeChannel;\n    private GuiButton save;\n    private GuiButton cancel;\n    private GuiButton reset;\n    private GuiButton clear;\n    private GuiButton clearAll;\n    private GuiButton", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_BACK_CODE:\n                return new BtnBackLight();\n            case ConstantStr.FUNC_VOLUME_CODE:\n                return new BtnVolume();\n            case ConstantStr", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       form.setLayout(new GridLayout(1, false));\r\n        form.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\r\n        form.setMinimumSize(new Dimension(300, 20", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       type = Type.factory(\"string\", None)\n        type.format.pretty = \"foo\"\n        type.format.advanced = \"bar\"\n\n        self.assertEqual(\"foo\", type.get_sample())\n\n    def test_type_get_sample__return", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "               new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(new EventCommandHandler<>(StartCommand.class, StartEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(new", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _datas", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'frob': frob,\n        'perms': 'write',\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t\tfcpMessage = e;\n\t\t\t\t} catch(FCPPutFailedException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPPutFailedException while inserting message\", e);\n\t\t\t\t\treturn false;\n", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       if bytecode[k][2] == 'JUMP_IF_FALSE':\n          cond_stack_size -= 1\n          k += 1\n          continue\n        elif bytecode[k][2] == 'JUMP_IF_TRUE':\n          cond_stack_", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   private static final String TAG = OverviewFragment.class.getSimpleName();\n    private static final String TAG = OverviewFragment.class.getSimpleName();\n    private static final String TAG = OverviewFragment.class.getSimpleName();\n    private static final String TAG", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(MEMSOURCE_SLUGS)\nall_platform_slugs.extend(WEBLATE_SLUGS)\n\n\nclass LanguageSetAdmin(admin.ModelAdmin):\n    list_display = ('ci_pipeline', 'ci_", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\tprivate void openCustomList(List<Property> listLinks) {\n\t\tif (listLinks != null)\n\t\t\tstartActivity(CustomListActivity.start(this, listLinks));\n\t}\n\n\tprivate void openCustomList(List<Property> listLink", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   def parse(self, ping_message: Sequence[str]) -> PingStats:\n        return self.__parser.parse(ping_message)\n\"\"\"\n.. codeauthor:: Tsuyoshi Hombashi <tsuyoshi.hombashi@gmail.com>\n\"\"\"", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           // If chat is null, we have to create a new chat\r\n            chat = new Chat(chatId);\r\n            chat.setName(activity.getResources().getString(R.string.default_chat_name));\r\n            chat.setImageUri(null);\r\n            chat", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic static void main(String[] args) {\n\t\tif (args.length == 0) {\n\t\t\tSystem.out.println(\"Usage: java -jar cubeshaft.jar [width] [height]\");\n\t\t\tSystem.exit(0);\n\t\t", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   if not person.is_authenticated():\n        person = request.user.person\n\n    if not person.is_authenticated():\n        person = request.user.person\n\n    if not person.is_authenticated():\n        person = request.user.person\n\n   ", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, is(statement()));\n        assertThat(qe, isBatchStatement());\n        assertThat(qe, is(batchStatement()));\n        assertThat(qe, is(isStatement()));\n        assertThat(qe, isBatchStatement());\n        assert", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     }\n    }\n  }\n\n  private void parseResponse(String responseTxt) {\n    if (responseTxt == null) {\n      return;\n    }\n\n    String error = null;\n    Document doc = null;\n    try {\n      doc = XML", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   logger.info(\"Merging assembly points from different sources into a set of unique ones.\")\n\n    logger.info(\"Merging assembly points from different sources into a set of unique ones.\")\n\n    logger.info(\"Merging assembly points from different sources into a set of unique ones.\")\n\n   ", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "       GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        PressureSensorResource,\n        \"/aircraft/sensors/", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "                       fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (!level.isInstalled()) {\n\t\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\t\tgetString(R.string.install_levels),\n\t\t\t\t\t\t\t\tgetString(R.string.install_levels", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private final CaptionFormatProvider<String> captionFormatProvider = new CaptionFormatProvider<String>() {\n        @Override\n        public String getCaption(String caption) {\n            return caption;\n        }\n    };\n\n    /** Caption format provuder for the", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root, tasks);\n        this.info = new SpringInfo(restTemplate, root);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   (signerId, keyId) -> Lists.newArrayList(new RSAVerifier(keyId, keyId.getAlgorithm().getAlgorithm()));\n\n    locators = Lists.newArrayList(hmacLocator, rsaLocator);\n\n    privateKey", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n    protected ItemViewDelegate", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                   assertTrue(client.deleteObject(containerName, fileName));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    fail(e.getMessage());\n                }\n            }\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                   dao.insert(trackHistoryEntry);\n                }\n            });\n        }\n    }\n\n    @Override\n    public void foundTrackInfo(TrackInfo trackInfo) {\n        if (trackInfo != null) {\n            if (trackInfo.title.equals(current", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ActionBar actionBar = getSupportActionBar();\n        actionBar.setDisplayHomeAsUpEnabled(true);\n       ", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       ((CandyBarMainActivity) mContext).selectPosition(3);\r\n                        break;\r\n                    case PREVIEW:\r\n                        ((CandyBarMainActivity) mContext).selectPosition(4);\r\n                        break;\r\n                    case PREVIEW_", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = Default.ENCODING\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = None\n\n    convert_configs = load_convert_config(\n        logger, app_configs, subcommand=\"url\", proxy=proxy, encoding=encoding", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "       return None\n\n    def _getPlaylistItem(self, item):\n        \"\"\" Match an item to a playlist item and return the item. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n                return _item\n", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(TypeError, _environment_to_string, 42)\n\n    def test_type_check_for_environment_value(self):\n        class NonString(object):\n            def __str__(self):\n                return u\"a\"\n", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   try:\n      result = cmd.Run(gopts, argv)\n    except KeyboardInterrupt:\n      print(\"repo: interrupted\", file=sys.stderr)\n      result = 1\n    except Exception as e:\n      print(\"repo: error: %s\"", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               runnerListenerList.forEach(runnerListener -> {\n                    runnerListener.onSuccess(taskData);\n                });\n            } catch (Exception e) {\n                taskData.setResultData(e);\n                taskData.setState(TaskData.STATE_ERROR);\n                runnerListener", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       self.assertEqual(r.rejected_status_code, None)\n\n    @async_test()\n    async def test_reject_404(self):\n        r = RejectStatusCode(404)\nNext line of code:\n        self.", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //用户的密码\n        stuPassword = split[2];\n        //用户的电话\n        stuPhone = split[3];\n        //用户的邮箱\n        stuEmail = split[4];\n        //用户的性", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "       self.__device = device\n        self.__ifb_device = device\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__export_path = export_path\n        self.__is_parse_filter_id = is_", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "           state[\"inventory\"] = [self.serialize_item(item) for item in inv]\n        except AttributeError:\n            pass\n\n    def serialize_item(self, item: Item) -> bytes:\n        data = self.serializer.serialize(item)\n       ", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  */\r\n  public Query visit(BasicSearch n, Query query) {\r\n    Operator op = orderOfOps.get(3);\r\n\r\n    if (op != Operator.PROXIMITY) {\r\n      return visitCheckForBoolean(new VisitCheckOp4(n", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = false;\n\t\tthis.surveyName = \"\";\n\t}\n\n\t/**\n\t * It generates the pipeline.\n\t * @param parameters\n\t * @return the generated pipeline\n", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "       try {\r\n            if (dataDir == null) {\r\n                dataDir = DataDirHelper.getDataDir();\r\n            }\r\n            if (dataLogDir == null) {\r\n                dataLogDir = DataDirHelper.getLogDir();\r\n            }\r\n            if (propertiesFile ==", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "       self.ntp_server = self.time_manager.get_ntp_server()\n        self.ntp_server_port = self.time_manager.get_ntp_server_port()\n        self.ntp_server_address = self.time_manager.", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       cursorById.close();\n\n        // Test the basic content provider query\n        Cursor movieCursor = mContext.getContentResolver().query(\n                MovieColumns.CONTENT_URI,\n                null,\n                null,\n                null,\n                null\n        );\n\n        //", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DocumentDialog(self, Devis(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, Contrat(self.inscrit, self.current_cotisation[", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       self.assertEqual(repr(node_children(self.elem)),\n                         \"NodeChildren(children=[<Element 'element'>, <Element 'element'>, <Element 'element'>, <Element 'element'>, <Element 'element'>, <Element 'element'>, <Element", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.mapview);\r\n\t\tmapView = (MapView) findViewById(R.id.mapview);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(true);\r\n\t\tmap", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "           self.new_command_processor())\n\n    def get_netconf_protocol(self):\n        return \"netconf\"\n\n    def get_default_ports(self):\n        return CiscoSwitchCore.get_default_ports()\n\n\nclass Cisco3", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('high_rate')\nNext line of code:\n  assert isinstance(config, HighRateConfig)", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "       return RespostaSAT.consultar_ultima_sessao_fiscal(retorno)\n\n    def consultar_status_de_ativacao(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.Funco", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   calculate_dict = dict(calculate_dict)\n\n    # TODO: better reference state handling\n    calculate_dict = dict(calculate_dict)\n    calculate_dict = dict(calculate_dict)\n    calculate_dict = dict(calculate_dict)\n    calculate", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "   api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\nNext line of code:\n    api.add_resource(PositionResource, \"/fdm/position\",\n                     resource_", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   def _write_corpus_info(self):\n        \"\"\"Write corpus information for speeding up future runs\"\"\"\n        with open(\n            os.path.join(self.corpus_output_directory, \"corpus.json\"), \"w\", encoding=\"utf8\"\n", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   public static final String TextBlockObject = \"String\";\n\n    private static final String EXTRA_CAMERA_PERMISSION_GRANTED = \"camera_permission_granted\";\n    private static final String EXTRA_CAMERA_PERMISSION_D", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\tpublic final StringUtil str = new StringUtil();\n\n\tprivate Util() {\n\t}\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       return mongoManager.getServerConfigurations();\n    }\n\n    private MongoTree createTree() {\n        return new MongoTree(mongoManager, notifier);\n    }\n\n    private void installActions() {\n        ActionGroup actionGroup = new ActionGroup();\n        action", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1.classs(\"header\").txt(\"TodoMVC\");\n\t\t// Input.classs(\"input-next\").txt(\"Next\");\n\n\t\t// Footer with H1 and InputNext line of code:\n\t\t// H1.classs(\"footer\").", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               cropImage(output);\n            }\n        });\n\n        /**\n         * Initialize the camera.\n         */\n        if(cam_view == 1) {\n            camera = Camera.open(cam_id);\n            camera.setDisplayOrientation(90);\n           ", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "\n    @Override\n    public void onAttach(Context context) {\n        super.onAttach(context);\n        mActivity = (MainActivity) context;\n    }\n\n    @Override\n    public void onDetach() {\n        super.onDetach();\n        m", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   search = Search(engine=engine, model=model, index=index, key=key, projection=\"all\", consistent=True, forward=False)\n    search.mode = \"query\"\n    search.run()\n    assert search.results == [\n        {\n            \"id\":", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCTraceCheckpoint checkpoint) {\n        this.checkpoint = checkpoint;\n        addChart();\n    }\n\n    public void gcActivityRemoved(\n            GCTrace gcTrace,Next line of code:\n            GCTraceCheckpoint checkpoint) {", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "           '/properties':                  RestAppPropertys,\n        }\n\n    def __getattr__(self, name):\n        return self.api.resource(name)\n\n    def __setattr__(self, name, value):\n        self.api.add_resource(name,", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "       self._df_manager.set_model(self._directory)\n\n\n    def set_model(self, directory):\n        self._directory = directory\n        self._df_manager.set_model(self._directory)\n\n    def set_default_dirs(self,", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "           MIN_PACKET_CORRUPTION_RATE, MAX_PACKET_CORRUPTION_RATE\n        ),\n    )\n    group.add_argument(\n        \"--reorder\",\n        dest=\"packet_reorder_", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final static Map<Channel, GuiComponent> CHANNELS = Maps.newHashMap();\n\n    private final static Map<Channel, GuiComponent> CHANNELS = Maps.newHashMap();\n\n    private final static Map<Channel, GuiComponent> CHAN", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        * @param event\n         *            The event that triggered the click\n         */\n        void onDateClick(Date date, ContextMenuEvent event);\n    }\n\n    public VCalendar() {\n        init();\n    }\n\n    public VCalendar(String id) {\n       ", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_db_version(self, db_version):\n        self._db_version = db_version\n        return self\n\n    def set_db_opened(self, db_name):\n       ", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onUpgrade(client);\n            break;\n        }\n\n        case PONG: {\n            client.getBaseClient().schedulePingTimeout();\n            Namespace namespace = names", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ActionBarPullToRefresh.OnRefreshListener on", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\treturn new GenerationService(pipeline, preprocessors, postprocessors);\n\t}\n\n\tprivate Preprocessor[] setPreProcessors(Preprocessing preprocessing) {\n\t", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<KV<GCPProject, GCPProjectState>> liveProjects =\n        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource()));\n    // Tag the live projects to indicate they're live.\n    PCollection<KV<GCPProject,", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "       expiry = Column(Timestamp, ttl=True)\n        expired = Column(Boolean, default=False)\n        expired_at = Column(Timestamp, ttl=True)\n        expired_at_ms = Column(Integer, ttl=True)\n        expired", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "               self._def_reader = MeanDefinitions(def_num_input_words, emb_def_dim,\n                                                   dim, vocab, lookup,\n                                                   cache=self._cache)\n            else:\n                raise ValueError(\"Unknown retrieval type:", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isTyping;\n    // Guarded by _lockObject.\n    private boolean _isTypingAudiologistInfo;\n    // Guarded by _lockObject.\n    private boolean", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private int videoQuality;\n    private String videoPath;\n    private String videoName;\n    private String videoType;\n    private String videoPath2;\n    private String videoName2;\n    private String videoType2;\n    private String videoPath3;\n    private String", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n\n    ZoomIn(ZoomIn.class),\n    Zoom", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "           form.instance.user = self.object\n        else:\n            form.instance.user = None\n        return super(UserBase, self).get(request, *args, **kwargs)\n\n    def get_form_class(self):\n        if self.object:\n           ", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static FogDescriptor convert(FogDescriptor descriptor) {\n        Fog fog = new Fog(descriptor.getFogColor(), descriptor.getFogDensity(), descriptor.getFogStart(), descriptor.getFogEnd());\n        return new", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic void close()\n\t{\n\t\tif(this.handle != null) this.handle.close();\n\t}\n\t\n\tpublic void setMeta(String key, String value)\n\t{\n\t\tif(this.handle == null) new ErrorJSON(\"Please open the", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\t\tview.updateProgressView(vals);\n\t\t} catch (final SocketViewException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t}\n\n\t/**\n\t * Method for running the bench.\n\t *", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   sync_stats_manager = SyncStatsManager()\n\n\nclass DashboardView(TemplateView):\n    \"\"\"\n    Dashboard View\n    \"\"\"\n    template_name = 'dashboard/index.html'\n    template_context_processors = [\n        'dash", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\t\"Service discovery file was cached, using it.\");\n\t\t\t\treturn activateLoginIfRequested(createMostSuitableWrapper(\n\t\t\t\t\t\tcity.getDiscoveryUrl", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       planilla_de_relevamiento = PlanillaDeRelevamiento.objects.all()\n        planilla_de_relevamiento = PlanillaDeRelevamiento.objects.filter(planilla_modelo__nombre=request.GET.get('planilla_modelo'))", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     self._cstr = Constraint(root)\n    else:\n      self._cstr = Constraint(root.lhs, root.rhs)\n\n  def __str__(self):\n    return str(self.tree)\n\n  def __repr__(self", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " private ActionSupportHandler<TransferAction>       transferActionSupportHandler       = new ActionSupportHandler<TransferAction>(TransferAction.class);\n  private ActionSupportHandler<MessageAction>        messageActionSupportHandler        = new ActionSupportHandler<MessageAction>(MessageAction.class);\n ", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [1023])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [123456", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   return result\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=('xs:double', 'xs:string', 'xs:string')))\ndef evaluate_format_number_function(self, context=None):\n    value", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item.data.name == \"Sketch\":\n\t\t\t\treturn Qt.ItemIsSelectable | Qt.ItemIsEnabled\n\t\t\telse:\n\t\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"Document", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       array.items = [object1, object2, object3]\n\n        response = Hydrator(version1, versions, []).hydrate_object(object_dto, array)\n\n        self.assertEqual(0, response)\n        self.assertEqual(", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         PipeReader pipeReader = new PipeReader(clientConfig, catBytes);\n          PipeReader pipeReader2 = new PipeReader(clientConfig, catBytes);\n          PipeReader pipeReader3 = new PipeReader(clientConfig, catBytes);\n          PipeReader pipe", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UN", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "               containsString(\"\\\"_index\\\" : \\\"elasticsearch\\\"\"));\n    }\n\n    @Test\n    public void search() throws Exception {\n        String query = \"http://localhost:9200/\" + mapping.getIndex() + \"/\" + mapping.getType()\n                +", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "           (True, PubKeyAlgorithm.FormerlyElGamalEncrypt): ElGPub,\n            (True, PubKeyAlgorithm.ElGamalEncrypt): ElGPub,\n            (True, PubKeyAlgorithm.ElGamalSign): ElGPub,", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tGeoJSONWriter.getInstance().registerGeoJSONWriter(new GeoJSONWriter());\n\t}\n\n\t/**\n\t * Registers the {@link RequestServices} that will be", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = Schema.search(\n                            new ExtMap().mput(Schema.InvokeKeys.ENTITY, context.get(Schema.InvokeKeys.ENTITY))\n                            .mput(Schema.InvokeKeys.ENTITY_KEYS, context.get(Schema.Invoke", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new-user'),\n    url(r'^users/edit/$', edit_user, name='edit-user'),\n", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           }\n                            stack.setCurrentPlaySession(dialogFragment.getPlaySession());\n                            stack.setCurrentStack(dialogFragment.getStack());\n                            stack.setCurrentCard(dialogFragment.getCurrentCard());\n                            stack.setCurrentCardIndex(dialogFragment.", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   private Handler handler = new Handler();\n    private Runnable runnable = new Runnable() {\n        @Override\n        public void run() {\n            handler.postDelayed(this, 1000);\n        }\n    };\n    private int mPage =", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.updateBuffImg()\n        obj.updateBlockLabel()\n        obj.updateComment()\n        obj.updateSocketTags()\n        obj.updateLinks()\n        obj.updateBlockShape()\n        obj.updateBlockWidget()\n        obj.updateCollapseLabel()", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "       assert isinstance(d1, Difference) and isinstance(d2, Difference) and isinstance(d3, Difference)\n\n        assert isinstance(d1, Difference) and isinstance(d2, Difference) and isinstance(d3, Difference)", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, Node newStart, Node newEnd);\n\t}\n\t\n\tprivate static class FlattenTransformer implements NodeTransformer {\n\t\tpublic Node transformConstant(ConstantNode node) {\n\t\t\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\tcommands.add(new CommandClose());\n\t\tcommands.add(new CommandOpen());\n\t\tcommands.add(new CommandSetFrom());\n\t\tcommands.add(new CommandSetTo());\n\t\tcommands.add(new", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       String challenge = doc.getText();\n        if (challenge == null) {\n            throw new IOException(\"Challenge element is null\");\n        }\n        connection.sendChallenge(challenge);\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        String", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\n\nclass TestCipher(unittest.TestCase):\n    \"\"\"Test the cryptographic primitives.\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up the test.\"\"\"\n        self.cipher = None\n        self.cipher_rounds = None\n       ", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private SongListAdapter mAdapter;\n    private FastScroller mFastScroller;\n    private Toolbar mToolbar;\n    private boolean mShowToolbar;\n    private boolean mShowFastScroller;\n\n    private boolean mIsPlaying;\n    private boolean m", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           mSelectedEffect = effect;\n            mSelectedEffect.addListener(this);\n            mSpectaculumView.setEffect(mSelectedEffect);\n        }\n        return true;\n    }\n\n    public void onEffectChanged(Effect effect) {\n        if(m", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "       Bit('ESM', ReprName='ESM Type', Pt=4, BitLen=4, Repr='hum'),\n        Bit('ESM-Cause', ReprName='ESM Cause', Pt=5, BitLen=4,\n            Dict=ES", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           mArtist.setTags(mID3TagEditorDialog.getTags());\n            mArtist.setAlbum(mID3TagEditorDialog.getAlbum());\n            mArtist.setYear(mID3TagEditorDialog.getYear());\n            mArtist.", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "               if self.stopped.stop_check():\n                    return\n                self.log_debug(f\"    {file_name}\")\n                self.log_debug(f\"    {wav_path}\")\n                self.log_debug(f\"    {transcription_path", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t@Override\n\tpublic boolean addUser(String user) {\n\t\treturn UserManagement.addUser(user);\n\t}\n\n\t@POST\n\t@Path(\"adduser/{user}/{password}\")\n\t@Produces(\"application/json\")\n\t@Override\n\tpublic", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiInfo> apiInfo(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns information about the API plan belonging to the given API key.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"api-info\")", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visit(LogMessage message) {\n      if (message.getLevel() == LogLevel.INFO) {\n        vmOptionsBuilder.put(message.getKey(), message.getValue());\n      }\n    }\n\n    public ImmutableMap<String, String> getVm", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   \"\"\"\n    Testing the ERB function\n    \"\"\"\n    erb = erb(freq, bandwidth)\n    assert erb.shape == (2,)\n    assert erb.dtype == float\n    assert erb.min() == 0.0\n   ", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "           fp.seek(fp_tell - offset)\n            offset = fp_tell()\n            if offset == 0:\n                break\n            bytelength = offset\n            fp_tell = fp.tell()\n    else:\n        bytel", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   for (ICommentProcessor commentProcessor : this.commentProcessors) {\n      commentProcessor.run(document, proxyBuilder);\n    }\n  }\n\n  /**\n   * Lets each registered ICommentProcessor have a run on the specified docx\n   * document. At the end", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   protected void loadData(final int page) {\n        super.loadData(page);\n    }\n\n    @Override\n    protected void onDataLoaded(final PatternsResult result) {\n        super.onDataLoaded(result);\n        if (result.getPatterns().isEmpty", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   def flags_int(self, val):\n        self._flags = NotationDataFlags(val)\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self._flags = NotationDataFlags(val)\n\n    def __", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "       self.chum = self.mainwindow.profile()\n        self.chumopen = True\n        self.chum.addMessage(serverMsg)\n        self.chum.addMessage(serverMsg)\n        self.chum.addMessage(serverMsg)\n        self", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "   def check_string(arg, type_, env):\n        arg = check(arg, env)\n        with env.errors.location(arg.location):\n            unify(arg.__type__, type_)\n        return arg\n\n\ndef check_string(arg, type_, env", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   if features is None:\n        features = {}\n    else:\n        features = features\n\n    if ridge_alpha is None:\n        ridge_alpha = 1.0e-100\n\n    if aicc_feature_factors is None:\n       ", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "   private void pausePlayerAndSHowVpaid(PlayerUIController playerUIController, PlayerAdLogicController componentController, ExoPlayer exoPlayer, AdMediaModel adMedia) {\n        if (isNull(exoPlayer)) {\n            return;\n        }\n\n        if", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            ProximitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type ==", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<Result> getSuggestion(@QueryMap Map<String, String> serviceIds,\n                               @Query(\"tag\") String tag,\n                               @Query(\"limit\") @IntRange(from = 1, to = 50) Integer limit);\n\n    @GET(\"", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       return Stream(\n            model,\n            position=position,\n            engine=self,\n            stream_token=model.Meta.stream.get(\"arn\"))\n        \"\"\"\n\n    def delete(self, model, condition=None, consistent=False):\n        \"\"\"Delete one or more", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "       self.log.info(\"confusion matrix:\")\n        self.log.info(confusion_matrix)\n\n        self.log.info(\"accuracy: %2.2f%% (UAR %2.2f%%)\" % (100 * accuracy, 1", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate Submissions submissions;\n\t@", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   def query(self, first_entity, *entities):\n        return Query(self, (first_entity,) + entities)\n\n    def query_all(self, first_entity, *entities):\n        return Query(self, (first_entity,) + entities)", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "   def decoder(self) -> StandardRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences as input, and is initialized with zero initial states.\n\n        Returns\n        -------\n        StandardRNN\n", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\nall_product_slugs = []\nNext line of code:\nfor product in Product.objects.all():\n    all_product_slugs.append(product", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorSegmentNode", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2(Attribute... attributes) {\n\t\treturn new H2(attributes);\n\t}\n\n\tpublic static H3 h3(", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final int numberOfRows = benchRes.getNumberOfResults();\n        final int numberOfResults = benchRes.getNumberOfResults();\n        final int numberOfMethods = benchRes.getNumberOfMethods();\n        final int numberOfMethodsWithResults = benchRes.", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     for edge in self._graph.edges(data=True):\n        if edge.kind == ControlFlow.E_TRUE:\n          visitor.visit(edge)\n        elif edge.kind == ControlFlow.E_FALSE:\n          visitor.visit(edge)\n      return", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.out.println(\"#### Tree type not supported\");", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "\ndef _get_serialization_params(serialization_params):\n    \"\"\"\n    Get the serialization parameters from the given serialization parameters string.\n\n    :param serialization_params: The serialization parameters string.\n    :type serialization_params: str\n    :return:", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                   else if (Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(event.type)) {\n                        Log.e(LOG_TAG, \"Updating room member.\");\n                        RoomState roomState = JsonUtils.toRoomState(event.content", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\t\n\tprivate DDI2FOGenerator ddi2foGenerator = new DDI2FOGenerator();\n\t\n\tprivate DDI2FODTGenerator ddi2fodtGenerator = new DDI2FODTGenerator();\n\t\n\tprivate DDI2LunaticXMLGenerator ddi", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationReleveSalaries(self, _):\n        salaries = self.salaries_choice[\"releves\"].GetClientData(self.sal", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "           H_am = dot(crosstens(H_rot), dot(J_rot, H_trans)) + dot(crosstens(H_trans), dot(J_rot, H_rot))\n            H_am += dot(crosstens(H_trans", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       if (queuedProjectResult == null) {\n            return;\n        }\n        if (queuedProjectResult.getPattern() != null) {\n            adapter.add(queuedProjectResult.getPattern());\n        }\n        if (queuedProjectResult.getPattern() ==", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "               new VirtualBalanceTopCommand(),\n                new VirtualBalanceSetCommand(),\n                new VirtualBalanceRemoveCommand(),\n                new VirtualBalanceAddCommand(),\n                new VirtualBalancePayCommand(),\n                new VirtualBalancePayVirtualCommand(),\n                new VirtualBalanceTopCommand(),\n", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "           _log.info('Initializing a %s prior for the parameters.', prior['name'])\n        else:\n            raise TypeError('prior must be a dict, PriorSpec, or None')\n        if isinstance(symbols, str):\n            symbols = [symbols]\n       ", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const(arg)\n    elif op == LOAD_ATTR:\n      return Attr(arg)\n    elif op == LOAD_NAME:\n      return Name(arg)\n    elif op == LOAD_FUNC:\n      return Func(arg)\n   ", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final ResourceLoader res;\n\n\tprivate final Physics physics;\n\tprivate final FringeLayer fringeLayer;\n\tprivate final PingPongEq pingPongEq;\n\n\tprivate final Config config;\n\n\tprivate final EntityParser parser;\n\n\tprivate final EntityController", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    Temperature", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> authorWithBooks() {\n\t\tList<AuthorWithBooks> list = new ArrayList<>();\n\t\tAtomicInteger aInteger = new AtomicInteger();\n\t\tAtomicInteger aInteger2 = new AtomicInteger();\n\t\tAtomic", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(Class<T> rootClass, SQLQuery rootQuery) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass);\n\t\tthis.rootQuery = rootQuery;\n\t}\nNext line of code:\n\tpublic SQLBatch(SQL", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       if app_info['packagename'] == 'com.android.settings':\n            app_info['packagename'] = 'com.android.settings.app_settings'\n        if app_info['packagename'] == 'com.android.settings.app_settings':\n", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    */\n    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return genomes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genomes\n", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n            ]),\n        ]),\n        {'inc': inc_type},\n    )\n\n\ndef test_tuple():\n    inc_type = Func[[IntType], IntType]\n    check_expr_type(", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, prepared(is(\"...\")));\n        assertThat(pe, prepared(hasItems(\"...\", \"...", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\t\t\tself._properties_dock.set_item(selection[0])\n\t\t\tif type(selection[0]) is Edge:\n\t\t\t\tself._viewWidget.set_edge_view(selection[0])\n\t\t\t\tself._ribbon_widget", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        case 500:\n                            return new InternalServerErrorException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return cause;\n           ", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(String.class, new DefaultStringRenderer());\r\n\t\tregisterRenderer(Character.class, new DefaultCharacterRenderer());\r\n\t\tregisterRenderer(Character.class, new DefaultCharacterRenderer());\r\n\t\tregisterRenderer(Character.class, new DefaultCharacterRenderer());\r\n", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizedFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final FacetSort getFacetSort(Element elt) {\n\t\tFacetSort sort;\n\t", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^(?P<pipeline_id>[\\w\\-\\+]+)/(?P<job_id>[\\w\\-\\+]+)$', PipelineDetailView.as_view(), name=\"pipeline-detail\"),\n    url(r'^(?P<pipeline", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       if (bitmap != null) {\r\n                            intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        }\r\n                        mContext.startActivity(intent);\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   client = oauth.Client(csr, access_token)\n\n    oauth_callback = quote(request.build_absolute_uri(reverse('complete-vimeo')))\n    resp, content = client.request('http://vimeo.com/oauth/authorize", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               # Compute the pointing direction and magnitude corrected for vignetting and extinction\n                # Compute the pointing direction and magnitude corrected for vignetting and extinction\n                # Compute the pointing direction and magnitude corrected for vignetting and extinction\n                # Compute the pointing direction", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   grid = np.linspace(options['param_ests'][0], options['param_ests'][1], options['density'])\n    # Fit model\n    if options['sigmoid_type'] == 'logistic':\n        # Fit model\n        metrics = _", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollDices();\n          }\n        else {\n          Board.this.rollDices();\n        }\n      }\n    });\n    rollBtn.setX(getX() + (boardbg.getWidth() - rollBtn.getWidth()) / 2", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "       self.assertEqual(etree_iter_paths(root), [\n            ('a', 'b1', 'c1'),\n            ('a', 'b1', 'c2'),\n            ('a', 'b2', ''),\n            ('a', 'b3', 'c", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "       self.runner.add(self.rule, with_child=True)\n\n    def test_detect_soft404(self):\n        self.engine.add_response(StaticResponse(404, {}))\n        self.engine.add_response(StaticResponse", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfe = CFeCancelamento(\n            cNPJ='11122233396',\n            xNome='João de Teste',\n            xMun='Catanduva',\n            UF='SP',\n            chCanc=_", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "    * @return the specified input stream parsed into user names\n     */\n    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a profile.\n     *\n     * @param inputStream input stream, must not be null\n", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           EtsiResponse resp = this.client.sendRequest(req);\n            \n            // 5. Get the ASiC response\n            ASiCResponse asiCResponse = resp.getASiCResponse();\n            \n            // 6. Print the ASiC response\n           ", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcTable:\n\t\t\treturn get_icon(\"calctable\")\n\t\telif type(obj) is Calc:\n\t\t\treturn get_icon(\"calc\")\n\t\telif type(obj) is CalcView:\n\t\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<PlayerOverview> playerOverview;\n\tprivate List<Game> game;\n\tprivate List<TeamLeaders> teamLeaders;\n\tprivate List<TeamLeadersResponse> teamLeadersResponse;\n\tprivate List<TeamRosterResponse> team", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       if (packageInfo == null) {\n            AppliveryLog.error(\"Null package info at send feedback\");\n            return;\n        }\n\n        AppliverySdk.Logger.log(\"Package info: \" + packageInfo.getPackageName());\n\n        AppliverySdk.", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           if table_name not in table_index:\n                table_index[table_name] = []\n            table_index[table_name].append(key)\n            request[table_name] = key\n\n        if consistent:\n            request[\"ConsistentRead\"] = True\n", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               art = key['art']\n                if art:\n                    art = draw_art(art)\n                    description += '\\n\\n' + art\n            print('{0}'.format(fingerprint))\n            print('{0}'.format(description))\n            print", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Progress, ProgressAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "       return RespostaExtrairLogs.analisar(retorno)\n\n    def atualizar_configuracao(self, configuracao):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.atualizar", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), 'http://www.w3.org/XML/1998/namespace')\n        self.assertEqual(node_document_uri(document), 'http://www.w3.org", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new CalendarItem.StartDateComparator());\n                    break;\n                case START_DATE_DESC:Next line of code:\n                    Arrays.sort(sorted, new CalendarItem.StartDateDescComparator());\n                    break;", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "           self.logger.error(f\"Error initializing training for {self.identifier}: {e}\")\n            self.training_complete = False\n            self.worker.training_complete = False\n            self.worker.training_error = True\n            self.worker.training_error_message", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final OAuth2URL oAuth2URL;\n    private final OAuth2Requester oAuth2Requester;\n    private final OAuth2Action oAuth2Action;\n    private final OAuth2Requester oAuth2RequesterImpl;\n    private final OAuth2URL", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Vms vms;\n    private final Tasks tasks;\n    private final Errands errands;\n    private final SpringInfo info;\n    private final SpringReleases releases;\n    private final SpringDeployments deployments;\n    private final SpringVms vms;\n", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "\n    public void setAudiologistInfo(AudiologistInfo audiologistInfo)\n    {\n        _chat.setAudiologistInfo(audiologistInfo);\n    }\n\n    public void setAudiologistInfo(String name, String pictureUrl)\n    {\n        _chat", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand( this );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {Next line of code:\n        return new SvnJavaBlameCommand( this );\n    }", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    public void onMouseClick(GuiMouseEvent event) {\n        if (event.getButton() == MouseEvent.MOUSE_LEFT) {\n            if (event.getClickCount() == 2) {\n                if (event.getClicked() == this)", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "           new blackCall(), new blackPut(), DATA[looptest], EPSILON);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc] ? new blackPut() : new blackCall(), Next line of code:\n", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class,\n            AthenaGM.class\n    };\n\n\n    /**\n     * List of modules loaded\n     */\n    private static HashMap<String, Module> modules = new HashMap<String, Module>();\n\n\n    /**\n     * Load a module\n    ", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    */\n    public static DownloadQueue newDownloadQueue() {\n        return new DownloadQueue();\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize the thread pool size.\n     * @return {@link DownloadQueue}.\n    ", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public void init(Config config) {\n    var configs = config.getConfigs();\n    var packager = configs.get(\"packager\");\n    var packagerConfig = packager.getConfig();\n    var packagerConfigs = packagerConfig.getConfigs();", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    */\n    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        Validate.notNull(element, \"parseQuerySetConfigTag::element cannot be null\");\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        NodeList querySetNodes = element.", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "                       # print('S: ',S)\n                        # print('x: ',x)\n                        # print('ret: ',ret)\n                        # print('sid: ',S['sid'])\n                        # print('status: ',S['status'])\n                        #", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "           left_foot_task = ContactTask(\n                self.robot, self.robot.left_foot, self.swing_foot,\n                weight=swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right_foot_task", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "   BvNeg, BvNot, Extract, ZeroExtend, Repeat, Ite\n\n\ndef test_bitvector_operation():\n    \"\"\"Test the operation module.\"\"\"\n    for op in simple_op:\n        print(f\"Testing {op}...\")", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew DQTSegment(aJPEG.mICCProfile).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew DHTSegment(aJPEG.mDHT).encode(aOutput).log(aLog);\n", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           if (type == HibiscusExportType.SAMMEL) {\n                mapper.exportSammel(sl);\n            } else if (type == HibiscusExportType.ALLE_EINZEL) {\n                mapper.exportEinzel(", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "\n\ndef generate_pronunciations_func(\n    log_path: str,\n    dictionaries: List[str],\n    text_int_paths: Dict[str, str],\n    word_boundary_paths: Dict[str, str],\n    ali_", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       Lore lore = LoreLoader.getLore(category, ident);\n        if (lore == null) {\n            entityPlayer.addChatMessage(new ChatComponentText(\"Could not find lore '\" + ident + \"' in category '\" + category + \"'\"));\n           ", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   private static final DateTimeFormatter BUDGET_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\nNext line of code:\n    private static final DateTimeFormatter RECURRING_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\nNext line of", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\n\tprivate static final String[][] CLASSPATH_SEPARATOR = {\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t\"\",\n\t\t\t", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    FlipIn(FlippingIn.class),\n    FlipInDown(Fli", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode, search_mode=search_mode)\n\n    if verbose_level >= 1:\n        smart_print(\"Problem:\")\n        smart_print(problem)\n\n    if verbose_level >= 2:", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "           h5 =  LocalHost5\n        return H()\n\n    def test_hosts_container_init(self):\n        \"\"\"\n        Test that the HostsContainer can be initialized with a list of hosts.\n        \"\"\"\n        hc = HostsContainer(self.get_hosts", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           if command.startswith(\"--src-network\"):\n                return self.src_network\n            elif command.startswith(\"--dst-network\"):\n                return self.dst_network\n            elif command.startswith(\"--src-port\"):\n                return self.src_", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GPSL1L2TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL1L2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    * @return a List of Expenses\n     */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses =", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [0] * 25\n\n  def test_inf_input(self):\nNext line of code:\n    my_", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "               isinstance(t2, RecordMeta)\n            ):\n                t1.__instance__ = Record[field_refs(backref, t2.__items__)]\n                unify(t1, t2, backref)\n            else:\n                raise\n\n    else:\n       ", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       host=\"blinkforhome.com\",\n        port=443,\n        username=\"\",\n        password=\"\",\n        client_id=\"\",\n        client_secret=\"\",\n        refresh=DEFAULT_REFRESH,\n        motion_interval=DEFAULT_MOTION_", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel::flags\")\n\t\t\tprint(str(e))\n\t\t\treturn default_flags\n\n\tdef setFlags(self, index: QModelIndex, flags):\n\t\t", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     self._varz.serialization_failures()\n      self._varz.serialization_failures()\n      self._varz.serialization_failures()\n      self._varz.serialization_failures()\n      self._varz.serialization_failures()", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       assertThat(out.toString(), equalTo(\"\"));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaCliWithoutJmx() throws Exception {\n        TestThread.JMXProcess process = disposer.register(TestThread.runJmxObservableProcess", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data);\n    }\n\n    private static DrumStoreEntry<PLDTestData, PLDTestData> createNewData(long key, DrumOperation op, long... val) {\n        InMemoryEntry<PLDTestData, PLD", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaProperties();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManager(getRoxanaProperties(), getTranslator());\n    }\n\n    private class MockedBusinessException extends BusinessException {\n       ", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._SendMessage(self._ping_msg)\n\n  def _SendMessage(self, msg):\n    \"\"\"Constructs and sends a message.\"\"\"\n    self._log.debug('Sending message.')\n    self._socket.send(self._BuildHeader(self._", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert freq2lag(v) == lag2freq(v)\n\n\nclass TestLazy(object):\n  def test_lazy_range_is_iterable(self):\n    assert isinstance(xrange(10), it.Iterator)\n\n  def", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "       self.spell_helper = SpellHelper()\n        self.config_cache = GlobalConfigCache()\n        self.guild_config = dict()\n        self.guild_metadata = dict()\n        self.guild_config_cache = dict()\n        self.gu", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   return self.parser.evaluate_comparison_operator(operands)\n\n\n###\n# Arithmetic operators\n#\n# Ref: https://www.w3.org/TR/xpath20/#id-arithmetic-operators\n#\n@method('+')\n", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(mUserLearnedDrawer ? \"You have accessed this screen before.\" : \"Welcome back!\");\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEventParents = new ArrayList<>();\n       ", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           // Show the new chat\n            Toast.makeText(getApplicationContext(), \"Chat created\", Toast.LENGTH_LONG).show();\n            // Open the chat activity\n            Intent intent = new Intent(getApplicationContext(), InviteToChatActivity.class);\n            intent.putExtra", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        Assert.assertNotNull(response);\n        Assert.assertTrue(response.getReturn_code().equals(\"SUCCESS\"));\n        Assert.assertTrue(response.getReturn_msg().equals(\"OK\"));", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       assertNotNull(creator.create(STRING_PARAMETER_NAME_01, RANDOM_STRING_PARAMETER_VALUE_01));\n    }\n\n    @Test\n    void createTestWithNullValue() {\n        Translator translator = new Mock", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "\n    def __init__(self, username=None, password=None, project_id=None,\n                 auth_url='',\n                 insecure=False, timeout=None, tenant_id=None,\n                 proxy_tenant_id=None, proxy_token=None,", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "           MacOsPingParser,\n            AlpineLinuxPingParser,\n            NullPingParser,\n        )\n        for parser_class in parser_class_list:\n            try:\n                parser = parser_class(self.__timezone)\n                if parser.parser_name", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       m.videoSetFrameRate.setText(\"1\");\r\n        }\r\n        else if (Integer.parseInt(m.videoSetFrameRate.getText()) < 1)// set maximum\r\n        {\r\n            m.videoSetFrameRate.setText(\"1\");\r\n        }\r\n\r\n       ", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self._probe = probe\n        else:\n            self._probe = _probe_defaults(**kwargs)\n        self._channels = None\n        self._spike_recordings = None\n        self._spike_samples = None\n        self._spike", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "     self._cdg = ControlDependence(self)\n    return self._cdg\n\n  @property\n  def control_dependence_frontier(self):\n    \"\"\"\n      Returns the ``ControlDependence`` frontier. This is lazily computed.\n   ", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       IntentIntegrator integrator = new IntentIntegrator(this.getActivity());\n        integrator.setOrientationLocked(true);\n        integrator.setOrientationLocked(IntentIntegrator.ORIENTATION_PORTRAIT);\n        integrator.setOrientationLocked(IntentIntegr", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": " public void visit(final SelectQuery selectQuery) throws QueryException {\n    result.append(SELECT).append(\" \");\n    visit(selectQuery.getFrom());\n    result.append(\" \").append(FROM).append(\" \");\n    visit(selectQuery.getWhere());\n    result", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tString baseFile = basePath + \"/dereferencing.xml\";\n\t\t\tString targetFile = basePath + \"/dereferencing-xforms.xml\";\n\t\t\t\n\t\t\tString baseFile2 = basePath + \"/titling.xml\";\n\t", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "           self.assertEqual(\n                DiscreteDistribution().draw(10, 10).shape, (10, 10))\n        )\n\n    def test_draw_events(self):\n        self.assertEqual(\nNext line of code:\n            self.", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "\n        state = stateFactory.createState(VastAdSandBox.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState.class", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptString(final FixTag tag, final String value) {\n\t\tif (value == null) {\n\t\t\tthrow new InvalidValueException(tag, \"value is null\");\n\t\t}\n\t\tif (value.length() == 0) {\n\t\t", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "       self.assertEqual(u\"\\u0906\\u092a\\u0915\\u093e\", replace_blank_name(name=u\"\\u0906\\u092a\\u0915\\u093", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expect(systemUnderTestMock.failWithParameter(GIVEN_STRING)).andReturn(null);\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                ", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "       #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n       ", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "       # Create the table if it doesn't exist\n        if not self.table_exists(model):\n            self.create_table(model)\n\n        # Make sure the table is in the correct state\n        if not self.table_is_valid(model):\n            raise Invalid", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "       return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def consultar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   with pytest.raises(TypeError):\n        engine.bind(User)\n\n\ndef test_bind_model(engine):\n    \"\"\"Can bind a model\"\"\"\n    class Model(BaseModel):\n        id = Column(String, hash_key=True)\n   ", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass_sun_kg\n    assert u6.base_value == 1.0\n\n    # nonzero CGS conversion factor\n    u7 = Unit(\"Msun/pc**3\")\n    assert u7.dimensions == mass_sun_", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "                ']'],\n      'rc': 0,\n      'test': 'linesnows'},\n     ASSOC_MOCK_FILE, OK],\n\n    ['Verify instance command references, returns paths',\n     ['references', 'TST_Person.name=\"Mike", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load modules\n        loadModules();\n        // Load plugins\n        container.loadPlugins();\n        // Load plugins\n        container.loadPlugins();\n        // Load plugins\n        container.loadPlugins();\n        // Load plugins\n        container.loadPlugins();\n       ", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       return self.system_object.get_tag(index, name)\n\n    def get_tag_info(self, index, name=None):\n        \"\"\"Retrieve information about a tag.\n\n        :param int index: Index into the tag list as restricted by name.\n", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   @Override\n                    public void showDemoMode(boolean show) {\n                        MainActivity.this.showDemoMode(show);\n                    }\n\n                    @Override\n                    public void showDemoMode(boolean show) {\n                        if (show) {\n                           ", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page\n\t\t\t);\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.sensors.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.sensors.thermometer.temperature, thermometer_data[\"temperature\"], 3)", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.age\n    value = 3\n    expected_ref = \":v0\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0\": expected_action.value}\n\n    ref, action = reference", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           Alert alert = new Alert(AlertType.ERROR);\r\n            alert.setTitle(\"Error\");\r\n            alert.setHeaderText(\"Error\");\r\n            alert.setContentText(e.getDump());\r\n            alert.showAndWait();\r\n            return false;\r\n        }\r\n       ", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "       if request.user.is_authenticated:\n            if request.user.username == post.user.username:\n                nodes = nodes.filter(deleted=False)\n        else:\n            nodes = nodes.filter(deleted=False)\n        comments = Comment.objects.", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of gifs to use in gif searching.\n     * Clicking on these gifs can perform searches with the gif itself as the", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionErrorListener).ifPresent(ConnectionErrorListener::error);\n        }\n    };\n\n    @NonNull\n    private final WifiStateListener mWifiStateListener = new WifiStateListener() {\n        @Override\n        public void onWifiStateChanged", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "       for (PlaySession playSession : stack.getPlaySessionList()) {\n            playSession.addListener(this);\n        }\n        for (PlaySession playSession : stack.getArchivedPlaySessionList()) {\n            playSession.addListener(this);\n        }\n    }", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "\n    def __call__(self, args: SegmentVadArguments):\n        \"\"\"\n        Call the function\n\n        Parameters\n        ----------\n        args: SegmentVadArguments\n            Arguments for the function\n        \"\"\"\n        self.vad_path = args.", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Vms vms;\n    private final Deployments deployments;\n    private final Tasks tasks;\n    private final Errands errands;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n\n    def get_tag_info(self, index, name=None):\n        \"\"\"Retrieve a metadata tag.\n\n        :param int", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "               nbits_encoded += self.process_section(bufr_message, bit_writer, section)\n                if section.end_of_message:\n                    break\n\n        if self.compiled_template_manager:\n            self.compiled_template_manager.add_", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            report = form.cleaned_data['report']\n            comments = form.cleaned_data['comments']\n\n            # Log moderation event\n            log_comment = '{}'.", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   @Override\n    public void print(final AbstractResult result) {\n        if (result instanceof BenchmarkResult) {\n            final BenchmarkResult benchmarkResult = (BenchmarkResult) result;\n            final AbstractMeter meter = benchmarkResult.getMeter();\n            final int[][] table", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       if (MPJ_RUN)\n        {\n            // initializing MPJ runtime environment\n            try {\n                String[] argsApp = MPI.Init(args);\n                MPJ_ME = MPI.COMM_WORLD.Rank();\n                MPJ_SIZE", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(URL(\"http://www.example.com/record.mp3\"), true);\n\t\tNext line of code:\n\t\ttropo.record(URL(\"http://www.example.com/record.mp3\"), true, true);\n\t\t", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "               listaDeRespostas.getPropriedades().getEstado() == \n                EstadoDaListaDeRespostas.SALVA) {\n\t        nenvios = listaDeRespostas.getPropriedades().getNenvios();\n\t        nmax", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onOpen(String url) {\n\t\t\t\tmViewPager.setAdapter(adapter = new PageViewPagerAdapter<ProgramTrack>(MainActivity.this, ProgramTrack.class));\n\t\t\t\tmViewPager.setCurrentItem(0);\n\t\t\t}", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    AdInterface adInterface;\n\n    @Mock\n    PlayerUIController playerUIController;\n\n    @Mock\n    FsmPlayerImperial fsmPlayerImperial;\n\n    @", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tsuper.stop();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tstage.setTitle(\"Drive Uploader\") ;\n\t\t\tstage.setScene(new Scene(new Group(new Label(\"Drive Uploader\"), new", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String className = type.getSimpleName().toString();\n    String superClassName = getSuperClassName(type);\n    String superClassName2 = superClassName.isEmpty() ? \"\" : \" extends \" + superClassName;\n    String superClassName3 = superClassName2.isEmpty() ? \"\" : superClassName", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        /**\r\n         * 获取当前的push状态\r\n         * @return 当前的push状态\r\n         */\r\n        public static int getPushState", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 1\n\n\ndef test_parameters_msgtype3():\n  '''\n  Zero", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   if is_document_node(elem):\n        return f'/document-node[{context.position}]'\n    elif is_element_node(elem):\n        return f'/element-node[{context.position}]'\n    elif is_attribute_node(elem):\n       ", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\n    def get(self, key):\n        \"\"\"Returns the value of a column\"\"\"\n        return self.data", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               addMessage(new ChatMessage(ChatMessageSource.AUDIOLOGIST, \"Typing...\"));\n                _isTyping = true;\n            }\n            else if (message.getType() == MessageType.TYPING_END)\n            {Next line of code", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tdmy_covariates = np.concatenate(covars,1)\n\t\tdmy_covariates = dmy_covariates.astype(np.float32, order = \"C\")\n\t\tdmy_covariates = dmy", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       assertThat(main.getLock(), equalTo(ThreadLock.BUSY));\n    }\n\n    @Test\n    public void busyWaiting2() {\n        ThreadDumpThread main = sut.thread(\"main\");\n        assertThat(main.getStatus(), equalTo", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               Calendar calendar = Calendar.getInstance();\n                calendar.set(Calendar.YEAR, mRecord.getYear());\n                calendar.set(Calendar.MONTH, mRecord.getMonth() - 1);\n                calendar.set(Calendar.DAY_OF_MONTH, mRecord.", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           ProximitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type ==", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private Toolbar toolbar;\n    private ViewPager viewPager;\n    private TabLayout tabLayout;\n    private int currentPosition;\n    private int currentTab;\n    private boolean isFirstTime;", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.link.start()\n\n    def init_logging(self):\n        \"\"\"\n        Set up logging\n        \"\"\"\n        self.log = logging.getLogger('')\n        self.log.setLevel(self.config.log_level)\n        self.log.add", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       return RestfulModelCollection(Webhook, self)\n\n    @property\n    def threads(self):\n        return RestfulModelCollection(Thread, self)\n\n    @property\n    def labels(self):\n        return RestfulModelCollection(Label, self)\n\n    @", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       activityLightLevelManager);\n    activityLightLevelChanger.setOnLightLevelChangedListener(new ActivityLightLevelChanger.OnLightLevelChangedListener() {\n      @Override\n      public void onLightLevelChanged(int lightLevel) {\n        Log.d(TAG, \"Light level", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_error = calculate_non_equilibrium_thermochemical_error(parameters=parameters, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_therm", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('Identity', Pt=Identity(), Len=8),\r\n            ] if with_options else [])\r\n\r\n# section 9.2.13\r\nclass IMSI_DETACH_COMMAND(Layer3):\r\n    '''\r\n    ME", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       TcClassParser(self.__con).parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_tc_class_qdisc(self, device):\n       ", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "       result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   def test_validaton_error_decorator_transforms_SwaggerMappingError():\n        mock_validator = mock.Mock(spec=SchemaValidator)\n        mock_validator.validate.side_effect = SwaggerMappingError\n        mock_validator.validate.return_", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
