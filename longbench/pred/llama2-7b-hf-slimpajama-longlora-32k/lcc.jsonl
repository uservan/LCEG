{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t{\n\t\t\t\tDuelPlayer pl = p.Play", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 18062}
{"pred": "\t\t\t\tif 'R' in roots:\n\t\t\t\t\troots.remove('R')\n\t\t\t\tif 'R' in roots:\n\t\t\t\t\t\troots.remove('R')\n\t\t\t\tif 'R' in roots:\n\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 3999}
{"pred": "       rfd, cfilename = open_tmp_file('pysndfile.wav')\n        try:\n            # Open the file for writing\n            format = Format('wav', 'pcm1')\n            b = Sndfile(fd, 'w', format, 2", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 2827}
{"pred": "           if e.text == language:\n                return True\n            else:\n                return False\n    def get_subtitles(self):\n        return self.get_elements_list(self._SUBTITLES)\n    def get_subtitles_for_video(self,", "answers": ["            if e.text == language:"], "all_classes": null, "length": 2476}
{"pred": "\t\t\t\tLStyle style = (WMCStyle) value;\n\t\t\t\twriter.addAttribute(\"name\", style.getName());\n\t\t\t\twriter.addAttribute(\"default\", style.getDefault());\n\t\t\t}\n\t\t\t}\n\t\t\t}\n", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 3175}
{"pred": "       if self.question:\n            ret = self.question.split(\" \")\n            ret = ret.split(\" \")\n            if ret[0] == \"\":\n                ret = ret[1:]\n            ret = ret.split(\" \")\n            ret = ret.split(\" \")\n           ", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 5308}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(mob);\n                    Send(mob, SR_Utilities.FetchRune(mob));\n                    break;\n                case 3:\n                    mob.SendLocalizedMessage(\"You have already marked", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 3281}
{"pred": "           for (X509Certificate cert : chain) {\n                s.print(\"Certificate: \");\n                cert.print(s);\n            s.println(\"  \");\n            }\n        }\n        }\n    }\n}\n/*\n * CertificateVerify ... CLI", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 4534}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n            return sp;\n        }\n    }\n    public static JESpace getSpace (String name) {\n        JESpace sp = spaceRegistrar", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 2986}
{"pred": "\t\t\t\t}\n\t\t}\n\t}\n\t}\n\t}\n\tstatic class Alchemize extends Spell {\n\t@Override\n\tpublic void cast(Hero hero) {\n\t\tif (hero.energy() > 0) {\n\t\t\tif", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 2702}
{"pred": "       \"\"\"\n        if environ['REQUEST_METHOD'] == 'POST':\n            return self.do_post(environ, start_response)\n        else:\n            start_response('405 Method not allowed', [Content-Type', 'text/plain])\n            return ['Method", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 5546}
{"pred": "       self.webview.execute_javascript(\"markRepeated('%s')\" % status_id)\n    def __mark_as_reated(self, status_id):\n        self.webview.execute_javascript(\"markRepeated('%s')\" % status_", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 3348}
{"pred": "           return {\"error\": False}\n        except Exception as e:\n            result = {\n                \"error\": True,\n                \"message\": str(e),\n                \"back\": traceback.format_exc()\n            }\n            result\n    def action_copy_from_ftp", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 4566}
{"pred": "\t\tAssert.Throws (typeof (ArgumentException), \"Union of different identities\");\n\t}\n\t[Test]\n\t[Expected (typeof (ArgumentException)]\n\tpublic void Union_DifferentIdentities ()\n\t{\n\t\tIdentity a = new ZoneIdentity (SecurityZone", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 2697}
{"pred": "       if line.starts(\"-----BEGIN CERTIFICATE-----\"):\n            line = line.strip()\n            if line.starts(\"----- END CERTIFICATE-----\") or line.startswith(\"----- BEGIN CERTIFICATE-----\"):\n            line = line.strip", "answers": ["        certs = []"], "all_classes": null, "length": 2759}
{"pred": "       DomainInfo dinfo = new DomainInfo(domain);\n        request.setAttribute(\"domainInfo\", dinfo);\n        request.setAttribute(\"domainInfo\", dinfo);\n    }\n    /**\n     * Prepares the domain\n     *\n     * @param request being serviced\n    ", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 2620}
{"pred": "           self.__datastream_transport = self.__transport.get_transport(0)\n            self.__datastream_protocol = down_cast(DataProtocol)\n            self.__datastream_fd = self.__datastream_transport.makefile()\n            self.__datastream", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 4660}
{"pred": "\t\t\tif (option1) {\n\t\t\t\toption1 = (bool) store.GetValue (iter, column);\n\t\t\t\tif (option == true) {\n\t\t\t\t\toption = false;\n\t\t\t\t}\n\t\t\t}\n\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 3436}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            argValues[i] = getMessage(application,", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 4037}
{"pred": "\t\t\t\t\tif(Data.containsKey(id))\n\t\t\t\t\t\tData.remove(id);\n\t\t\t\tData.put(id, new Firm(id);\n\t}\n\t\t\t}\n\t}\n\t}\n\tstatic\n\tstatic", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 2137}
{"pred": "\tgeneralPage = new PreferencePage() {\n\t@Override\n\tprotected FieldEditor createFieldEditors() {\n\taddField(SHELL_HEIGHT, new IntegerField(SHELL_HEIGHT, getField());\n\taddField(SHOW_MINIMODE_DI", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 4046}
{"pred": "               if (m_Owner.Spell != null)\n                {\n                    m_Owner.Spell = null;\n                    m_Owner.SendLocalOverheadMessage(02(0x222 );\n                }\n                }\n            }\n        }\n        }", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 1946}
{"pred": "       \"\"\"Finalize the :class:`.Session` after a flush.\n        This method is called after all\n        :class:`.Session` operations have been completed.  It is used to\n        to clean up any state that was left over from the flush.  This method\n        is called after", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 11313}
{"pred": "\tfor (IField field : fields) {\n\t\tfinal String name = field.getName();\n\tList<IField> named = name2Field.get(name);\n\tif (named==null) {\n\t\tnamed = new ArrayList<IField>(3);\n\t\tname", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 5645}
{"pred": "   @addslash\n    def get(self, *args, **kwargs):\n        if self.request.path.ends(\"/\"):\n            self.redirect(\"/\")\n        return method(self, *args, **kwargs)\n    return wrapper\n    def _handle_request(self,", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 17277}
{"pred": "\t\twriter.Write (\"<div\");\n\twriter.WriteAttribute (\"id\", \"MultiView\");\n\twriter.Write (\"id\", this.ID);\n\twriter.Write (\"class\", \"MultiView\");\n\twriter.Write (\"style\", \"MultiView\");\n\twriter.Write (\"", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 2343}
{"pred": "   args = parser.parse_args()\n    wigle_downloader = WigleDownloader(args.user, args.password, args.outpath)\n    wigle_downloader.run()\n    wigle_downloader.download()\n    wigle", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 3605}
{"pred": "               if (mod >= 16 && mod <= 20)\n                {\n                    if (i.SkillGroup1 == SkillGroup1)\n                    {\n                        if (i.SkillGroup2 == SkillGroup2)\n                        return GetNameForAttribute", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 7335}
{"pred": "       builds = []\n        for platform, build in builds:\n            if platform in platforms:\n            builds.append({platform: build})\n        if build == 'aurora':\n            builds.append({'os': 'os_android',\n                   'os_pretty': 'Android", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 2437}
{"pred": "\t\tif (projectID==null) {\n\t\t\tstateBeansList = StatusBL.loadByLabel(label);\n\t} else {\n\t\tstateBeansList = StatusBL.loadByProjectIssueTypeAndLabel(projectID, label, issueID);\n\t", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 3886}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntax) {\n                var argument = argument.Parent.ReplaceWith( Syntax.Argument( Syntax.Expression( SyntaxFactory.ArgumentList( Syntax.ArgumentList( Syntax.Expression( Syntax.Identifier( argument.Expression.Expression.Value.ToString() ) ) ) )", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 3021}
{"pred": "       self.assert_children(2)\n        self.assert_children(1)\n        # Set the user_partition_id to 1.\n        self._update_partition_id(1)\n        # Verify that the children are now 1 and 2.\n        self", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 11033}
{"pred": "           if (subset) {\n                tmp.Add(subset);\n                if (subset.Length == 0)\n                    continue;\n                tmp.Add(subset);\n                if (subset.Length == 1)\n                    tmp.Add(subset);\n                if (subset.", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 3745}
{"pred": "\t\t\t\t\t\tif (cell.getNumUsagesIn() == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.depth = 0;\n\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 3790}
{"pred": "       bitmapReference = new SoftReference<Bitmap>(task.call());\n        task = null;\n      }\n      }\n    }\n    @Override\n    public void loadPage() {\n      if (bitmapReference == null) {\n        bitmapReference = new SoftReference<Bitmap", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 2264}
{"pred": "               if (ke.getKeyCode() == KeyEvent.K_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                    msg.setText(down);\n                    }\n                }\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 3037}
{"pred": "   def step(self, *args, **kwargs):\n        self.prerequisite_view.policy.item_select('Edit')\n        self.policy_profiles.select(self.context['object'].name)\n        self.policy_profiles.select(self.context", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 2002}
{"pred": "\t\tfor (IRecognitionListener listener : recognitionListeners) {\n\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t}\n\t}\n\tpublic void notifyPoseListeners(Big timestamp, LabanSequence sequence) {\n\tfor (Ipose", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 2296}
{"pred": "               writer.Write(string.Format(\"<div class=\\\"toolbar-button\\\"\");\n                writer.WriteAttribute(\"role=\\\"button\\\"\");\n                writer.Write(string.Format(\"\\\"{0}\\\"\", Roles));\n                writer.Write(\"\\\"\", Roles);\n                writer.", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 1839}
{"pred": "\tfor (int i = 0; i < compound.getCompound().size(); i < compound.size(); i++)\n\t{\n\tNBTag nbt = compound.getCompound(i);\n\tif (nbt.getId() == \"Damage\")", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 2348}
{"pred": "       return \"Effect(\"Effect: \"Effect: \" + probability: \" + probability + \" \" + probability + \" scopes: \" + scopes);\n    }\n}\n}\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 1743}
{"pred": "   assert t['private'] == ['private']\n    assert t['private'] == ['private']\n    assert t['private'] == ['private']\n    assert t['private'] == ['private']\n    assert t['private'] == ['private']\n    assert t['private'] == ['private", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 2640}
{"pred": "       self.assertEqual(o.owner, p)\n        self.assertEqual(o.employees[0], employee)\n        self.assertEqual(o.employees[0].owner, p)\n        self.assertEqual(o.employees[0].owner", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 3702}
{"pred": "                   if sel_dim:\n                        widget_x.observe(on_widget_x_change, names='value')\n                    widget_y.observe(on_widget_y_change, names='value')\n                    if sel_dim:\n                        widget_", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 5925}
{"pred": "               if (rootFolder.IsIgnored(path))\n                    toScan.Add(path);\n                if (root.IsIgnored(path))\n                    toScan.Add(path);\n                else\n                if (root.IsIgnored(path))\n                    toScan", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 1938}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 2178}
{"pred": "       resbrains = cat.search(query)\n        if len(resbrains) == 1:\n            obj = resbrains[0].getObject()\n            if obj.isDiscussable():\n            if obj.canReply():\n                if self.request.has_key('", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 6155}
{"pred": "\t\t\t\tpublic int m_X;\n\t\tpublic int m_Y;\n\tpublic int m_Z;\n\tpublic int m_Hue;\n\tpublic int m_Hue;\n\tpublic int m_Hue;\n\tpublic int m_Hue;\n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 4809}
{"pred": "                   // get the parcel\n                    Parcel parcel = scene.GetParcel(avatar.AbsolutePosition);\n                    if (null == parcel)\n                    {\n                        throw new Exception(String.Format(\"region \\\"{0}\\\": avatar \\\"{1", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 5417}
{"pred": "\t\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t}\n\t\t\tif(textStart.errorProvider1.GetError(textStart)!=\"\"\n\t\t\t\t|| textStop.errorProvider1.GetError(textStop)!=\"\"\n\t\t\t\t||", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 3095}
{"pred": "       lat, lon = _build_lat_for_NAME_times(column_headings)\n        # Convert the time to python datetimes.\n        new_time_column_header = []\n        for i, t in column_headings['Time']:\n            dt = datetime", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 7813}
{"pred": "   if user:\n        return {'success': True}\n    return {'success': False, 'msg': _('User %s not authorized to create groups' % user}\ndef group_create(context, data_dict):\n    user = context['user']\n    if user:\n", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 2343}
{"pred": "\t\t\t\tint partition = node.getPartitionId();\n\t\t\tif (partition == parent.getPartitionId()) {\n\t\t\t\t\t// parent is the same as the current node\n\t\t\t\t}\n\t\telse {\n\t\t\t\t\t// assign", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 2067}
{"pred": "           var result = new SearchResults();\n            var count = segments.Length;\n            var err = new SearchResult();\n            for (int i = 0; i < count; i < count)\n            {\n                err = newSearchResult;\n            }\n            result[i]", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 2850}
{"pred": "           if (codePoint <= '\\uDF') {\n               return offset + 1;\n            }\n            if (codePoint <= '\\uDF') {\n               return offset + 1;\n            }\n            if (codePoint <= '\\uE0' && codePoint <= '\\uDF", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 17640}
{"pred": "       if (existingStudyFormName == null) {\n            return ValidationResults.SAMPLE_NOT_FOUND;\n        }\n        if (existingStudyFormName.equals(studyFormName)) {\n            return ValidationResults.SAMPLE_", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 3482}
{"pred": "\t\t\t\t\tSend(newConn, \"ServerError\", message);\n\t\t\t\tDrop(newConn);\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tif (handshake.Version != Protocol.Version)\n\t\t\t{\n\t", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 3044}
{"pred": "\t\t\tfor (int i = 0; i < beans.length; i < beans.length; i++)\n\t{\n\t\tCatsReferralPendingEmergencyAdmissionVo bean = beans[i];\n\tcoll.add(bean);\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 3668}
{"pred": "   xbmc.execuLua('xbmc.executebit(\"local9+local2+\", 50, %s)')\n    xbmc.execuLua('xbmc.executebit(\"local2+\", 50)')\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 2558}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions];\n            A.GetSeq(seq, ref ret);  return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript\n        /// </summary>\n        /// <", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 3198}
{"pred": " if 'pinDates' in pD:\n    pinDates = pD[ 'pinDates'\n    del( pD[Dates ]\n    if pinDates:\n      pinDates = pinDates.lower()\n    if pinDates == \"yes\":", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 3275}
{"pred": "\t\t\t\tif (self.Info.HasInfo<BuildingInfo>())\n\t\t\tforeach (var building in Info.BuildingQueues)\n\t\t\t\tforeach (var building in Info.BuildingQueues)\n\t\t\t\t\tif (building.Info.Build", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 2754}
{"pred": "       for (int i = 0; i < plan.parameters.length; i < paramCount; i++) {\n            Parameter param = plan.getParameter(i);\n            Parameter param.setJavatype(param);\n            Parameters.setIndex(i);\n            Parameters.", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 2385}
{"pred": "\t\t// \n\t// \n\t// \n\t// \n\t// \n\t// \n\t// \n\t// \n\t// \n\t// \n\t// \n\t// \n\t// \n\t// \n\t// \n\t// ", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 3464}
{"pred": "\t\t\tdcb.DCBaudRate = baud_rate;\n\t\tdcb.fDtrControl = Clear;\n\t\tdcb.fDsr = Clear;\n\tdcb.Dsr = Clear;\n\tdcb.Parity = Clear;\n\td", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 3438}
{"pred": "       page = self.get_page(self.user.get_profile().get_url())\n        self.assertEquals(page.context['cobrand'], cobrand)\n        self.assertEquals(page.context['cobrand'].user, self.user)\n        self", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 4222}
{"pred": "   args = parser.parse_args()\n    if args.keep_temp_dir:\n        _keep_dir = True\n    if not args.keep_temp_dir:\n        shutil.rmtree(self.tempfile)\n    #print \"args.keep_temp_", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 2213}
{"pred": "\t\t\t\tif entry[0] == currentIndex:\n\t\t\t\tcurrentIndex = Next(self.oldList)\n\t\t\tif entry[0] is not None:\n\t\t\t\tif entry[0] == currentIndex:\n\t\t\t\t\tcurrentIndex =", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 5106}
{"pred": "               if (fCode.Length > 0) {\n                    fontX = font.GetWidth(fCode, X);\n                    Y = font.GetHeight(fCode, Y);\n                }\n                return new Rectangle(X, Y, Y, X + X, Y", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 3383}
{"pred": "   return ArrayUtils.toPrimitive(results);\n  }\n  /**\n   * Loads a comma-separated list of booleans from Properties.  The list cannot include any whitespace.\n   */\n  public boolean[] getBoolArray(Properties, String key) {\n    boolean", "answers": ["    if (results == null) {"], "all_classes": null, "length": 2028}
{"pred": "       y_points = np.arange(0, 0.5, 1.5, 0.1)\n        sample_points = self._trajectory_to_points(test_cube)\n        result = traj_interpolate(test_cube,", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 3644}
{"pred": "           Clipboard.SetText(currPacket.ToHexString());\n        }\n        private void toolStripConvertTo_Click(object sender, EventArgs e)\n        {\n            if (InvokeRequired)\n            {\n                Invoke(new Action(toolStripConvertTo", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 1741}
{"pred": "   print_color = 'green'\n    print_color(\"\"\"\"%s\" % (color)\n    print_color = 'reset'\n    print_color = 'red'\n    print_color = 'green'\n    print_color = 'green'\n    print_color", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 4852}
{"pred": "           return _numValues;\n        }\n    }\n}\n}\n\\end{\n\\end{code}\n\n\n\n\n\nComment:\n\nComment: I's the code above a bit of a mess, but it's a good example of how to do it.\n", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 1713}
{"pred": "           this.SuspendLayout();\n            // \n            // \n            // \n            // \n            // \n            // \n            // \n            // \n            // \n            // \n            // \n            // \n            // \n            // ", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 6931}
{"pred": "           return self.createFunction( original.__name, original.DLL,\n                resultType,\n                argTypes=original.argTypes,\n                doc=original.__doc__,\n                argNames = original.argNames,\n                extension = original.extension,\n                deprecated = original.", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 2243}
{"pred": "               baos.write(NID.kEmpty);\n                baos.write(NID.kEmpty);\n                baos.write(NID.kStreamsInfo);\n                baos.write(header.toByteArray());\n                baos.write(emptyStreams.", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 4894}
{"pred": "                   for (int i = 0; i < ticker.length; i < ticker.length; i++)\n                    if (i % 2 == 0)\n                    {\n                        tick[i].transform(toCircle);\n                    }\n                    else", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 2066}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_move_", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 4277}
{"pred": "               await RecycleItems(session, cancellationToken, wepar, ItemId.ItemPinap);\n            if (_diff > 0)\n                await RecycleItems(session, cancellationToken, ItemId.ItemWepar);\n        }\n        private static void RecycleItems(", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 3744}
{"pred": "       f.writelines(['F) ', str(RunNo), '\t# iteration\\n'])\n        f.writelines(['G) ', str(c.fstring), '\t# GAL configuration file\\n'])\n        f.writelines(['H) ', str(c.fstring", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 7096}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x4) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x2:\n                    /* C */\n", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 3713}
{"pred": "       return self._course_location\n    def _install_course_updates(self):\n        \"\"\"\n        Install the course updates.\n        \"\"\"\n        self._install_course_updates.extend(self._updates)\n        self._install_course_handouts()\n       ", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 2290}
{"pred": "\tfor (String s : split) {\n\t\t\tif (s.equals(\":\")) {\n\t\t\t\tif (s.equals(\":\")) {\n\t\t\t\t\tchance = 0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 3030}
{"pred": "       # Delete the old ones\n        for cert_file in os.listdir(config_directory):\n            os.remove(cert_file)\n        os.remove(ca_file)\n        os.remove(config_directory)\n        os.makedirs(config_directory)", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 1954}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 10);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 6488}
{"pred": "       self.ui_log.info(\"\")\n        self.ui_log.info(\"\")\n        self.ui_log.info(\"\")\n        self.ui_log.info(\"\")\n        self.ui_log.info(\"\")\n        self.ui_log.info(\"", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 11416}
{"pred": "       \"\"\"\n    def getRoomFullName(self):\n        \"\"\" Room \"\"\"\n    def getRoomBookingList(self):\n        \"\"\" Session Booking List \"\"\"\n    getRoomBookingList.convert = Conversion.reservationsList\n    getRoomBookingList", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 2754}
{"pred": "                       }\n                        return false;\n                    }\n                }\n            }\n            }\n            else {\n                MessageImporter importer = new Importer(MessageResult) {\n                    @Override\n                    public void import(MessageResult result) {\n                    if (", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 2115}
{"pred": "\t    \t    \t\tif (value instanceof Sort) {\n\t        layer = ((Sort) value).getLayer();\n\t        }\n\t    \t    \t}\n\t    \t}\n\t     layer = layer;\n\t}\n\t}\n    \tcatch (Exception e) {", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 2210}
{"pred": "       if (currentSession.isOpened()) {\n            user = currentSession.getCurrentUser();\n            if (user == null) {\n                userProfile = currentSession.getCurrentUser();\n                if (user == null) {\n                    userProfile = currentSession.getCurrentUser", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 2779}
{"pred": "\tfor (Emotion e : emotions){\n\t\tsum += e.strength;\n\t}\n\tif (sum > 0) {\n\t\tsum = sum / sum;\n\t}\n\tfor (Emotion e : emotions){\n\tsum -= e.strength", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 2237}
{"pred": "               'property1': 2, 'property2': 3}\n            }\n            ],\n            self.build.stages_to_list())\n    def test_to_xml(self):\n        \"\"\"Test exporting as xml\"\"\"\n        # read and sample file\n       ", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 5892}
{"pred": "   if 0 < phi1 <  < 180:\n        phi1 = phi1 +  # 180.00\n    if 0 < phi1 < 18.0:\n        phi1 = phi1 + 18", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 3650}
{"pred": "       if request.POST.get('report'):\n            report = Report.objects.create(user=user, report_type=request.POST.POST.get('report_type'),\n            report.save()\n            messages.success(request, \"Reported!\")\n            return HttpResponse", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 2643}
{"pred": "   @property\n    def page_title(self):\n        return \"Add a series\"\n    def initialize(self):\n        super(ProductView, self).initialize()\n        self.form = self.request.form\n        self.form.add_csrfc('series', self", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 14702}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\tform.RightLayout = RightToLeft.No;\n\t\t\t}\n\t\t}\n\t}\n\t}\n\tpublic void ApplyTo(Form form)\n\t{\n\tif (", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 1838}
{"pred": "               temp = temp >> 8;\n            }\n            arr[size - 1] = (byte) temp;\n        }\n        return arr;\n    }\n    /**\n     * @param arr\n     * @param offset\n     * @throws IndexOutOfBoundsException\n", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 1952}
{"pred": "               if regex.match(regex, line):\n                    new_positional_tags.append(regex)\n            new_positional_tags_list.append(regex)\n            break\n            if regex.match(line):\n                new_positional_tags_list.append(", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 3511}
{"pred": "               return new object[0];\n            }\n            public override TypeAttributes GetCustomAttributes (Type attributeType, bool inherit)\n                {\n                return new object[0];\n            }\n            public TypeAttributes GetCustomAttributes (Type attributeType, bool inherit)\n                {\n                return new", "answers": ["                return new object[0];"], "all_classes": null, "length": 1286}
{"pred": "   }\nclass OBD_PIDC(_OBD_PID_1B):\n    name = \"PID_C_ObdStandards\"\n    obdStandards = {\n        0x01: 'OBD-II as defined by the CARB',\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 2883}
{"pred": "\t\tif not ready_pipe:\n\t\t\tready_pipe = dbus.Pipexport(self.get_object_property(\"Ready\", dbus.Signal)\n\tready_pipe = ready_pipe\n\tready_pipe.connect(self.ready_pipe)\n", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 6739}
{"pred": "               this.AddRes(index, typeof(Pearl), 143, 1043);\n                this.AddRes(index, typeof(Switch), 17, 103);\n                this.AddRes(index, typeof(BlackPearl), ", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 6398}
{"pred": "       _request_stack.pop()\n        if exc is not None:\n            self.app.do_teardown_request(exc)\n        self.app.teardown_request(exc)\n        self.app.teardown_request(exc)\n", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 3178}
{"pred": "   return _pub_consumer(session, cluster_id)\n#####################################################################################################################\ndef _subscriber(cluster_id):\n    return session.query(Subscriber.id, Subscriber.name, Subscriber.is_active, Subscri", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 12780}
{"pred": "           if (resourceEntityForRelease != null) {\n                if (resourceForRelease.getResource().equals(resource)) {\n                    result.add(resource);\n                }\n            }\n        }\n        return result;\n    }\n    }\n    public Set<Resource> get", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 3387}
{"pred": "       axis_proj = _axis_detector(ray_trafo.geometry)\n        axis_proj = _axis_proj[0] * axis_proj[1]\n        if ndim == 3:\n            axis_proj = _axis_proj[0]\n        if", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 2886}
{"pred": "           logger.log(u\"Proxified URL: \" + url, logger.DEBUG)\n        return regx\n    def _doLogin(self):\n        \"\"\"\n        \"\"\"\n        Check if we are logged in, we need to check if we are logged in\n        \"\"\"\n        if", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 5041}
{"pred": "\t\t\tif (fmt.Length == 0)\n\t\treturn \"\";\n\t\t\tif (fmt.Length == 1)\n\t\t{\n\t\t\t\treturn fmt.ToString ();\n\t\t}\n\t\telse\n\t\tif (fmt.Length == 2)", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 2149}
{"pred": "\t\t\t\tif (block2.Length > GetBlockSize())\n\t\t\t\t\t{\n\t\t\t\tthrow new InvalidCipherException\n\t\t\t\t\t(\"Block2 is too large for simple addition.\\n\");\n\t\t\t}\n\t\t\t}\n\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 3274}
{"pred": "\t\t\tAssert.That(obj.Properties[1].Key, Is.Equal(\"In this test\"));\n\t\tAssert.That(obj.Properties[1].Value.Type, Is.Equal(Token.String));\n\t}\n\tstring _4 = @\"{\"[\n    {\n", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 3553}
{"pred": "               for (int i = 0; i < width; i < width; i++) {\n                    edges.add(new T2(this, this.getVertex(i, this.getVertex(i, this.getVertex(i + h)));\n                }\n            }\n           ", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 3758}
{"pred": "   ds.config[\"setup\"][\"flow\"] = 0.0.000000000000000000000000000000000000000000000000", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 4789}
{"pred": "       final String filename = args[0];\n        final TripleStore expected = new TripleStore(filename);\n        final TripleStore actual = new TripleStore(filename);\n        log.info(\"Comparing \" + \"expected\");\n        log.info(\"Comparing \" +", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 3666}
{"pred": "       assert alert.lowest_spot_price == 0.105, \"Lowest spot price should be 0.105\"\n    def test_check_for_alert_with_no_history(self):\n        \"\"\"We should not find an alert if there is", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 3406}
{"pred": "\t\t\t\tString url = Strings.DownloadURL;\n\t\t\tURL url = new URL(url);\n\t\t\tInputStream is = url.openStream();\n\t\tInputStream is = is = is;\n\t}\n\t\tif (is == null) {\n\t\t\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 1706}
{"pred": "\t\t\tDispose();\n\t\t\tif (context != IntPtr.Zero)\n\t\t{\n\t\t\t\tSDL.GL_DeleteContext(context);\n\t\t\tcontext = IntPtr.Zero;\n\t\t\t}\n\t\t}\n\t}\n\t}", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 2579}
{"pred": "       :rtype: numpy.ndarray\n        \"\"\"\n        return self._data_container.x_cov_mat_inverse\n    @property\n    def x_cor_mat(self):\n        \"\"\"2D array of shape (N, N)` containing the correlation matrix\n        :", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 4193}
{"pred": "       return new CmsLink(m_Id, m_anchor, m_query, m_type, m_internal);\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        if (m_", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 1662}
{"pred": "               }\n                if (deletedAccounts.contains(walrusObject.getOwnerId())) {\n                  // The account was deleted, transfer the ownership to eucaly admin\n                  LOG.warn(\"Account \" + walrusObject.getOwnerId() + \" does not exist. Ch", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 12381}
{"pred": "           if (EventHandler != null)\n            {\n                EventHandler += EventHandler += EventHandler;\n            }\n            Handler = EventHandler = null;\n            }\n        }\n        #endregion\n        #region Private\n        private void Initialize()\n        private void Initialize()\n", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 2008}
{"pred": "       ImportVmCommand command = new ImportmCommand(new ImportmParameters(Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), Guid.newGuid(), \"vm_$#$#$\");\n        assertFalse(command.isNewEntity", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 3572}
{"pred": "\t\t\tthis.table1.RowAttach (((uint)(0);\n\tthis.table.RowAttach ((uint)(1));\n\tthis.table.RowAttach ((uint)(1));\n\tthis.table.RowAttach ((uint)(1));\n\tthis.table", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 3489}
{"pred": "           environ['%sCATEGORY' POSTCATEGORY_ENVIRO_ID] = self.category\n            self.system['CATEGORY'] = self.category\n        self.system['NZFILE'] = self.nbfilename\n        self.system['", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 4776}
{"pred": "\t\t\tilgen.Emit(OpCodes.Ldloca, mb);\n\tilgen.Emit(OpCodes.Call, BaseType.GetConstructor(BaseType.GetConstructor(null));\n\tilgen.Emit(OpCodes.Ret);\n", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 2988}
{"pred": "     return (new Builder().MergeFrom(prototype);\n    }\n    public static SendInvitation.Builder CreateBuilder() {\n      return new SendInvitation.CreateBuilder();\n    }\n    public static SendInvitation.Builder CreateBuilder() {\n      return new SendInvitation.", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 8141}
{"pred": "                   vertices[x] = getVertices[i];\n            }\n            else {\n                getQuad(i, vertices);\n            }\n        }\n    }\n    public void getQuad(int i, FloatBuffer vertices) {\n        if (i < getQuad", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 2493}
{"pred": "       if (showDateData) {\n            result.add(COLUMN_DATEDIED);\n        }\n        if (showDate) {\n            result.add(COLUMN_DATEFIED);\n        }\n        if (showData) {\n            result.add(COLUMN", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 5129}
{"pred": "\t\tRect.size = displayText.size;\n\t\tif (Rect.size.x < 0)\n\t{\n\t\t\tRect.size = displayText.size;\n\t}\n\t}\n\t}\n\t}\n}\n}\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 2466}
{"pred": "       if (Text.Length > 0)\n        {\n          SizeF = GetLargeTextF();\n          if (Text.Length > 0)\n            GetLargeText();\n          if (Text.Length > 0)\n            GetLargeText();\n          else\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 2298}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (lastUser.Length > 0)\n                {\n                    Users.Add(lastUser);\n                }\n                else\n                if (lastUser.Length > 0)\n                {\n                   ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 2772}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\tif (Viewport.LastMousePos.Y < EdgeScroll)\n\t\t\tdirections |= ScrollDirection.Down;\n\t\treturn directions;\n\t}\n\t}\n\t}\n\t}\n}\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 2308}
{"pred": "           foreach (cDiscountRow in DiscountTable.Rows)\n            {\n                if (Row.Discount > 0)\n                {\n                    ValidationColumn = Row.Columns[PDiscountTable.ColumnDiscountId];\n                    VerificationResult = new TVerification", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 6154}
{"pred": "               // Reading the file.\n                var line = new StringReader (buffer);\n                while (line != null) {\n                    var line = line.ReadLine ();\n                    if (line.StartsWith (\"#\")) {\n                        // Comments are ignored.\n                    }", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 1747}
{"pred": "       return self.empty\n    def __repr__(self):\n        return \"PayloadRequirements(%s)\" % self._reqs\n    def __str__(self):\n        return \"PayloadRequirements(%s)\" % self._reqs\n    def __repr__(self", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 2061}
{"pred": "\t\t\treturn Copy;\n\t}\n\tpublic void Copy()\n\t{\n\tif (DisplaySet == null)\n\t{\n\t\treturn;\n\t}\n\tif (DisplaySet == null)\n\t{\n\t\tDisplay = new DisplaySet();\n\t}\n\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 4810}
{"pred": "\t\t\tstring[] lines = File.ReadAllLines (Path.Combine (Path.Combine (dataDir, \"config/config/config.xml\");\n\tforeach (line in lines)\n\t\t\t{\n\t\t\tif (line.Starts.StartsWith (\"[", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 2173}
{"pred": "           if (bugAnnotation.getType() == BugAnnotation.BugAnnotation.class) {\n                if (bugInstance.getBugPattern() == null) {\n                    throw new BugReporterException(\"BugInstance has no bug pattern\");\n                }\n            }\n            if (", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 1968}
{"pred": "\t}\n}\n", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 5691}
{"pred": "                       if (eMinions.Any())\n                        {\n                            if (Menu.GetBool(\"LaneClearECount\") && eMinions.Count >= Menu.GetSlider(\"LaneClearECount\"))\n                            {\n                                E.Cast(eMinions.", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 4677}
{"pred": "\treturn get(x, y, width, height, 0, 0, anchor);\n\t}\n\t/**\n\t * Returns a GridConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t * @param height\n\t * @param wy\n", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 1785}
{"pred": "       ftp = self._ftp\n        ftp.retrbinary(\"RETR {}\".format(filename)\n        ftp.close()\n        ftp.close()\n        return ftp.close()\n        ftp.retrbinary(\"RETR {}\".format(filename)\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 2623}
{"pred": "       self.assertEquals(field_model_def, field_model_def)\n        self.assertEquals(\n            field_model_def['title_rules'],\n            {'marc': 'marc', 'marc', 'marc', 'marc', 'marc', '", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 2570}
{"pred": "                   new object[] {\"E1\", \"10<\", \"10<\", \"10<\", \"10<\", \"10<\", \"10<\", \"10<\", \"10<\", \"10<\", \"10<\", \"10<\",", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 8087}
{"pred": "       c.__imul__(other)\n    def __imul__(other):\n        try:\n            other = float(other)\n        except:\n            returnNotImplemented \n        clibrebound.reb_particle_imul(self, other)\n        return self\n", "answers": ["        c = self.copy()"], "all_classes": null, "length": 7100}
{"pred": "       \"\"\"\n\\end{code}\n\\end{code}\n\n\n\n\n\n\\end{code}\n\n\n\n\n\nComment: I'm not sure if this is the best way to do it, but I'm not sure how to do it.\n\n\n\n\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 2379}
{"pred": "           c.putClientProperty(Basic.property, null);\n        }\n        if (htmlDisabled != Boolean.FALSE) {\n            c.putClientProperty(Basic.property, null);\n        }\n        if (htmlDisabled != Boolean.TRUE) {\n            c.put", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 2177}
{"pred": "   assert filename == filename\n    assert filename == expected_filename\n    assert filename == expected_filename\ndef test_ext(ext):\n    filename = \"html/test.\" + ext\n    assert filename == expected_filename\ndef test_ext_ext(ext):\n    filename = \"html", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 2973}
{"pred": "\t\t\t\tvar sql = mapping.Load(namedQuery);\n\t\t\t\tif (sql == null)\n\t\t{\n\t\t\t\t\tthrow new ArgumentNullReferenceException(\"namedQuery\");\n\t\t\t}\n\t\t\t}\n\t\t\tvar namedQuery = new", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 2336}
{"pred": "\t\t\twriter.Write (int) m_Members.Count );\n\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\tm_Members[i].Serialize( writer );\n\t\t}", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 2464}
{"pred": "       assert graphQueue.size() <= maxGraphs;\n        invocationQueue.removeFirst();\n    }\n    private boolean contains(CallHolder callsite) {\n        return graph.contains(callsite);\n    }\n    private boolean checkTargetConditions(CallsiteHolder callsite)", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 7167}
{"pred": "               if pytest.get_appliance_name() == self.appliance:\n                    pytest.run(self.args['pytest_con'],\n                    pytest.pr_metadata.get('pr_metadata', self.args['pr'])\n            else:\n                   ", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 4339}
{"pred": "                   if (phi) {\n                    if (value == null) {\n                        continue;\n                    } else {\n                        if (value.isConstant()) {\n                        continue;\n                        } else {\n                        if (value.isFloating()) {", "answers": ["                if (phi) {"], "all_classes": null, "length": 2730}
{"pred": "       switch (event) {\n            case MS_CALL_DATA_USAGE:\n                onRequestDataUsage();\n                break;\n            case MS_CALL_CAMERA_CAPABILITIES:\n                onRequestCameraCapabilities();\n                break;\n           ", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 2156}
{"pred": "\t\t\t\t\tif (from.InRange(GetWorld(5, 5))\n\t\t\t{\n\t\t\t\t\tif (from.InRange(GetWorld(5, 5))\n\t\t\t{\n\t\t\t\t\t\tif (from.InRange", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 3189}
{"pred": "       '    def __init__(self, *args, **kwargs):\n        self.id = kwargs[\"id\"]\n        self.id = kwargs[\"id\"]\n        self.id = kwargs[\"id\"]\n        self.id = kwargs[\"id\"]\n        self.id", "answers": ["] + models)"], "all_classes": null, "length": 2130}
{"pred": "       \"\"\"Remove a user from the cache.\n        \"\"\"\n        self.module.set(user, None)\n        self.module.set('all_users', set())\n    def remove_user_sessions(self, username, domain):\n        self.module.get('all_", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 2217}
{"pred": "       \"\"\"\n        _Base.save(self, fpath)\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated\n        messages.\n        **Example**:\n        >>> import polib\n        >>> mo = MOFile()", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 6779}
{"pred": "   if res['OK']:\n      self.transformation( transID, 'ValidatedOutput' )\n    else:\n      self.transformation( transID, 'WaitingIntegrity' )\n    return S_OK()\n  #####################################################\n  # Get the output", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 2450}
{"pred": "\t\t} catch (URISyntaxException e) {\n\t\tthrow new Comment(l10n(\"invalidFormURI\", e);\n\t}\n\t}\n\tif(uri.getScheme() != null) {\n\t\tif(uri.getScheme().equals(\"http", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 5620}
{"pred": "       gsp = self.setupGerritPush(sampleCB)\n        msg = self.run_fake_build(build, buildResult,\n        result = makeReview(GERRIT_LABEL_VERI, verifiedScore)\n        gsp.sendCodeReview.", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 3913}
{"pred": "   self.category = atom.Category()\n    self.category = 'test'\n    self.category_attributes['foo'] = 'bar'\n    self.assert_(self.category == 'test')\n    self.category_attributes['foo'] == 'bar'\n    new_category", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 3144}
{"pred": "           if (r1.containsKey(immutableString)) {\n                r1.put(immutableString, BOTMUTABLE);\n            }\n            return r1;\n        }\n        public void visit(AnnotatedTypeMir type, Map<String, AnnotationM", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 7353}
{"pred": "       if mat.light_group:\n            row.prop(mat, \"use_light_group_local\", text=\"Local\")\n        row.prop(mat, \"use_light_group_global\", text=\"Global\")\n        row.prop(mat, \"use_light_group", "answers": ["        col = split.column()"], "all_classes": null, "length": 8535}
{"pred": "           if (_engine.Memory.Map.Cartridge.Mapper == 1)\n            {\n                var map16 = (Mapper16) _engine.Map.CurrentMapper;\n                mapper16_chrSelect = map16.Mapper6ChrSelect;\n                mapper1", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 6419}
{"pred": "           m_jPopup.add(getOpenDocument());\n            m_jPopup.add(getOpen());\n            m_jPopup.addSeparator();\n            m_jPopup.add(getHelp());\n            m_jPopup.add(getHelp());", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 2162}
{"pred": "\t\tAddQuest(05, 0x0000000000000000000000000000000000000000000000000000", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 3703}
{"pred": "\t\t\tint h = Frame.H;\n\tif (h < min) {\n\t\t\t\tFrame.H = min;\n\t\t}\n\t\telse {\n\t\t\tFrame.H = min;\n\t}\n\t}\n\t}\n\tpublic SizeFit", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 2779}
{"pred": "       return self.tweet_id\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to this cross-publication.\n        \"\"\"\n        return reverse('announcements:twitter_cross_publication_detail', kwargs={'slug':", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 3061}
{"pred": "   # Load the lexer\n    lexer = PhpLexer('php')\n    # Load the lexer's patterns\n    lexer.add_to_patternsnippets(r'/php.phtml', r'<?php\\s*', r'<?php\\", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 3905}
{"pred": "   row = cursor.fetchone()\n    print \"row: \", row\n    print \"row: \", row\n    if row[0] == max_ID:\n        print \"Max altitude is \", row[0]\n    else:\n        print \"Max altitude is \", row[", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 3516}
{"pred": "       conn.run(\"\"\"\"\n        conn.run(\"\"\"\")\n    conn.close()\ndef get_snapshots():\n    \"\"\"\n    Get the snapshots for the given project.\n    \"\"\"\n    if not auth_key:\n        return []\n    conn =", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 3490}
{"pred": "\t\t\tMsg(\"I'm not sure what you mean.\");\n\t\t\tMsg(\"I'm not sure what you mean.\");\n\t\t\tbreak;\n\t\tcase \"complicity\":\n\t\tMsg(\"I'm not sure what you mean.\");\n\t\tMsg(\"I'", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 5210}
{"pred": "\t\"\"\n        Response.__init__(cmd, restag, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.code = ()\n        self.codet = ('Next')\n        self.coderep = ()\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 6568}
{"pred": "       self.finish = None\n        self.host_data[host_uuid] = HostData(host_uuid, self.name, self.start)\n        self.finish = self.host_data[host_uuid].finish\n        self.start = self.host_", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 2600}
{"pred": "               }\n        }\n    }\n    }\n    private class ConfirmDialog extends DialogFragment {\n        private Uri uri;\n        public ConfirmDialog() {\n        public ConfirmDialog(Context context) {\n            super(context);\n        }\n        @Override\n        public void", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 2341}
{"pred": "   for key in primary.keys():\n        pkg = primary.items[key]\n        if (nevra == pkg.nevra()):\n            del primary.items[key]\n            found = True\n        if found:\n            break\n        if not found:\n", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 3452}
{"pred": "           inputs.extend(self.get_outputs())\n            if self.compile:\n                inputs.extend(self.get_outputs())\n            if self.optimize:\n                inputs.extend(self.get_outputs())\n        return inputs\n    def get_finalized", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 2238}
{"pred": "\t\t\tfor (int i = 0; i < disassembledValues.Length; i++)\n\t\t{\n\t\t\t\tobject prop = disassembledValues[i];\n\t\t\t\tif (prop == null)\n\t\t\t{\n\t\t\t\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 13127}
{"pred": "       if job_id:\n            job_data = self.get_job(job_id)\n            if job_data['job_sha1'] != sha1:\n                job_data['job_sha1'] = sha1\n            job_data['job_name']", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 3898}
{"pred": "           var model = new Delegate();\n            var result = service.Try(model, errors);\n            if (result)\n            {\n                service.AddDelegateForEvent(model);\n            }\n            return RedirectToAction(\"index\", new { id = model.Id });\n       ", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 3477}
{"pred": "                       var circle = (Circle)\n                    {\n                        if (circle.IsEmpty)\n                        {\n                            return string.Format(\"{0}\", circle.Center, circle.Radius);\n                        }\n                        else\n                        return string.Format(\"{0", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 2651}
{"pred": "               self.log(\"Premium download: %s\" % premium_url)\n                self.download(premium_url, post={\"download\": \"normal\"})\n                self.log(\"Premium download: %s\" % premium_url)\n                self.", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 2344}
{"pred": "\t\t\t// If we found something, we can't claim it, we're done.\n\t\tif (path.Count == 0)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t// If we can claim it, we're", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 2596}
{"pred": "                       self.logger.error(\"dhcp restart failed\")\n                    return False\n            else:\n                    return True\n            if restart_dhcp == \"0\":\n                self.logger.info(\"dhcp restarted\")\n                return True\n            else:\n                self.logger", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 2964}
{"pred": "       Event.Builder eventb = new Event.newBuilder();\n        eventb.setSeverity(severity);\n        eventb.setMessage(msg);\n        if (type != null) {\n            eventb.setType(type);\n        }\n        return eventb", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 1721}
{"pred": "           for (int index = 0; index < 26; index < 6; index++)\n                if (states[index] == PpmState.ZERO)\n                {\n                    goto goto line 10;\n                }\n                if (states[index", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 6745}
{"pred": "               return new DicomAttributeSL(tag, b);\n            });\n        ///\n        ///\n        /// The String VR.\n        /// </summary>\n        public staticVr STvr = new DicomVr(\"ST\", false, true, 16, true, '1", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 3119}
{"pred": "\t\t\t\tif(t[0] == myType)\n\t\t\t{\n\t\t\t\tselectedEventID = Convert.ToInt3(t[0]);\n\t\t\tselectedEvent = new Event (ID);\n\t\t\tselectedEvent.Description = descriptionFromDb;\n", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 7477}
{"pred": "       o = self.file(b'abc')\n        insert_bytes(o, 4)\n        self.assertEquals(b'abc', self.read(o))\n    def test_insert_at_end(self):\n        o = self.file(b'abc')", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 4721}
{"pred": "   <td><?cs:sdk.win_bundle_bytes ?></td>\n    <td><?cs:sdk.win_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac</td>\n    <td>\n ", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 2064}
{"pred": "   plt.plot(crunched_results['combined'][app][VC]['durations'],\n                    crunched_results['combined'][app][VC]['stats'][stat],\n                    csi_9, csi_5,\n                    csi_", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 2290}
{"pred": "       self._test_root()\n        self._test_UID()\n        self._test_GIDSwitch(1, 0, 1, [])\n        self._test_UID()\n        self._test_GIDSwitch(0, 1, [])\n        self._", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 8201}
{"pred": "\t\t\t\tif (bDrawCheck) {\n\t\t\t\t\tg.drawLine(x, y, y, x + controlSize, x + controlSize, y + controlSize, y + controlSize);\n\t\t\t\t}\n\t\t\telse {\n\t\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 2150}
{"pred": " winnerFailures += \"Inference failed with k=3\\n\"\n  if (numpy.abs(inference - 1.0).any()):\n    numFailures += 1\n  if (numpy.abs(dist - 1.0).any()):\n    num", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 2364}
{"pred": "       final int index = (offset - headerSize());\n        mirror.writeElement(index, value);\n    }\n    @HOST_ONLY\n    public void writeHeader(ObjectMirror mirror, int offset) {\n        assert offset == length;\n        mirror.writeHeader(offset", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 2076}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyFile = FileUtils.Combine(Paths.GetDirectory(relativePath, fileName);\n            if (File.Exists(assemblyFile)) {\n                Log(Level.Debug", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 2491}
{"pred": "   \"\"\"\n    def _format_args(args):\n        args = [args]\n        if args:\n            for arg in args:\n                if isinstance(arg, str):\n                    string += arg\n                string += arg\n                else:\n                    string += str_format", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 2461}
{"pred": "       if (i16 == 0)\n        {\n          i = 1;\n        }\n        else\n        if (i6 == 1)\n        {\n          i = 1;\n        }\n        else\n        {\n          i = 1;\n       ", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 4230}
{"pred": "\t\t\t\tstr += s.ToString();\n\t\t}\n\t\tstr += \"\\n\";\n\t\treturn str;\n\t}\n\t}\n\t/// <summary>\n\t/// Transition to the next state.\n\t/// </summary>\n\t/// <param name=\"next", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 3670}
{"pred": "               });\n            #region Malzah\n            Spells.Add(\n                new SpellData\n                {\n                    Champion = \"Malzah\",\n                    SpellName = \"MalzahQ\",\n                    Slot = SpellSlot.Q,\n                   ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 20712}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmptyUser());\n\t}\n\tprotected void withCodeList(String... codes) {\n\tCodeList<String codeLists = new ArrayList<String>();\n\tcodeListProviderStub.withCodeList(codeList", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 2484}
{"pred": "       subprocess.Popen(['/bin/ls', '-l'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, close_fds=True)\n        out, err = proc.communicate", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 2691}
{"pred": "\t\t\t// Startup the core\n\t\t}\n\t/// <summary>\n\t/// Starts the core.\n\t/// </summary>\n\t/// <param name=\"addIns\">\n\t/// The AddIns to load.\n\t/// </param name=\"addIns\">", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 2249}
{"pred": "\t\t}\n\tinternal void AddConstraint (Constraint constraint)\n\t{\n\t\tConstraint c = constraint;\n\tConstraintCollection.Add (constraint);\n\tConstraint.BeforeConstraintNameChange += newConstraintName;\n\tConstraint.BeforeConstraintNameChange += newConstraintName;\n\t}\n\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 1877}
{"pred": "       self.vertical_2.addWidget(self.settings_group)\n        self.vertical_2.addWidget(self.settings_group)\n        self.vertical_2.addWidget(self.settings_group)\n        self.vertical_2.addWidget(self.settings", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 4790}
{"pred": "               if (stationId.length() > 0 ) {\n                    String[] args = new String[] {\n                        stationId,\n                        TAF_RADIUS,\n                        TAF_HOURS_BEFORE\n                    };\n                    Bundle bundle =", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 3010}
{"pred": "\t\t\t\tusing (ITransaction tx = s.Begin())\n\t\t\t{\n\t\t\t\tFillDb(s);\n\t\t\t\ttx.Commit();\n\t\t\t}\n\t\t\tAssert.AreEqual(1, stats.CollectionCount);\n\t", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 2631}
{"pred": "                   if (uiBuffer[iBufferIndex] == 0)\n                    {\n                    uiBuffer[iBufferIndex] = 0xFF;\n                    uiBuffer[iBufferIndex] = 0xFF;\n                    uiBuffer[iBufferIndex] = 0", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 3086}
{"pred": "\t\tif (getMode().isAggressive()) {\n\t\t\treturn 1;\n\t}\n\telse {\n\t\treturn 0;\n\t}\n\t}\n\t}\n\t/**\n\t * @return the speed of the sentry\n\t */\n\tpublic", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 6991}
{"pred": "           return new HyperlinkDetector[0];\n        }\n        else {\n            CeylonParseController parseController = controller;\n            CeylonHyperlinkDetector hyperlinkDetector = new CeylonHyperlinkDetector(parseController);\n            CeylonHyper", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 3327}
{"pred": "       self.drawingWidget.setEnabled(False)\n        self.drawingWidget.setEnabled(True)\n        self.drawingWidget.setFocusPolicy(Qt.NoFocusPolicy.NoFocus)\n        self.drawingWidget.setFocusPolicy(Qt.NoFocus)\n", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 4977}
{"pred": "\t\t\t\tif ( shouldSend )\n\t\t\t{\n\t\t\t\tif ( SetID == 0 )\n\t\t\t\t{\n\t\t\t\t\tAdd( new Point2Dump( m_Mobile, m_Object, m_Stack, m_Page, m", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 2664}
{"pred": "                 if (String.class.isAssignableFrom(sourceType))\n                     {\n                     if (String.class.isAssignableFrom(targetType))\n                     {\n                        // FIXME: This is a hack to get around the fact that the String.", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 2397}
{"pred": "\t\t\t\tsb.append(\"\"+i+\"\\t\"+j+\"\\t\"+WithAmount[i][j]+\"\\t\"+WithAmount[i][j]+\"\\n\");\n\tsb.append(\"\\n\\n\\nTotal number of trees with each number of changes\\n\");\n\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 5140}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase and line that contained the unpriced product\n                                int lineIndex = unpricedLine.Key;\n                                int line", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 3428}
{"pred": "\t\t\tthrow new NotImplementedException ();\n\t}\n\t[Mono]\n\t[Mono]\n\tpublic void Open ()\n\t{\n\t\tif (serialize_request)\n\t{\n\t\t\tif (serialize_request)\n\t{\n\t", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 1811}
{"pred": "       final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject = EasyMock.createMock(Subject.class);\n        mockCurrentSubject.setDba(mockDatabase);\n        mockDatabase.setSecurityManager(mockSecurityManager);\n        mockDatabase", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 5710}
{"pred": "\t\tVector2.X = v.X / viewport.Width;\n\t}\n\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport)\n\t{\n\tVector2.X = v.X / viewport.Width;\n\t}\n\tpublic", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 2722}
{"pred": "\n\n\n\n\\end{code}\n\\end{code}\n\n\n\n\n\n\nComment:\n\n\nComment: I'm not sure what you mean by \"the code is not working\" - what is not working?\n\n\n\n\n\n\nComment: I'm not", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 1647}
{"pred": "\t\t\t    if (worker != null)\n\t\t\t    {\n\t\t\t    if (worker.Connected)\n\t\t\t    {\n\t\t\t\t    if (sending_data.Contains(i))\n\t\t\t\t    {\n\t\t\t\t       ", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 6993}
{"pred": "           if(type == RequestType.Step) {\n                if(list != null) {\n                    for(Bucket bucket : list) {\n                    if(bucket.getStepCount() == 0) {\n                    Log.i(sClassName, \"No steps found\");", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 3379}
{"pred": "   if is_method:\n      print '    return new %s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 3709}
{"pred": "   \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    def range_json(items(items):\n    \"\"\"\n    Returns a list of dictionaries representing the items in the range.\n    \"\"\"\n    return [\n        range_item_dict(item) for item in items\n    ]", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 1893}
{"pred": "                       new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEX));\n            }\n        }\n        /**\n         * @throws Exception\n         * \n         */\n        @Test\n        public void test_0() throws Exception {\n            final A", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 2611}
{"pred": "       self.object = self.get_object()\n        if self.object.is_active:\n            self.set_active(False)\n        self.object.save()\n        messages.success(self.request, _(\"User deactivated.\" % self.object.username)", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 2170}
{"pred": "     return this.ResolvedAssembly.PublicKey;\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public Version {\n      get { return this.ResolvedAssembly.Version;\n    }\n    #region IReference Members\n   ", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 3379}
{"pred": "           for (int i = 0; i < input.Count; i < input.Count; i++)\n            {\n                d[i] = input[i];\n                r[i] = d[i];\n                uodd[i] = ueven[i];\n                v", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 2725}
{"pred": "\t\t\tApfloat median = sortedNumbers[left];\n\tApfloat median = median;\n\tApfloat[] medianArray = new Apfloat[1];\n\tmedianArray[0] = median;\n\t}\n\telse {\n\tApfloat median = sortedNumbers[left];\n", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 2548}
{"pred": "               if reference_count[v, K] > 0:\n                    length = left - last_update[v]\n                    A[v] += length * sample_count[v, j]\n                    total_length[v] += length\n                    last_update[v", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 8307}
{"pred": "       mapping = client.indices.get_mapping(index=self.enrich_index)\n        mapping = mapping\n        if mapping == None:\n            raise Exception(\"Mapping not found\")\n        if mapping == csv_mapping:\n            return result\n        else:\n            result['mapping", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 2213}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\tif (orderManager.LobbyInfo.Slots.Values(s => s.AllowBots)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\torder.Iss", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 2775}
{"pred": "\t\t    return base.ToString();\n\t}\n\t}\n\t}\n}\n}\n}\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 2106}
{"pred": "       frame_header.serialize(padding_bytes)\n        self.data = frame_header + frame_header + frame_payload\n        self.serialize(pad_low, pad_high)\n    def __repr__(self):\n        return '<{}| length: {}, stream_", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 2403}
{"pred": "           if (cluster.Boundary == null)\n                {\n                var b = cluster.RectangularBoundary = cluster.RectangularBoundary;\n                if (b == null)\n                    b = new RectangularBoundary(cluster.RectangularBoundary);\n                cluster.Boundary", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 2665}
{"pred": "\tif (m_maxSlopeRadians < 0)\n\t{\n\t\tm_maxSlope = 0;\n\t}\n\telse\n\tif (m_maxSlope > 0)\n\t{\n\t\t\tm_maxSlope", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 8689}
{"pred": "       for (Expression initializer : initializers) {\n            if (isUnique(initializer) {\n                checker.report(Result.failure(\"unique.leaked\"), initializer);\n            }\n        }\n        super.visitNewArray(node, p);\n   ", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 3138}
{"pred": "\t\tif (nbttcompound != null)\n\t{\n\t\t\tTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\tif (nbtcompound1 != null)\n\t{\n\t\t\tn", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 2623}
{"pred": "\t\t\t\tif (type == null)\n\t\t\t{\n\t\t\t\t_returnType = _Node.Value;\n\t\t\t}\n\t\t\telse\n\t\t\t\tif (type == null)\n\t\t\t{\n\t\t\t\t\t_Node.", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 2270}
{"pred": "\t\t}\n\t}\n\t}\n}\n}\n", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 2812}
{"pred": "\t\twhen(class.isInitialized()).then(true);\n\twhen(class.castToClass()).then(class);\n\twhen(class.isInitialized()).then(true);\n\twhen(instrumentation.addInstrumentationPoints(agentConfiguration, classType)).then(", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 4275}
{"pred": "\tif (this.isImplicit != other.isImplicit)\n\t\treturn false;\n\tif (this.isAbstractionActive() != other.isAbstractionActive())\n\t\treturn false;\n\tif (this.postdominators == null) {\n\t\t", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 4460}
{"pred": "           int max2 = narrowRExt[r.Child];\n            int max2 = narrowRExt[r.Child];\n            if (min2 > min2) {\n              if (min2 > max) {\n              continue;\n            }\n            }\n            if (min2", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 2687}
{"pred": "           'rsync', 'src', 'dst'],\n            shell=False, env=None,\n            stdout=PIPE, stderr=PIPE, stdin=PIPE, preexec_fn=mock.ANY, close_fds=True\n        assert pipe.stdin.", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 9292}
{"pred": "\t\t\tprocess.IsRunning = false;\n\t\tprocess.IgnoreThreadsChanged -= DbgProcess_IsRunning;\n\t\tprocess.DelayedIsRunning -= DbgProcess_DelayedIsRunning;\n\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 4494}
{"pred": "\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\twriter.end( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color.\n\t * @param   name    Name of the parameter.\n\t * @param   Value", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 7284}
{"pred": "\tif ( !(aThat instanceof Contact) {\n\t\t\treturn false;\n\t}\n\tif (aThat == null) {\n\t\treturn false;\n\t}\n\tif (this.getClass() != aThat.getClass()) {\n\treturn false;\n\t", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 2517}
{"pred": "\t  if reject_wall:\n\t    name = output_name + '.rejected_config'\n\t  if n_save == 0:\n\t    name = output_name + '.config'\n\t  if Output_Vel:\n\t    name = output_name +", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 3012}
{"pred": "       if cdata is None:\n            return\n        if isinstance(node.op, AdvancedSubtensor1):\n            cdata = node.op.get_constant_idx(node.inputs[1], allow_partial=True, only_process_constants=True)\n       ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 30551}
{"pred": "\n\n\n\n\\end{code}\n\\end{code}\n\n\n\n\n\n\n\\begin{code}\n\n\n\n\\end{code}\n\n\n\n\n\\end{code}\n\n\n\n\n\\end{code}\n\n\n\n\n\\end{", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 2513}
{"pred": "               query = fn(arg, **kw)\n                return query\n    def _clear(self):\n        super(QueryEvents, self).clear()\n        self._listeners = []\n    def _listen(cls, event_key, retval=False, **kw):\n        \"\"\"", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 21356}
{"pred": "           xml_object.append(etree.SubElement(self._tag_name, self.show_tag_list)\n        for child in self.get_children():\n            if child.location in self.show_tag_list:\n                self.runtime.add_child_as", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 2510}
{"pred": "           for change in global_changes:\n                self.update_filtered_data(change_filtered_data)\n                self.update_filtered_data(change_filtered_data)\n                self.update_filtered_data(change_filtered_data)\n               ", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 2820}
{"pred": "\t\tif (method != null)\n\t{\n\t\t\tif (method.IsStatic)\n\t{\n\t\t\t\tif (method.IsGenericMethod)\n\t{\n\t\t\t\tif (method.IsGenericMethodDefinition)\n\t{\n\t\t\t\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 11313}
{"pred": "\t\tthis.YLabel.Size = new System.Drawing.Size(20, 16);\n\tthis.YLabel.TabIndex = 2;\n\tthis.YLabel.Text = \"Y:\";\n\t// \n\t// ZLabel\n\t// \n\t", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 3098}
{"pred": "       c = self.get(\"mail/sync.5\")\n        self.assert(c.who, \"warner\")\n        self.assert(set(c.files), set([\"test/mail/sync.1\",\n                  \"test/mail/sync.2\",\n                ", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 3644}
{"pred": "       if (termData == null) {\n            return;\n        }\n        for (Map.Entry<String, String> entry : csvData.entrySet()) {\n            String field = entry.getKey();\n            String value = entry.getValue();\n            if (value.isEmpty())", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 2449}
{"pred": "\t\tif(wand.getItem() instanceof ItemWand) {\n\t\t\tif(wand.getItem() instanceof ItemWand) {\n\t\t\t\tif(wand.getItem() instanceof ItemWand) {\n\t\t\t\tif(wand.getItem() instanceof Item", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 2712}
{"pred": "           for (Node n : component.getNeighbors()) {\n                intrinsicCohesion += this.getRepresentativity(n, c);\n            }\n        }\n        return intrinsicCohesion;\n    }\n    private float getRepresentativity(Node", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 2064}
{"pred": "       except Exception as e:\n            logger.info(\"ERROR: Problem when retrieving flags: %s\" % (str(docid), str(e))\n        try:\n            flags = cPickle.loads(run_sql(\"SELECT data_value FROM bibdocmoreinfo WHERE id", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 3086}
{"pred": "\t\t\tthis.Dispose();\n\t}\n\tprivate void menuGetStatus_Click(object sender, System.Windows.Forms.EventArgs e)\n\t{\n\t\t//MessageBox.Show(\"Status: \"+computerMgmt.getComputer(tvComputerCluster.", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 14544}
{"pred": "   for (Date date : exceptionDates) {\n      exDate = new Date(date.getTime());\n      exDateList.add(exDate);\n    }\n    return exDateList;\n  }\n  /**\n   * Generates the occurrences of the specified event.", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 3254}
{"pred": "\tsourceEventBinding.AddListener( sourceEvent, new UnityAction( sourceEventHandler );\n\t}\n\tprivate void sourceEventHandler( UnityEngine.EventDataEventData eventData )\n\t{\n\t\tif( !isBound )\n\t\t\treturn;\n\t\tif( !", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 2351}
{"pred": "           ISwitchManager switchManager (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName, this);\n            Map<String, String> spanConfig = new HashMap<String, String>();\n            for (String config : jsonData.keySet()) {\n               ", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 8378}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t}\n\t}\n\t}\n\tpublic static final class ImageReferences\n\t{\n\tprivate final class ImageReferences\n\t{\n\t\tprivate final static long serialVersionUID = 1L;\n\tprivate", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 25355}
{"pred": "       int choice = rnd.nextInt(size);\n        return choice;\n    }\n    public static void init() {\n        if (!initialized) {\n            initialized = true;\n            ds = ds = dataSource;\n            properties = new Properties();\n            seed = System.", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 1678}
{"pred": "                   la = LinkAnnotation()\n                    la.subject = man_obj.uuid  # the subordinate is the subject\n                    la.subject_type = man_obj.item_type\n                    la.project_uuid = man_obj.project_uuid\n                    la.", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 4583}
{"pred": "           buffer.Append(\"          .shrink_to_fit = \")\n                .Append(String.ToHexString(ShrinkToFit).Append(\"\\n\");\n            buffer.Append(\"          .merge_cells = \")\n                .Append(String.ToHexString", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 8534}
{"pred": "\t\t\t\t// half-width kana\n\t\t\tvalue = 0xFF;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// This is a CJIS character.\n\t\t\tvalue = (ch - 0xFF);\n\t\t\t", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 3436}
{"pred": "   if obj.mnemonic==\"LD_A\":\n        dst = env.A[a]\n    if obj.mnemonic==\"LD_D\":\n        dst = env.E[a]\n    if obj.mnemonic==\"LD_DA\":\n        dst = env.", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 32768}
{"pred": "\t\t\tif (location instanceof URL)\n\t{\n\t\t\tstream = location.openStream();\n\t}\n\telse\n\t{\n\t\tstream = location.openStream();\n\t}\n\tif (stream == null)\n\t{\n\t\tthrow new IOException(\"Cannot", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 2884}
{"pred": "           return this == CREATIVE;\n        }\n        /**\n         * Returns the SPECTOR game type\n         * @return the SPECTOR game type\n        public static WorldSettings.SPECTOR getSPECTOR()\n        {\n            return new WorldSettings", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 1428}
{"pred": "\t\t\tSecurityDescriptor csd = new CommonSecurityDescriptor\n\t\t(false, Control.None, null, null, null);\n\tcsd.PurgeDefaultAce ();\n\t\t}\n\t[Test]\n\tpublic void PurgeDacl ()\n\t{\n\t", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 3130}
{"pred": "                   self.__process(releases)\n                    self.__idle(self.__callback)\n                    self.__done = True\n                    self.__stopped = False\n                    self.stop()\n                    self.__process(releases)\n                    self.__idle(self", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 2979}
{"pred": "       if (PhotonEditor.Current.HostingOption == ServerSettings.HostingOption.NotSet)\n        {\n            // no RPCs\n            return;\n        }\n        if (PhotonEditor.Current.HostingOption == ServerSettings.HostingOption.Ph", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 9643}
{"pred": "       }\n    @Override\n    public void onActivityResult(int requestCode, Intent data) {\n        super.onActivityResult(requestCode, data);\n        if (requestCode == Activity.RESULT_OK) {\n            if (data != null) {\n                if (data", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 2399}
{"pred": "           op_cc = np.linalg.inv(self.symmetry.op_cc).round().astype(int)\n            if op_cc == 0:\n                return psit_G\n            else:\n                return psit_G\n    def get_offset", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 3269}
{"pred": "       CreateUtkRequest utkastRequest = buildRequest(\"luse\");\n        utkastRequest.setPatientFornamn(PATIENT_FORNAM + \" + PATIENT_MELLANMN + PATIENT_EFTERM\");\n       ", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 4104}
{"pred": "\t\t\t\tforeach (ILNode child in block.GetChildren()) {\n\t\t\t\t\tif (child.Match(ILCode.Br, out target)) {\n\t\t\t\t\t\t// Skip the target\n\t\t\t\t\tif (prevChildAsBB == null)", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 9220}
{"pred": "\tif (IsRagdoll) {\n\t    return;\n\t}\n\tif (delay > 0) {\n\t    //wait for the delay\n\t    if (delay > 0) {\n\t    _BodyUpdateRagdoll = true;\n\t    _", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 7452}
{"pred": "       \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        def __init__(self, config):\n        self.layer_type = LayerType.stratum\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n        \"\"\"\n       ", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 2724}
{"pred": "       for (int i = 0; i < num; i < 4; i++)\n            out[outOff + i] = bytesToint(in[i];\n        }\n        return;\n    }\n    private void Tobytes(int num, byte[] out, int", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 2836}
{"pred": "           if ( source == null )\n            throw new IllegalArgumentException( \"source == null\" );\n            if (objectVariables == null )\n            throw new IllegalArgumentException( \"objectVariables == null\" );\n            if (source instanceof FilteringIterable)\n            {\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 2531}
{"pred": "           slice_json['comment'] = u'\\n'.join(comments)\n    return slice_json\ndef transform_values_holder_json_json_to_value(value):\n    value_json = collections.OrderedDict()\n    value_json_to_json_transform =", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 3202}
{"pred": "         for (int i=0;i<buttons.size();i<buttons.size();i++) {\n            if (buttons.get(i).getTitle().equals(frame.getTitle())) {\n              btn.setSelected(true);\n              break line = i;\n", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 2628}
{"pred": "               getIDList(sys.argv[2])\n                if sys.argv[2] == '--check':\n                    for name in sys.argv[3:\n                    getIDList(sys.argv[3])\n                else:\n                    print \"No objects in list\"", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 2347}
{"pred": "   for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInx/2\n    {\n      for (int x = Math.max(0, p.getRasterWidth()-1); x < Math.min(p.getR", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 3397}
{"pred": "\t\t\t\tif(newId == 0) {\n\t\t\t\t\ttoast.makeToast(\"Error\");\n\t\t\t\t}\n\t\t\telse {\n\t\t\t\ttoast.makeText(toast.toString());\n\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 2715}
{"pred": "               else\n                if (m_meth == CoTask)\n                    {\n                    Marshal.FreeHGlobal(m_ptr);\n                }\n            }\n        }\n        }\n        #endregion\n    }\n    }\n}\n\\end{\n\\end", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 1878}
{"pred": "\\end{code}\n\\end{code}\n\n\n\n\n\n\\end{blockquote}\n\n\n\n\n\\end{itemize}\n\n\n\n\n\\end{blockquote}\n\n\n\n\n\\end{itemize}\n\n\n\n\n\\end{itemize}\n\\", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 6752}
{"pred": "\t\t\t\tif (queue.Count == 0)\n\t\t\t\treturn;\n\t\t\tvar item = queue.ElementAt(itemName);\n\t\t\tif (item == null)\n\t\t\t\treturn;\n\t\t\tif (item.Item == null)", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 4014}
{"pred": "       infoText += \"<br>\"\n        infoText += \"Total files: \" + str(numberOfFiles)\n        infoText += \"Total files: \" + str(numberOfFiles)\n        infoText += \"Total files: \" + str(numberOfFiles)\n        infoText += \"", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 4715}
{"pred": "       code = re.sub(self.re_pc, self.subst, code)\n        self.outputs[0].write(code)\n        self.outputs[0].flush()\n    def subst(self, code):\n        \"\"\"\n        Substitutes variables in a", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 6114}
{"pred": "       result = self._planning_executor_result.get_result()\n        rospy.log(\"Received the result from PlanExecutor\")\n        if result.success:\n            rospy.log(\"Succeeded!\")\n            self._result.success = True\n       ", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 2432}
{"pred": "\t\t\t\t\t\tdelta[ 0 ][ x ] += MULT( chemical[ 0 ][ idx - reactorExtent + chemical[0 ][  idx -  ]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 3248}
{"pred": "               if (pattern == null) {\n                    throw Exception.$position, \"Invalid timestamp format\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFactory.getTimestampFormat(pattern, timestampFactory));\n                break;\n            case ColumnType.TIMEST", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 2622}
{"pred": "\t\tParam.DbType = DbType.Int3;\n\tParam.Name = \"@obj_id\";\n\tParam.Size = 4;\n\tParam.Value = entity.obj_id;\n\tq.Parameters.Add(Param);\n\tParam.DbType = DbType", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 2379}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t}\n\t}\n\t}\n\t}\n\t[Test]\n\tvoid WhenSetCompositeTypeThenSet()\n\t{\n\tvar member = typeof(MyClass).GetProperty(\"ReadOnly\");\n\tvar mapping =", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 4514}
{"pred": "       self.get_ntp_auth_config()\n        self.ntp_auth_enable()\n        self.get_ntp_all_key_id()\n        self.ntp_auth_conf['key_id'] = self.ntp_auth_conf['key", "answers": ["        commands = list()"], "all_classes": null, "length": 4536}
{"pred": "           self.store.update_item(component, editing_user_id)\n            self.assertLess(self.store.has_changes(component)\n            self.store.update_item(component, editing_user_id)\n            self.assertLess(self.store", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 21423}
{"pred": "       digest.update((byte) ((TEXT_CODE >> 8) & 0xff));\n        digest.update((byte) (TEXT_CODE & 0xff));\n        digest.update((byte) 0);\n        updateWithCharBuf();\n        dig", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 2614}
{"pred": "   \"\"\"\n    for i in range(dict.keys() :\n        dict[i] = getlong(dict[i])\"\"\"\n    for i in range(dict.keys() :\n        dict[i] = getlong(dict[i])\ndef mkcomparison(record):", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 3315}
{"pred": "           if (formatters.Count == 0)\n                return null;\n            Type type = null;\n            foreach (MediaTypeFormatter formatter in formatters)\n            {\n                if (formatters.Contains(formatter.Supports(api.MediaType))\n                    {\n", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 2840}
{"pred": "               if value is None:\n                    value = ''\n                if isinstance(entry, gtk.Entry):\n                    value = entry.get_text()\n                if value is None:\n                    value = ''\n                if isinstance(entry, DateEntry):\n                    value", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 2240}
{"pred": "           beanFactory.registerProperty(LegacyPostProcessor.BEAN_REPOSORY_PROPERTIES, newLocation);\n            // Add the new locations\n            beanProperties.addProperty(LegacyPostProcessor.PROPERTY_LOCATIONS, newLocation);\n            // Add the locations", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 2758}
{"pred": "           if line.strip() == \"\":\n                f.close()\n            f = None\n        except IOError:\n                f = None\n        if f:\n                f = open(path, \"w\")\n                f.close()\n                if f:\n                    f.write", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 2034}
{"pred": "           [In, MarshalAs(Unmanaged.Interface) IMFMedia pMediaSource\n            [In, MarshalAs(Unmanaged.Interface) IMFMediaSource pSource\n            [In, MarshalAs(Unmanaged.Interface) IMFMedia pMediaSource\n            [In,", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 2639}
{"pred": "       var principal = DirectedAclKeys.fromJson( directedAclKeys );\n        var principal = DirectedAclKeys.fromJson( directedAclKeys );\n        var principal = DirectedAclKeys.fromJson( directedAclKeys );\n        var principal = DirectedA", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 2244}
{"pred": "       for child in element.findall('.'):\n            if self.verify_child(child):\n                return True\n        return False\n    def verify_child(self, child):\n        \"\"\"Verify a child element.\n        Arguments:\n        child Element object\n        Returns:", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 2331}
{"pred": "       if node.nodeType == Node.DOCUMENT_NODE:\n            return\n        if node.nodeType == Node.DOCUMENT_FRAGMENT_NO:\n            return newOwner.importNode(node)\n        return node\n    def _clone_node(child", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 17407}
{"pred": "\t\t\t\t\tEMSSceneSection) objectToTest, diagnostician, map);\n\t\t}\n\tEMSScSectionMassualtyIndicatorTestCase.doValidation();\n\t}\n\t/**\n\t* @generated\n\t*/\n\t@Test\n\tvoid validate", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 4123}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.Name, endOffset))\n\t\t\tdecodeName(keyLocator.getKeyName(), new int[1], new int[1], decoder);\n\t\telse if (decoder.readBooleanTlv", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 9126}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            if(a.CD()){\n                a.update(delta);\n            }\n        }\n        //Updates", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 2528}
{"pred": "       action.setColor( color );\n        action.setTeam( GameEngine.model().getGame().getTeam( color.getValue() );\n        action.setRegistration( registration );\n        action.setColor( color );\n        action.setColor( color );\n        action.set", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 2672}
{"pred": "       if r.status == 20:\n            raise RuntimeError(\"No response\")\n        if r.status == 20:\n            raise RuntimeError(\"No response\")\n        if r.status == 30:\n            raise RuntimeError(\"No response\")\n        if r.", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 2321}
{"pred": "\t\t\t\t\tresponse = service.Merge(request);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\tif (response == null)\n\t\t\t{\n\t\t\t\t\tfailure = SR.MergeFailed;\n\t\t\t\t}\n\t", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 3301}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\"Cannot calculate weights for reactions with more than one metabolite.\")\n    return [coeff * met.get(\"C\", 0) for met, coeff in reaction.metabolites.items", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 3124}
{"pred": "       return self.get_query(pootle_path, user)\n    def get_query(pootle_path, user):\n        \"\"\"Returns units that fall below the `pootle_path` umbrella.\n        :param pootle_path: An internal", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 2182}
{"pred": "               ('created', models.DateTime(auto_add=True)),\n                ('updated', models.DateTime(auto_now=True)),\n            ],\n        ),\n        migrations.Model(\n            name='User',\n            fields=[\n                ('id', models.AutoField(verbose", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 3505}
{"pred": "                   if port_num == 0:\n                    self.logger.debug(\"ARPox: no ARP request for {}\".format(dstip))\n                    self.logger.debug(\"Pox: ARP request for {}\".format(dst))\n                    self.ipdest", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 2810}
{"pred": "   if (m_RecentItems.size() >= m_MaxCount) {\n      m_Ignore = true;\n      return;\n    }\n    m_RecentItems.add(item);\n    updateMenu();\n    m_Ignore = false;\n  }\n  /**", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 3450}
{"pred": "           if (target.IsInRange(src.Location, 2)\n                return false;\n            // Check for hidden\n            if (target.Hidden)\n                return false;\n            // Check for hidden items\n            if (target.Hidden)\n                return false;\n            // Check", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 1921}
{"pred": "       if (maxTradePeriod == TradePeriod.HALFREACHED)\n            return maxTradeDate;\n        else\n        return null;\n    }\n    public boolean isHalfTradePeriod() {\n        return maxTradePeriod == TradePeriod.HALF", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 4168}
{"pred": "\t\t\tif (p.typ == Node.iter) {\n\t\t\ta = LeadingAny(p.sub);\n\t\t}\n\t\telse if (p.typ == Node.opt) {\n\t\t\ta = Leading(p.sub);\n\t}\n", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 6730}
{"pred": "\t\t\tif (address & 0x00000000000000000000000000001)\n\t\t\t{\n\t\t\t\tmAddress = address & 0x000000", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 25859}
{"pred": "\t\t\tif (orderInsensitive)\n\t{\n\t\t\t\tdirection = 1;\n\t}\n\t\t}\n\tpublic int compare(MskointVo o1, MskointVo2)\n\t{\n\t\tif (o1 == 1", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 2284}
{"pred": "\t\t\t\t\tSendEmail( fileName );\n\t\t\t\t}\n\t\t\t}\n\t\tprivate static string GetTimeStamp()\n\t{\n\t\t\tDateTime dt = DateTime.Now;\n\t\treturn dt.ToString( \"yyyy-MM-dd-MM-dd", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 2335}
{"pred": "\t\t\tList = session.CreateCriteria(typeof(Item)\n\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t.Setable(true)\n\t\t\t.List();\n\t\t\tAssert.Equal(3, list.Count);\n", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 2048}
{"pred": "               _units[i] = _indx2Units[i];\n                _indx2Units[i] = _indx2Units[i] + 1;\n                _indx2Units[i] = _indx2Units[i] +", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 4230}
{"pred": "       self.create()\n    def delete(self):\n        \"\"\"Delete a rate in the UI\n        Args:\n            cancel: boolean, whether to cancel the action on alert\n        \"\"\"\n        view = navigate_to(self, 'Details')\n        view.toolbar.configuration.", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 2554}
{"pred": "\t\tif (useShadowBuffer)\n\t\t{\n\t\t\t// write to the data to the buffer\n\t\t\tWrite( offset, src, length, src );\n\t\t\t}\n\telse\n\t\t\t// write to the buffer\n\t\t\tWrite( offset,", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 2374}
{"pred": "\t\t\tself.scan_sat.setValue(self.sat_selection)\n\t\tself.scan_ter.setValue(self.sat_selection)\n\tself.scan_input_as.setValue(self.scan_input_as)\n\tself.", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 4414}
{"pred": "           else {\n                if (filter == null) {\n                    filter = new TcpAddress.TcpAddress.TcpAddressFilter();\n                filter = new TcpAddress.TcpAddress.TcpAddress();\n                filter.setAddress(val);\n                filter.setMask(", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 2633}
{"pred": "               if (filter == 0)\n                    break;\n                if (filter == 1) {\n                    for (int i = 0; i < bytesPerRow; i++) {\n                    curr[i] = dataStream.ReadByte();\n                    }\n                }", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 18060}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), types.Object)\n        self.assertEqual(s.get_interface(), 'foo.bar')\n        self.assert", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 3182}
{"pred": "               output += \"\n                if m_product is not None:\n                    output += str(m_product) + \"\\n\"\n                output += \"\n                if m_product is not None:\n                    output += str(m_product) + \"\\n\"\n                output += \"", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 5090}
{"pred": "               \"1: Extension \\\"protobuf_unittest.TestExtension\\\" + \\\"nosuch\\\" + \\\"nosuch\\\"\");\n                Assert.Fail(\"1: Extension \\\"protobuf_unittest.TestExtension\\\" + \\\"nosuch\\\" not found in the ExtensionRegistry.\");\n            Assert.", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 5152}
{"pred": "\tfinal Object old = map.remove( key );\n\treturn old;\n\t}\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void putAll(Collection values) {\n\tfinal Collection values = values;\n\tif ( values.isEmpty() {\n\t\treturn;", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 1885}
{"pred": "\t\t\t\t\tm.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t/// <summary>\n\t/// Records a staff placing a bid\n\t/// </summary>\n\t/// <param name=\"auction\">The auction</param>\n\t/// <", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 2679}
{"pred": "       return action_message\n\\end\n\\end{code}\n\\end{code}\n\n\n\n\n\n\nComment: I have tried to use the following code to get the barcode from the kiosk mode but it is not working.\n\n\n\n\n\\begin{code}", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 2430}
{"pred": "\t\tgrResultsRow row = null;\n\tif (orderInvestigationLiteVo == null)\n\t\treturn row;\n\tif (orderInvestigationLiteVo.getInvestigationIsNull())\n\t{\n\t\t\treturn row = null;\n\t", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 3338}
{"pred": "               pt.x = pt.x;\n                pt.y = pt.y;\n                pt.Dispose();\n                c.Dispose();\n                return pt;\n            }\n        }\n        /// <summary>\n        /// The width of this item\n        /// </summary>", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 2325}
{"pred": "           if cwd is None:\n                cwd = self.get_cwd()\n            if cwd is None:\n                cwd = self.get_cwd()\n            if cwd is None:\n                cwd = self.get_cwd()\n            if cwd", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 2605}
{"pred": "                   if (nameArraySize > 0 ) {\n                        managedType = managedType.MakeArray();\n                    }\n                    toReturn.Add( new StructInfo( name, managedType, marshalAttribute, arraySize );\n                }\n                }\n            }\n        }", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 5673}
{"pred": "\t\t\t\tif (base_type == null)\n\t\t\t\treturn false;\n\t\t\tif (base_type.IsValueTypeOf (\"System.ValueType\")\n\t\t\t\treturn true;\n\t\t}\n\t\t}\n\tpublic bool IsAbstract {\n", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 4532}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key\");\n            }\n        }\n        #endregion\n    }\n}\n}\n\\endregion\n\\end{code}\n\\end{code}\n\n\n\n\n\n\nComment:\n\nComment: I", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 1606}
{"pred": "       self.protocol = protocol\n        self.context = PyOpenSSL.SSL.SSL_CTX50_new()\n        self.context = PyOpenSSL.SSL.SSL_CTX50_new()\n        self.context.set_options(PyOpenSSL.SSL.", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 3908}
{"pred": "\t\tthis.toggleFuzzy = new global::Gtk.Toggle ();\n\tthis.toggleFuzzy.CanFocus = true;\n\tthis.toggleFuzzy.Name = \"toggleFuzzy\";\n\tthis.toggleFuzzy.Label = global::Mono.", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 6108}
{"pred": "               notebook.set_page_num(new_num)\n                headbook.set_page_num(new_num)\n                headbook.set_current_page(new_num)\n                headbook.show_tabs()\n                headbook.show_tabs()\n               ", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 5754}
{"pred": "#####################################################\n#####################################\n#####################################\n#####################################\n#####################################\n####################################\n####################################\n####################################\n####################\n####################\n####################\n####################\n####################\n####################\n####################\n####################\n####################", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 5065}
{"pred": "\t\treturn \"PersistenceUnitInfo [persistenceUnit=\" + \"\\\"\" + persistenceUnitName + \"\\\"\", \"provider=\" + \"\\\"\" + persistenceProviderName + \"\\\"\", \"transactionType=\" + \" + transactionType.toString(), \" + transactionType.toString(), \" + \" +", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 1636}
{"pred": "   return false;\n  }\n  protected void doUpdateDesign()\n  {\n    if (isReadOnly)\n    return;\n    if (isReadOnly)\n      return;\n    if (getModel() instanceof IADObject)\n      {\n      IADObject (", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 1880}
{"pred": "\tthis.Attach.Location = new System.Drawing.Point(8, 2);\n\tthis.Attach.Name = \"butAttach\";\n\tthis.Attach.Size = new System.Drawing.Size(7, 2);\n\tthis.Attach.TabIndex", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 3591}
{"pred": "           i++;\n        return sb.toString();\n    }\n}\n}\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 2097}
{"pred": "\t\t\tCheck (\"HMACSHA5-RFC21\", hmac, data);\n\t}\n\t[Test]\n\t// Test with a key that is larger than 28 bytes (= block-size of SHA-24 and SHA-25).\n\tpublic", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 8355}
{"pred": "\t    current_align = current_align + 4;\n\t    sum += CDSerializer.getMaxSize(current_alignment, current_alignment, current_alignment);\n\t    current_sum += CDSerializer.getMaxSize(current_alignment, current_alignment);", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 2629}
{"pred": "       java = javaHome + @\"\\bin\\java.exe\";\n      if (java == null)\n        java = javaHome + @\"\\bin\\java.exe\";\n      if (java == null)\n        java = javaHome + @\"\\bin\\java.exe\";\n      if (", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 3155}
{"pred": "                   comment = name\n            if comment == name:\n                    return [l]\n            else:\n                    comment = None\n            if re.match(r'^%s' %s' %s' %s' %s' %s' %s' %s' %", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 3996}
{"pred": "       modifier.vertex_group = modifier_json['vertex_group']\n        modifier_json['use_proximity'] = modifier.use_proximity\n        modifier_json['use_proximity'] = modifier.use_proximity\n", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 6838}
{"pred": "           if(rank < 0)\n                continue;\n            if(rank < 0)\n                rank = 0;\n            else\n                rank = rank / totalBuckets;\n            if(rank < 0)\n                rank = 0;\n            if(rank <", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 3522}
{"pred": "       for (val neighbor in vertex.neighbors()) {\n            neighbors.add(neighbor.getKey());\n        }\n        assertEquals(3, neighbors.size());\n    }\n    @Display(\"neighbors() should return an empty list\")\n   ", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 2073}
{"pred": "                   self.parser(self.choice, cap=self.cap)\n                    self.inspect(self.cap)\n                    self.parser(self.choice, cap)\n                    self.parser(self.choice, cap)\n                    self.parser(self.choice", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 2295}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(9, 15);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(2, 2);\n            this.r", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 3611}
{"pred": "           'Meta': {'ordering': \"ordering\", 'object_name': 'Scan'},\n            'content': ('editors.main.fields.XField', {'null': 'True', 'blank': 'True'}),\n            'created': ('django.models.DateTime', {'auto_", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 6011}
{"pred": "               if (processed) {\n                    return false;\n                }\n                else {\n                    processed = true;\n                    lookup = aHelperContext.getType(targetNamespace, sdoType);\n                    if (lookup != null) {\n                        if (lookup.is", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 4418}
{"pred": "       obj_emp = self.pool.get('hr.employee')\n        ids = obj_emp.search(cr, [('user_id', '=', uid])\n        if ids:\n            for id in ids:\n                self.holid = obj_emp.holid", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 6621}
{"pred": "           if (Enabled)\n                this.Enabled = !Enabled;\n            return Enabled;\n        }\n        /// <summary>\n        /// Gets the column at the specified index\n        /// </summary>\n        /// <param name=\"index\">The index of the column to get</param", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 6164}
{"pred": "           return \"MixerLine: \"MixerLine\";\n            }\n        /// <summary>\n        /// Gets the source\n        /// </summary>\n        /// <param name=\"sourceIndex\">Source Index</param>\n        /// <param name=\"source\">Source</param>", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 2383}
{"pred": "\t\t\tObject value10 = (Object.getCareContext());\n\t\t\tif (value10 != null)\n\t{\n\t\t\t\tObject value0 = (value0);\n\t\t}\n\t\tObject.setCareContext(value10);\n\t", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 8150}
{"pred": "           if status:\n                print(\"Building Servo\")\n                print(\"Building Servo\")\n                print(\"Building Servo\")\n                print(\"Building Servo\")\n                print(\"Building Servo\")\n                print(\"Building Servo\")\n                print(\"Building", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 2307}
{"pred": "\t\tdouble estN = counts[3];\n\tdouble pEst = counts[3];\n\tdouble estP = predictPositives ? estP : estN;\n\tif (function.equals(WRC)) {\n\t\tscore = cov (p + n) / (p +", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 4658}
{"pred": "               var indexRev = new GitRevision(ObjectId.Index);\n                var indexRev = new GitRev(ObjectId.Index);\n                var workTreeRev = new GitRevision(ObjectId.WorkTree)\n                    {\n                    Parent = indexRev", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 2103}
{"pred": "   assert lattice.cbuffer.get_object(bm0_index).out_address == 0\n    assert lattice.cbuffer.get_object(bm1).out_address == 0\n    assert lattice.cbuffer.get_object(bm1).out_address == 0", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 3531}
{"pred": "       if (o instanceof AuthScope) {\n            if (this == o) {\n                return true;\n            }\n            if (o instanceof AuthScope) {\n                return super.equals(o);\n            }\n            return false;\n        }\n        return false;\n    }", "answers": ["        if (o == this) {"], "all_classes": null, "length": 2299}
{"pred": "                       b,\n                        object state: asyncState\n                        },\n                        new AsyncCallback(callback, asyncState);\n        }\n        }\n        public void EndAddInt(int a, object result)\n        {\n            if (result != null)\n            throw new Web", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 4245}
{"pred": "\t\t\t\t\t}\n\t\t}\n\t\t}\n\treturn s;\n\t}\n\t}\n\tpublic static String getCargennrChargennr\n\t(SeriennrChargenrMengeDto snrChargenr) {\n\treturn", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 2553}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (value is EClassifier) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_eType = (value);\n\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 2751}
{"pred": "   if args.index_file is not None:\n        log.msg('Loading index from {}'.format(args.index_file))\n    if args.output_file is not None:\n        log.msg('Writing to {}'.format(args.output_file))\n   ", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 2396}
{"pred": "       self.bit_ss, self.bit_es = 0\n        self.cmd_token = []\n        self.cmd_token_bits = []\n        self.cmd_token_bits = []\n        self.cmd_token_bits = []\n        self.cmd_token", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 5135}
{"pred": "         if (cursor >= limit) {\n            return false;\n          }\n          cursor = limit_backward;\n          break lab1;\n      case 2:\n        // (, line 2\n        //, line 2\n        lab0:\n        do {\n          v", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 9538}
{"pred": "               if (cls == null)\n                    return;\n                if (cls.getConstructor() == null)\n                    return;\n                Object[] args = new Object[0];\n                try {\n                    o = cls.newInstance(args);\n                    cd.last =", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 2397}
{"pred": "           result.append(crypto_utils.pyopenssl_normalize_name(extension.strip())\n        return result\n    def _get_key_usage(self):\n        return self._get_extension(x50.ExtendedKeyUsage)\n    def _get_oc", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 8052}
{"pred": "\t\t\tif (i != s.end()) {\n\t\t\t\tif (still_there) {\n\t\t\t\t\tif (slot_type::slot_type::slot_type::is_valid (i->slot_type)) {\n\t\t\t", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 3008}
{"pred": "   # The first value is the first surrogate\n    # The second value is the second surrogate\n    # The third value is the last value\n    # The fourth value is the first surrogate\n    # The fifth value is the second surrogate\n    # The sixth value is", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 2854}
{"pred": "\t\t\tif (StartOf(1)) {\n\t\t\tGet();\n\t\t\t}\n\t\telse {\n\t\t\tSemErr(4);\n\t\t}\n\t}\n\t}\n\tvoid Decl(Node.t) {\n\tif (la.kind", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 3970}
{"pred": "           edi_doc['partner_id'] = self.get_partner_id(cr, line.order_id, context=context)\n            edi_doc['product_id'] = line.product_id\n            edi_doc['product_uom'] = line", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 3078}
{"pred": "       Hashtable<String, String> serviceProperties = new Hashtable<String, String>();\n        serviceProperties.put(\"uri\", \"https://localhost:\" + httpPort + REST_SERVLET_ALIAS);\n        serviceProperties.put(\"ssl\", \"true\");\n       ", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 2686}
{"pred": "               nameMap.put(name, permissions);\n            }\n            else\n            nameMap.put(name, permissions);\n        }\n        }\n        return nameMap;\n    }\n    }\n    @Test\n    public void testReadonlyNode_noPermission() throws Exception\n", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 4784}
{"pred": "           assert 'spam' in devices\n            assert 'eggs' in devices\n            assert 'spam' in devices\n            assert 'eggs' in devices\n            assert 'spam' in devices\n            assert 'eggs' in devices\n            assert 'spam' in devices\n           ", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 2747}
{"pred": "       device = Device(deviceToken)\n        device.check_inspection()\n        device.notification_postictoken(loginId, password)\n        device.newUser(loginId, password)\n        device.cardUpdate(loginId, password)\n        device.endTutorial()", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 1781}
{"pred": "               if (index_elements[0] == \"Fit\"):\n                    rv['fit'] = 1\n                if (index_elements[1] == \"Scatter\"):\n                    rv['mode'] = index_elements[1]\n                if (index_elements", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 6800}
{"pred": "           if (m_Keys.Count > 0)\n            {\n                if (m_Keys[0].KeyValue == 0)\n                m_Keys.RemoveAt(0);\n                m_Keys.Add(new Key(0);\n            }\n            else\n            if", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 1721}
{"pred": "       for (Iterator<String> iter = devices.iterator(); iter.hasNext();\n        Tuner tuner = new TunerHd(devices.get(iter.next());\n        // DRS 2018 - Added\n        if (tuner.getFullName().", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 6177}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigration());\n    }\n    if (lastSeenVersion < DAY_BY_STICKERS) {\n      jobs.", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 3706}
{"pred": "       if (line.startsWith(\"TYPE\")) {\n          String type = line.trim();\n          String regex = line.substring(line.indexOf(\"regex\") + \"regex\");\n          String overwritable = line.substring(line.indexOf(\"regex\") + line.indexOf(\"regex\");\n", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 3280}
{"pred": "           if sub_path == sub_path:\n                return n\n            if sub_path == sub_path:\n                return n\n            if n.is_directory():\n                # we have to find the include file\n                # we need to find the include file\n                # we need to", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 3329}
{"pred": "       ctx.push(x)\n        def make_it(feat, idx):\n            f = Feature(ctx, idx)\n            geom, attrs = feat\n            f.add_geometries_from_wkt(geom)\n            for k, v in", "answers": ["        ctx = Context()"], "all_classes": null, "length": 7334}
{"pred": "           if self.want.ip is None:\n                self.want.update({'ip': self.have.ip})\n        if self.want.port in [None, '*'] and self.want.ip != '*':\n                raise F5Module.An", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 4317}
{"pred": "   def fill(self, values):\n        \"\"\"\n        Args:\n            values (list): [] to remove all vars or [\"var\", \"value\", \"type\"], ...] to fill the view\n        \"\"\"\n        if set(values) == set(self.all_vars):\n           ", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 2561}
{"pred": "           result = null;\n        }\n        return result;\n    }\n    public void setDbManager(String key, Object dbManager) {\n        if (this._dbManager.containsKey(key)) {\n            this._dbManager.remove(key);\n        }\n        this", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 2030}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"title\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(mock_request):\n        self._test_request", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 5993}
{"pred": "           manifest = env.get_manifest_manifest(Src)\n            if not manifest:\n                manifest = env.embedManifestDllCheck(source, env)\n            if not manifest:\n                manifest = env.embedManifestDllCheck(env)\n            if manifest:\n", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 2937}
{"pred": "           execute();\n            if (error != null) {\n                error.printStackTrace();\n            }\n        }\n        if (error != null) {\n            displayError(error);\n        }\n        return error = null;\n    }\n    }\n    /**\n     * Returns <", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 2944}
{"pred": "\t{\n\t\tmeta.getFields(data.RowMeta, getStepname(), null, this);\n\t\tif (meta.getAggregate()==null)\n\t{\n\t\t\tmeta.setAggregate(AggregateMeta.TYPE_GREGATE_N", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 2657}
{"pred": "   f('+5..', last) == (d(2014,1,30,2,2), now)\n    assert f-5.., last) == (d(2014,1,3,19,4), now)\n    # both relative", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 5969}
{"pred": "           if (maxtime.TotalSeconds < mintime.TotalSeconds)\n                maxtime = mintime;\n            if (maxtime.TotalSeconds < dmaxtime.TotalSeconds)\n                maxtime = dmaxtime;\n            if (maxtime.Total", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 5344}
{"pred": "       self._check_guest_suspend_log(suspend_log, suspend_chk_cmd)\n        if not s:\n            raise exceptions.Test(\"Guest doesn't support suspend.\")\n        self.vm.monitor.system_wake()\n", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 3962}
{"pred": "       assertThat(r.get(), is(1);\n        assertThat(r.get(), is(1));\n        assertThat(received, is(1));\n        assertThat(r.get(), is(1));\n        assertThat(received, is(1));\n       ", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 1744}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.getDecorator()).setSendBeforeParameters(r);\n            }\n            this.owner.getDecorator().SendAfterRequest(r);\n           ", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 3820}
{"pred": "\t\t\tvar bytes = new byte[4];\n\t\tvar compressed = 0;\n\tfor (int i = 0; i < 4; i < 4; i++) {\n\t\t\tcompressed += bytes[i] <<= value;\n\t\t}\n", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 2738}
{"pred": "           self.fm.execute(au_flags, descr, cwd)\n        self.fm.env.copy(original_path, descr)\n        self.fm.env.copy(original_path, descr)\n        self.fm.env.copy(original_path", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 11346}
{"pred": "\t\tvoid CreateInstance_String_String_Null ()\n\t{\n\tHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\tCOMTest = null;\n\t}\n\t[Test]\n\tvoid CreateInstance_String", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 2175}
{"pred": "       repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n        self.assert(repo.changes.count(), 3)\n        self.assertTuple(\n            _actions(self.old_av, {locale.id},\n                ", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 3187}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            if \"texture\" in cmd.parameters:\n                userstate.texture = cmd.parameters[\"texture\"]\n            if \"texture\" in cmd.parameters:\n                userstate.texture = cmd.parameters", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 6429}
{"pred": "       Group group = player.getPlayer2();\n        if (group != null) {\n            group.onEvent(new GroupLeaderChangedEvent(group, player));\n        }\n    }\n    /**\n     * @return true if player is in group\n     */\n    public", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 2737}
{"pred": "           if raw:\n                formatter = \"Null\"\n            outfile = StringIO()\n        if not formatter:\n                formatter = params.get(\"formatter\")\n        if formatter is None:\n                formatter = Formats.get(params.get(\"formatter\"))", "answers": ["        r = [head]"], "all_classes": null, "length": 2628}
{"pred": "       column.quantity_render.set_property(\"0\")\n        self.assertEqual(\"0\", column.quantity_renderer.get_property(\"text\"))\n    def test_update_cell_based_on_data_clears_cell_when_row_has_children(self", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 2626}
{"pred": "\tif (parent instanceof GridBean) {\n\t    GridBean grid = (parent);\n\t    if (grid == null) {\n\t    throw new PageException(\"GridColumn not found\");\n\t    }\n\t    if (grid.getColumn() == null) {\n\t    throw", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 3003}
{"pred": "               }\n            }\n        }\n        public void SaveXML(XmlElement element, FileVersion version)\n        {\n            Save(element, version);\n            Save(element, version);\n            Save(element, version);\n        }\n        public void Save(XmlElement element)\n", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 2176}
{"pred": "\t\t\t\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\telse if (m_Peerless == PeerList.MelisandeFelcca)\n\t\t\t\t\t\t\t_key[i] = new", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 4416}
{"pred": "\tfor (int i = 0; i < beans.length; i < beans.length; i++)\n\t{\n\t\tChangeOfService vo = (ims.care.ChangeOfService)beans[i];\n\tcoll.add(vo);\n\t}\n\treturn coll", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 2804}
{"pred": "       Version.Version.Version.Version.V1,\n        Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.Version.", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 2661}
{"pred": "\t\t\t\tbyte[] pb = new byte[16];\n\t\tp.GetBytes(p, pb.Length);\n\t\t\tif(!Mems.ArrayEqual(pbExpc))\n\t\t\t throw new SecurityException(\"Argon2-1\");\n\t\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 10494}
{"pred": "\tif(stack == null)\n\t\treturn false;\n\tI mainInv = player.inventory;\n\tIublesInv = Botania.internalHandler.getBaublesInplayer();\n\tint invSize = mainInv.getSize();\n\tsize = invSize;", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 3347}
{"pred": "\n\n\n\n\n# import django.contrib.auth.auth.models.User.User.objects.create_user(username='admin', 'admin', 'admin', 'admin@example.com', 'admin')\n# admin\n# admin.auth.User.objects.create_user(", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 2348}
{"pred": "\t\t\t\t\t\tNextFrame.PixelCount.ToString ());\n\t\t\t}\n\t\t\tlock (OutputQueue) {\n\t\t\t\tQueue.Enqueue (NextFrame);\n\t\t\t}\n\t/// <summary>\n\ts the queue\n\t/// </summary", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 2119}
{"pred": "       if ((this.actionList == null) {\n            if ((other.actionList != null))\n                return false;\n        } else if ((other.actionList == null)\n                return true;\n        }\n        if ((this.screenshots == null) {\n           ", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 3570}
{"pred": "           if (d.state == DriverCall.STATE_ACTIVE) {\n                if (d.getState() == DriverCall.STATE_ACTIVE) {\n                    if (d.getState() == DriverCall.STATE_ACTIVE) {\n                    if (d.getState", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 4893}
{"pred": "\t\t\t\t\t\tif (licence.isData()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 2726}
{"pred": "           for (int x = 0; x < xSize; x++)\n                for (int y = 0; y < ySizeP; y++)\n                {\n                    newVertices[y * xSizeP + x] = newVertices[ySizeP * x] =", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 2967}
{"pred": "\t\t\tif (testInt1 == 0)\n\t{\n\t\t\t\t\tresult = client.call(API_METHOD_ADD, new Object[] {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 2291}
{"pred": "\t\t\t\treturn new int[0];\n\t}\n\t@Null\n\tpublic void setBlockSelection(final int[] blockStarts, final int[] blockEnds)\n\t{\n\t}\n\t@Null\n\tpublic void setBlockSelection(final int[] blockStarts,", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 1505}
{"pred": "           out.writeUTF(\"40\\n\");\n            out.write(name);\n            out.write(okHeader);\n            out.write(okHeader);\n            out.write(name);\n            out.write(okHeader);\n            out.write(okHeader);\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 2085}
{"pred": "                      16 + (stactics_display.read(i) & 0f),\n                        16,\n                        0,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSPARENC_NONE, 0", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 10397}
{"pred": "                       {\n                        if (minionPrediction.Hitchance >= HitChance.High)\n                        {\n                            result.Add(minion);\n                        }\n                        }\n                        else\n                        break;\n                    }\n                    case Collision", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 6321}
{"pred": "       List<Node> path = new ArrayList<>();\n        path.add(x);\n        for (Node b : graph.getAdjacentNodes(x)) {\n            if (graph.isCollider(b)) {\n                path.add(b);\n            }\n        }\n", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 3157}
{"pred": "                   if (i == 0)\n                    plcs.Push(pop.Next);\n                    if (i == 0)\n                    break;\n                    if (i == 0)\n                    continue;\n                    plcs.Push(pop.Next);\n", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 1868}
{"pred": "       if (other.getFinancialEntity() == null) {\n            return false;\n        }\n        if (other.getFinancialEntity() == null) {\n            return false;\n        }\n        if (getFinancialEntity() == null) {\n            return", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 2154}
{"pred": "                       if (mob.IsPlayer())\n                        if (mob.CanBeHarmful(m_From, false)\n                        {\n                            m_Item.DoHarmful(ob, m_From, GetDamage(), 0, 0, ", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 2807}
{"pred": "\t\t\t\t\tHistory.Add(msg);\n\t\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tHistory.Add(msg);\n\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tpublic void InternalMessage(Player", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 3475}
{"pred": "   return mock.getAvailCompoIds(sClientSpace, sUserId);\n  }\n  @Override\n  public String getComponentName(String componentId) {\n    return mock.getComponentName(componentId);\n  }\n  @Override\n  public String getComponent", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 2811}
{"pred": "                           final File file = (String) mListView.getItemAt(key);\n                            if (file.isDirectory()) {\n                                final Intent intent = new Intent();\n                                intent.setAction(Intent.ACTION_CREATE_ZIP_ZIP_FILE_DIR);\n", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 2146}
{"pred": "       if (this.channel != null) {\n            this.channel.close();\n            this.j.readLock().lock();\n            try {\n                this.i.clear();\n            }\n            this.j.readLock().unlock();\n        }\n        }\n   ", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 2352}
{"pred": "               z_arr[p_index, 0] = z_dict[z_key][0]\n                z_arr[p_index, 1] = z_dict[z_key][1]\n                t_arr[p_index, 0] = t_dict", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 12704}
{"pred": "     if (name.equals(recipients.get(0).getAddress())) {\n        return resourceOne;\n      } else {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name);\n        sb.append(\" \");\n        sb.append(recipients.get", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 3137}
{"pred": "           for path in extra_path:\n                env[\"PATH\"] = path.join(path, \"bin\") + \":\" + env[\"PATH\"]\n        env[\"PATH\"] = env[\"PATH\"]\n        env[\"PATH\"] = env[\"PATH\"] + \":\" + path.join(extra_", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 2420}
{"pred": "               if test_type == \"manual\":\n                    test_cls = ManualTest\n                    test_files = obj.get(\"manual_tests\")\n                    if not test_files:\n                        raise ManifestError\n                    test_files = obj.get(\"manual_tests", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 2062}
{"pred": "       if (compiledScript != null) {\n            compiledScript = null;\n            compiledScriptClassLoader = null;\n            compiledScriptingSecurityManager = null;\n            compiledScript = null;\n            errorsInScript = null;\n            errorsInScript = null;\n            compiledScript = null", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 2171}
{"pred": "           throw new NotSupportedException();\n        /// Method to override closing a wrapped adapter\n        /// <summary>\n        /// </summary>\n        /// <param name=\"exception\">The exception to throw</param>\n        /// <param name=\"e\">The exception to throw</param>\n       ", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 1564}
{"pred": "     for i in energy.size:\n        Etf = energy[i]\n        grad_Etf = grad_var*grad_Etf+energy_var*grad_Etf+grad_me\n        grad_E = np.reshape(grad_E, (-1,3", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 3072}
{"pred": "\tif (!obj.getClass().equals(this.getClass())\n\t{\n\t\t\treturn super.compareTo(obj);\n\t}\n\telse if (obj instanceof ims.ocr.OrderingResults.InvestigationForChangeVo)\n\t{\n\t\treturn", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 2670}
{"pred": "       assertEquals(found.get(0), 2);\n    }\n    @Test(expectedsources = \"StackIcon\", \"StackIcon\", \"StackIcon\")\n    public void shouldFindStackWithIcon() throws Exception {\n        final StackImpl stack = stacks[0];\n       ", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 2225}
{"pred": "       p.setValue(depth);\n        p.setValue(exclusionRegexp);\n        p.setValue(inclusionRegexp);\n        p.setValue(maxDocuments);\n        p.setValue(maxDocuments);\n        p.setProxyHost(Proxy);\n       ", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 3083}
{"pred": "\t\t\tif (kind == Kind.Block)\n\t\t\t{\n\t\t\t\tif (pattern.Kind == Kind.Block)\n\t\t\t{\n\t\t\t\t\tif (pattern.Block.Kind == Kind.Block)\n\t\t\t{\n\t\t\t\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 5116}
{"pred": "                   if (colisionList.Any())\n                    {\n                        extendedWillHit += 1;\n                    }\n                    if (extendedWillHit >= param)\n                    {\n                        extendedFarmLocation = objAiBase.Position;\n                   ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 2371}
{"pred": "\t\tif(Menus == null)\n\t{\n\t\t\tMenus = new ims.framework.context.ContextMenus();\n\t}\n\tMenus.getMenus().initialize();\n\t}\n\t// Menus.getMenus().initialize();\n\tsuper.", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 7325}
{"pred": "       if pkg_under:\n            # We're in the right place.\n            # Check if the package is frozen.\n            if pkg_under in frozen_output:\n                return True\n            # We're not in the right place.\n            # Check if the", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 3072}
{"pred": "           self.assertRaises(AssertionError):\n                f.subs.new()\n        )\n    def test_m2m2_onchange(self):\n        \"\"\" Tests that changing an o2m content triggers onchange\n        \"\"\"\n        f = Form(self", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 3961}
{"pred": "   assert Sum(Sum(x, (x, 1, 2), (x, 3)) == Sum(x, 1, 2))\n    assert Sum(Sum(x, 1, 2, (x, 3)) == Sum(x, 1, ", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 13856}
{"pred": "\t\t\tint c = LuaDLL.lua_gettop(l);\n\tif(arg==1){\n\t\t\tSystem.String a;\n\t\tcheck(2, a);\n\t\tvar ret=Unity.W.Escape(a);\n\tpush(", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 2713}
{"pred": "               if (changedItems == null)\n                {\n                    this._newList = new ArrayList();\n                this._oldItem = null;\n                this._notifyAction = action;\n                this._newStartingIndex = startingIndex;\n                }\n                else\n                if (action ==", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 2313}
{"pred": "           int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            InputStream is = new ByteArrayInputStream(stream.toByteArray());\n            Document = parser.parse(is);\n            stream.close();\n            is.close();\n           ", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 4995}
{"pred": "                   c.Code = Token2Csv();\n                    break;\n                case Param.Campus:\n                    c.Campus = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.CampusType =", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 3085}
{"pred": "\t\t\t\tif (ide.id == UInt64.MaxValue) {\n\t\t\tide.image = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tide.image = new ImageData ();\n\t\t\t\tide.Read (reader);", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 8777}
{"pred": "               JS.addToJSR(JS);\n            }\n            // adds the JSR to the successor of the JSR\n            JS.addToJS(this);\n            JS.addToJS(JS);\n            // adds the JSR to the successor of the JSR\n            JS", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 5684}
{"pred": "           ptr_of_this_method = ILpreter.Minus(__esp, 1);\n            ptr_of_this = ILpreter.GetObjectAndResolveptr_this_this_method();\n            var __int.Free(ptr_of_this);\n            var __", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 3322}
{"pred": "\t\t\t\tif (position == null) {\n\t\t\t\t\texplosion.setPosition(position);\n\t\t\t\t}\n\t\t\telse {\n\t\t\t\t\texplosion.setPosition(position);\n\t\t\t\t}\n\t\t\t}", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 3713}
{"pred": "       currImage = self._getCurrentValue( driver, \"Image\" )\n        print \"oldImage=\"firstImage, newImage=\"currImage\"\n        self.Equal( int(currImage), int(lastImage-1, \"Failed to decrement the Image\")\n    # Test that the", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 8550}
{"pred": "           self.kexg.ssh_check_mic(mic_token, H)\n        else:\n            self.kexg.ssh_check_mic(mic_token, H)\n        self.transport.gss_kex_used = True\n        self.transport._", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 8041}
{"pred": "               for (int index = 0; index < tree.getChildCount(); index++) {\n                    DefaultTreeNode node = (DefaultTree) tree.getChildAt(index);\n                    if (node.getUserObject() == null) {\n                        continue;\n                    }", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 2379}
{"pred": "               res = self.cr.fetch()\n                return res[0]\n        class SmartContract(BrowsableObject):\n\"\"\"            \"\"\"a class that will be used into the python, mainly for usability\"\"\"\n            def __init__(self, cr, uid, contract_", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 2916}
{"pred": "       Mvir = halo_mass(cosmo, rho_bar, bn, rho_crit, bn, zi)\n        Mvir = Mvir\n        M20 = Mvir / Mvir\n        Rvir = Mvir / rho_bar\n        R", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 4537}
{"pred": "       d.setFont(font);\n        d.setSize(font.getSize());\n        d.setWidth(getLineWidth());\n        return d;\n    }\n    @Override\n    public void setFont(Font font) {\n        font = font;\n    }\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 2125}
{"pred": "       #if self.cutting_limit==0:\n        #if self.cutting_limit==0:\n        #if self.cutting_limit==0:\n        #if self.cutting_limit==0:\n        #if self.cutting_limit==0:", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 5390}
{"pred": "\t\twindow.Hide();\n\t}\n\tprivate void Show(Window window)\n\t{\n\t\twindow.Show();\n\t}\n\tprivate void OnConnection(bool isConnected)\n\t{\n\t\tif (isConnected != isConnected)\n\t{\n", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 2154}
{"pred": "           if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nb'])\n                params[1]['bins'] = [\n            else:\n                step = (params", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 6865}
{"pred": "           if (contact.getLastMessage() == null) {\n                contact.setLastMessage(null);\n            }\n            if (query.getPagingOrder() == PagingOrder.NORMAL) {\n                contact.setLastMessage(query.getFirstMessage());\n           ", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 2319}
{"pred": "               im1L = im1.convert(\"L\", rgbI)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgbI)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\", rgb", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 2615}
{"pred": "\t\t\t\tif (rsp.isOkey())\n\t\t\t\taddLog2(tag, ret);\n\t\t\t}\n\t\t}\n\treturn ret;\n\t}\n\tprotected void parse4(Application app, Iso7816.Response... data)", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 2427}
{"pred": "           yield self.parseHeader(self)\n            yield self.parseFlags(self)\n            yield self.parseBody(self)\n            yield self.parseFlags(self)\n            yield self.parseHeader(self)\n            yield self.parseBody(self)\n            yield self.", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 3062}
{"pred": "\t}\n\t/**\n\t * This method is called when the engine is disconnected.\n\t * @param e\n\t * @throws IOException\n\t */\n\t@Override\n\tpublic void connectionDropped() throws IOException {\n\tif (engine != null) {\n\t\tengine", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 2661}
{"pred": "       for app in self.apps:\n            app = app\n            if app.path_prefix:\n                app_prefix = app_prefix.rstrip('/')\n            if app_prefix:\n                app_prefix = app_prefix.lstrip('/')\n            if app_prefix:", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 3989}
{"pred": "\t\t\tself.load_model( sys.argv[1]\n\t\tself.train( sys.argv[1]\n\tself.train()\n\tself.score()\n\tself.save( sys.argv[1]\n\tself.score()\n\tself.save(", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 4154}
{"pred": "           if (res == EnhanceResult.Success)\n                return;\n            if (res == Enhance.None)\n                return;\n            if (res == Enhance.AlreadyEnhanced)\n                return;\n            if (res == Enhance.BadItem)", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 3932}
{"pred": "           if entry_name not in entries:\n                entries[entry_name] = [entry_value]\n            else:\n                entries[entry_name].append(entry_value)\n            entries[entry_name].append(entry_value)\n        return type(self.instanti", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 7608}
{"pred": "                   if (alModules.Count == 0)\n                    {\n                    MessageBox.Show(\"No services found\");\n                    this.Close();\n                    break;\n                }\n            }\n            }\n        }\n        private void save()\n        {\n           ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 1652}
{"pred": "               return (bool)View[\"SubmitText\"] ?? true;\n            }\n            set\n            {\n                this.View[\"Submit\"] = value;\n            }\n        }\n        /// <summary>\n        /// True to submit all items\n        /// </summary>\n        [Meta]", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 4124}
{"pred": "               if(this.triangle == 0)\n                    {\n                    if(this.textureArray[textureHash] == null)\n                    {\n                        this.textureArray[textureHash] = this.textureArray[textureHash] = new Texture", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 5164}
{"pred": "   response.headers.add(exposed_header, header)\ndef get_course_info(request, course_key):\n    \"\"\"\n    Get course info for a course\n    \"\"\"\n    course_key = CourseKey.from_string(request.GET.get('course_", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 2466}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    oldDrivers.Add(d);\n                    d.Close();\n                }\n                // remove the rest\n                while (idlePool.Count > 0)\n                {\n                    d = idlePool.De", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 2614}
{"pred": "       return var\n    if len(var) == 1:\n        return var\n    else:\n        return var = [var]\ndef _verify_list(var, name, input_list):\n    \"\"\"Verify that var is a list of numbers.\n    \"\"\"\n    if", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 9981}
{"pred": "", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 2986}
{"pred": "\t\t\t\tdouble num = this.Seconds;\n\t\t\tint2 = int.Floor((double)num * 60);\n\t\t\tstring str = string.Format(\"{0:0000}{1}:{02}\", num.ToString(\"D2\"), num", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 5017}
{"pred": "           if (flat)\n                _program = new ShaderProgram(flat);\n            else\n                _program = new ShaderProgram(shader);\n            if (flat)\n                _program.Use();\n            else\n                _program.Use();\n            if (flat)\n               ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 1724}
{"pred": "           rxn._model = self\n            for rxn in self.reactions:\n                rx._model = self\n        if rebuild_relations:\n                for metabolite in self.metabolites:\n                    metabolite._model = self\n                for reaction", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 3496}
{"pred": "\t\tfor (int i = 0; i < beans.length; i < beans.length; i++)\n\t{\n\t\tTumourGroupVo bean = (ims.clinical.vo.beans.TumourGroupVo)beans.TumourGroup", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 2882}
{"pred": "\t\t\t\tif(foundBottom){\n\t\t\t\t\tselectedLine = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t}\n\t/**\n\t * Highlights a rectangle\n\t */\n\tpublic void setRectangleHighlight", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 6153}
{"pred": "       set.start();\n        set.start();\n        set.start();\n        set.start();\n        set.start();\n        set.start();\n        set.start();\n        set.start();\n        set.start();\n        set.start();\n        set.start", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 3282}
{"pred": "               if (InterestRow.Key > HighestNumber)\n                {\n                    HighestNumber = InterestRow.Key + 1;\n                }\n                else\n                if (InterestRow.Key == HighestNumber)\n                {\n                    HighestNumber = InterestRow.", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 2844}
{"pred": "\t\t\tint\ti \t= 0;\n\tint\tj \t= 0;\n\tint\tk \t= 0;\n\tint\tl \t= 0;\n\tint\tm \t= 0;\n\tint\tn \t=", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 2153}
