{"pred": "   private final transient KadConfiguration config;\n\n    private final transient KademliaRoutingTable routingTable;\n\n    private final transient Timer timer;\n\n    private final transient TimerTask timerTask;\n\n    private final transient JKademliaStorageEntry storage", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 16504}
{"pred": "       // mParameterListAdapter = new EffectParameterListAdapter(mActivity, mEffects);\n        // mParameterListView.setAdapter(mParameterListAdapter);\n\n        // TODO:\n        // - add a parameter toggle menu item\n        // - add a parameter toggle menu item to the action", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 24125}
{"pred": "\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8]\n    output_widths = [8, 8]\n\n    @classmethod\n    def eval(cls, x, y):\n        x = Rotate", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 19143}
{"pred": "   public static void main(String[] args) {\n        new EffectManager();\n    }\n\n    public EffectManager() {\n        mEffects = new ArrayList<>();\n        mParameterListView = new ViewGroup(getApplicationContext());\n        mParameterListView.setId(R.id.", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 24012}
{"pred": "               new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 20936}
{"pred": "    *  private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 全局监听器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * 本地监听器\n     */\n", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 20716}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 5113}
{"pred": "           //save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);\n            //save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);\n            //save private and public Key to storage\n            rsa.saveRSAKeys", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 20364}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(new SignRequest(\"U2F_V2\", SERVER_CHALLENGE_SIGN, APP_ID_SIGN", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 23103}
{"pred": "   def placeOriginate(self, route):\n        self.uaA.recvEvent(CCEventConnect(rtime = time(), origin = route.origin, cId = self.cId, cGUID = self.cGUID, \\\n          caller_name = self.call", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 25933}
{"pred": "   def __init__(self, uri):\n        self.uri = uri\n\n\nclass FlagList(Signature):\nNext line of code:\n    def __init__(self, flags):\n        self.flags = flags\n\n\nclass ByteFlag(Signature):\nNext line of code", "answers": ["    @sdproperty"], "all_classes": null, "length": 4568}
{"pred": "import opcode\nfrom ...utils.log import logger\nfrom ..graph import Tree, TreeNode\nfrom .expr import Expr, Const, Ref, Comparator, Operator, Undef, \\\n                  CMP_IMPLICIT_NOT_EMPTY, CMP_TYPE_", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 6686}
{"pred": "               intent.setDataAndType(Uri.parse(url), \"video/x-flv\");\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static boolean useInternPlayer(TDActivity activity) {\n        return activity != null && activity.", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 12496}
{"pred": "       String message = \"N/A\";\n        String email = \"N/A\";\n        String name = \"N/A\";\n        String avatarUrl = \"N/A\";\n        String login = \"N/A\";\n        String userEmail = \"N/A\";\n       ", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 6723}
{"pred": "       # pylint: disable=protected-access\n        self.assertTrue(isinstance(self.network, Network))\n        self.assertTrue(isinstance(self.network.net_name, str))\n        self.assertTrue(isinstance(self.network.batch_size", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 27862}
{"pred": "   class BaseModel(Base):\n        def __new__(cls, *args, **kwargs):\n            init_called = True\n            return super().__new__(cls, *args, **kwargs)\n\n\ndef test_load_default_init_with_kwargs(engine):\n   ", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 6214}
{"pred": "   return self\n\n\n@method(infix('!', bp=72))\ndef evaluate_map_operator(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for context.item in context.inner_focus_", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 20041}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MarbleTransformation(),\n                    new MapColorsTransformation(),\n                    new MirrorTransformation", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 16809}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 7992}
{"pred": "               writeResponse(SUCCESS, correlationId);\n\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n               ", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 4590}
{"pred": "       wild.insert()\n        wild.set_message(wild_report)\n        wild.set_location(location)\n        wild.set_pokemon(pokemon)\n        wild.set_channel(ctx.channel)\n        wild.set_timezone(time", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 9268}
{"pred": "   if c['vocab_text']:\n        vocab_text = Vocabulary(c['vocab_text'])\n    else:\n        vocab_text = None\n    # Load vocab def\n    if c['vocab_def']:\n", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 22160}
{"pred": " assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.amplitude_mps == 5", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 23259}
{"pred": "               Intent intent = new Intent(getActivity(), RaffleActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n                finish();\n               ", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 29357}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 9589}
{"pred": "\n Q: How to get the value of a variable in a function? I have a function that takes a variable as an argument. I want to get the value of that variable in the function. How can I do that?\n\nA: You can use the keyword \"self\" to refer to the instance", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 8068}
{"pred": "   def __bytearray__(self):\n        _bytes = bytearray()\n        _bytes += self.calg\n        _bytes += self.compressed\n        return _bytes\n\n    def __len__(self):\n        return len(self.calg) + len(self.com", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 18359}
{"pred": "   #    imax = img.max();\n    #    if imax == 0:\n    #        imax = 1;\n    #    img /= imax;\n    \n    #cell intensity and size measurements\n    findCellIntensityParameter = getParameter(det", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 10306}
{"pred": "           Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 200f);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume /", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 15171}
{"pred": "           while (transactionIterator.nextTransactionState() == TransactionState.OK) {\n\n                printer.print(transactionIterator.next());\n\n            }\n\n            System.out.println(print);\n            print.setLength(0);\n\n        }\n\n    }\n\n", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 8079}
{"pred": "               if (query.queryType == RequestType.SELECT) {//classifyColumnsToDimAndMetrics\n                    Either<String, Tuple2<List<String>, List<String>>> dataSourceDescRes = coordinator.aboutDataSource(stmnt.dataSource, reqHeaders);", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 13767}
{"pred": "   def decrypt(self, message: FinTSMessage):\n        assert message.segments[0].header.type == 'HNHBK'\n        assert message.segments[-1].header.type == 'HNHBS'\n\n        plain_segments = message.", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 5324}
{"pred": "                           env.combExpMaxRegNum = i;\n                            setupCombExpCheck(root, i);\n                        }\n                    }\n                }\n            } else {\n                if (env.combExpMaxRegNum > 0) {\n                    for (int i", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 16798}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 22516}
{"pred": "\t\t\n\t\tResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors, String notEnoughData)\n\t\t{\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags =", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 32768}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 8844}
{"pred": "   public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(String description,\n            CheckedConsumer<$Argument2> givenStep) {\n        return andArgument(givenStep);\n    }\n\n    @Override", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 5377}
{"pred": "   String result = process.await();\n    if (expectedExitCodes.length > 0) {\n      for (int exitCode : expectedExitCodes) {\n        if (exitCode != process.exitCode()) {\n          throw new IosDeviceException(\n              RealDeviceImpl", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 19453}
{"pred": "\t\tif (options.getBoolean(Keys.INVERT_FONT_COLOR, false)) {\n\t\t\ttextColor = Color.WHITE;\n\t\t} else {\n\t\t\ttextColor = Color.BLACK;\n\t\t}\n\t}\n\t", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 21062}
{"pred": "\t\tMessage message = XmlUtil.fromXml(Message.class, xml);\n\t\tif (message.isTextMessage()) {\n\t\t\treturn talk(message.FromUserName, message.Content);\n\t\t}\n\t\tif (message.isImageMessage()) {\n\t\t", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 7267}
{"pred": "   print u'[INFO] 开始运行 APK...'\n    # 获取 APK 文件的 MD5 值\n    md5_file_name = os.path.basename(file_path) + '.md5'\n    md5_file_", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 7976}
{"pred": "   @command(pass_context=True, category='Bot Info', aliases=[\"raid-city\", \"rc\"])\n    @channel_checks.raid_report_enabled()\n    async def cmd_raidcity(self, ctx, *city_title):\n        \"\"\"\n       ", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 17670}
{"pred": "       self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 15, 10, 3))\n        self.assertEqual(date_string_to_", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 10426}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 18846}
{"pred": "                           ShareUtil.sharePicture(mActivity, picUrl);\n                            break;\n                        case 1:Next line of code:\n                            ShareUtil.shareText(mActivity, picture.getText_content());\n                            break;\n                        case 2:Next line of", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 12506}
{"pred": "\t\t\t\t\t\tfor j in range(num_contrasts):\n\t\t\t\t\t\t\tcontrast_names.append((\"tstat_pFWER_con%d\" % (j+1)))\n\t\t\t\t\t\tfor k in range(num_", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 18956}
{"pred": "               StreamsFragment.class,\n                StreamsGridFragment.OhmletAdapter.class,\n                StreamsFragment.class,\n                StreamsFragment.class,\n                StreamsFragment.class,\n                StreamsFragment.class,\n                StreamsFragment.class,\n                Stream", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 32768}
{"pred": "   def parse(self, packet):\n        super(SignatureV4, self).parse(packet)\n        self.sigtype = packet[0]\n        del packet[0]\n\n        self.pubalg = packet[1]\n        del packet[1]\n\n       ", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 18403}
{"pred": "   if context is None:\n        raise self.missing_context()\n\n    elif isinstance(context, XPathSchemaContext):\n        for item in context.iter_children_or_self():\n            if is_schema_node(item):\n                self.add_xsd_type", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 17032}
{"pred": "     'no_members': Counter,\n      'load': Rate,\n      'downed_nodes': Counter,\n      'downed_nodes_count': Counter,\n      'downed_nodes_size': Counter,\n      'downed_nodes_max_", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 5948}
{"pred": "       nc._send_message_with_protocol(OK, protocol)\n\n        self.assertEqual(protocol.send_string.call_count, 1)\n        self.assertEqual(protocol.send_string.call_args[0][0],\n                         'ok')", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 10773}
{"pred": "       assertEquals(\"SELECT 1\", qe.getQuery());\n        assertEquals(1, qe.getParamIndexes().size());\n        assertEquals(1, qe.getParamIndexes().get(0));\n        assertEquals(1, qe.getParamNames().", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 4998}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testBatchExecutionSuccess() {\n        StatementBatchExecution se = new Statement", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 6822}
{"pred": "   @inlineCallbacks\n    def _createLinkADRRequest(self, device):\n        \"\"\"Create a LinkADRRequest message.\n        \n        Args:\n            device (Device): Device object\n        \n        Returns:\n            LinkADRRequest message\n        \"\"\"\n        #", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 17201}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 23687}
{"pred": "#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 21949}
{"pred": "       super.onStart();\n        Toast.makeText(getActivity(), \"onStart()\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        Toast.makeText(getActivity(), \"", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 16394}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass HITANS8(H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 6700}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 23070}
{"pred": "       if (mPublicRoomsListList != null) {\n            mPublicRoomsListList.clear();\n            mPublicRoomsListList.addAll(Matrix.getInstance(this).getPublicRoomsList());\n        }\n    }\n\n    private void refreshPublicRoomsList", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 32768}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 13313}
{"pred": "   chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)\n\n\n    #parsing permutation files, apply filters and build breakpoint graph\n    logger.info(\"Processing permutation files\")\n    raw_bp", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 15710}
{"pred": "       plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n    }\n\n    /**\n     * Saves the default configuration file.", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 29332}
{"pred": "                   deviceGcmToken = MiPushClient.getInstance().getToken();\n                    stopMiPush();\n                    stopHwPush();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 3787}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(\n                SET_OBJECT_NAME));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 4194}
{"pred": "   public void setVulnTree(JTree tree) {\n        this.vulntree = tree;\n    }\n\n    public void setVulnTree(DefaultMutableTreeNode root) {\n        this.vulntree = new JTree(root);\n    }", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 20723}
{"pred": "\n    /**\n     * It adds a new GC activity chart panel to the tabbed pane set.\n     *\n     * @param gcActivityName The name of the GC activity that will be shown in the\n     * chart.\n     * @param datasetGenerator The generator that will produce the", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 9268}
{"pred": "       if (packet.getType() == PacketType.ACK) {\n            AckRequest ackRequest = new AckRequest(packet, client);\n            ackManager.onAck(client, packet);\n            return;\n        }\n\n        if (packet", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 11071}
{"pred": "       lMS.addTrack(appRtcClient.videoConstraints().getVideoTracks()[0]);\n      }\n      videoSource = new VideoSource(lMS.nativeStream);\n      videoSource.addTrack(videoSource.audioTracks.getFirst());\n      videoSource.", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 13915}
{"pred": "           contentValues.put(JobStorage.COLUMN_BACKOFF_MS, -1L);\n\n\nA: I think you are missing the following line:\ncontentValues.put(JobStorage.COLUMN_BACKOFF_MS, -1L);\n\n Q: How", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 4673}
{"pred": "   private CheckBoxPreferenceHideTime preferenceHideTime;\n    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideAutoCompleteButton preferenceHideAutoCompleteButton;\n    private CheckBoxPreferenceHideMenuButton preferenceHideMenuButton", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 32768}
{"pred": "   return obj\n\n\ndef init_snapshot(obj, basedir=None):\n    # a system object is needed in order to coopy work\n    if not obj:\n        raise Exception(CORE_LOG_PREFIX +\n                \"Must input a valid object if there'", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 5831}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 7209}
{"pred": "   return SMTHHelper.getInstance().wService.getAllBoards().flatMap(new Function<ResponseBody, Observable<Board>>() {\n      @Override public Observable<Board> apply(@NonNull ResponseBody responseBody) throws Exception {\n        try {\n          String response = SMTHHelper", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 21191}
{"pred": "       super.onStart();\n        //bgTasksRunning.incrementAndGet();\n        Log.d(\"ObserverRegistry\",\"Started\");\n        //bgTasksRunning.decrementAndGet();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 8453}
{"pred": "\t\tString testBase = model.getTestBase();\r\n\t\tString testClass = model.getTestClass();\r\n\t\tString testPackage = model.getTestPackage();\r\n\t\tString testMethodPrefix = model.getTestMethodPrefix();\r\n\t\tString testMethodPostfix = model.", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 32768}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 11934}
{"pred": "           textareaMessage.setText(httpMessage.getRes().getResponse());\n            textareaMessage.setCaretPosition(0);\n            scrollPane.setViewportView(textareaMessage);\n            textareaMessage.setMarkAllHighlightColor(new Color(0xff, 0", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 21109}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    (\"ACTIVE\", None, ready),", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 8756}
{"pred": "   def _load_file(self, fileobj):\n        return self._load_file_chunk(fileobj)\n\n    def _load_file_chunk(self, fileobj):\n        return self._load_file_chunk_chunk(fileobj)\n\n    def _load", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 5222}
{"pred": "     visitProxOp(new VisitOrd3(n), query);\r\n\r\n      return null;\r\n    }\r\n\r\n    visitProxOp(new VisitOrd3(n), query);\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   *", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 21976}
{"pred": "                   new EdgeTransformation().setVEdgeMatrix(new float[] { 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 17175}
{"pred": "   def _decode_field(self, field):\n        \"\"\"\n        :param field:\n        :return:\n        \"\"\"\n        if field[0] == 1:\n            return self._decode_error( field )\n        else:\n            return self._decode_field_value", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 4955}
{"pred": "   api = DERBMDATA(args.apikey)\n\n\n Q: How to get the value of a variable in a function? I have a function that takes a variable as an argument. I want to get the value of that variable in the function.\nI tried this:\nfunction", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 5249}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if-else\n\t\t\titems.add( item );\n\t\t} // for\n\n\t\treturn items", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 16051}
{"pred": "   assert dump_key(engine, user) == user_key\n\n\ndef test_index_for():\n    \"\"\"Index by each object's value for an attribute\"\"\"\n    class Person:\n        def __init__(self, name):\n            self.name = name\n\n   ", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 10026}
{"pred": "       new StaticString(\"\"),\n        new StaticString(\"\"),\n        new StaticString(\"\"),\n        new StaticString(\"\"),\n        new StaticString(\"\"),\n        new StaticString(\"\"),\n        new StaticString(\"\"),\n        new StaticString(\"\"),\n", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 7722}
{"pred": "\tpublic static Form form(Object resource, Object... fields) {\n\t\treturn new Form(resource);\n\t}\n\n\tpublic static Html html(Object resource, Object... fields) {\n\t\treturn new Html(resource);\n\t}\n\n\tpublic static Body body(Object resource", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 25033}
{"pred": "   def list_events(self, params=None):\n        data = self.call_api(\"events\", type=\"GET\", params=params)\n        events = list()\n        for e in data[\"events\"]:\n            event = Event(e)\n            events.append(event)", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 9663}
{"pred": "       Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n    ", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 4708}
{"pred": "           onApplyClicked();\r\n        } else if (id == R.id.menu_wallpaper) {\r\n            onWallpaperClicked();\r\n        } else if (id == R.id.menu_request) {\r\n            onRequestClicked();\r\n        } else if (", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 32762}
{"pred": " private static final Pattern BOOST_EXTRACTOR = Pattern\n      .compile(\"^(.*?)\\\\^(\\\\d+(?:\\\\.\\\\d+)?)$\");\n  private final static Logger logger = Logger\n      .getLogger(QsolToQueryVisitor.class.getPackage().", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 16041}
{"pred": "\t\tif args.mapper is not None:\n\t\t\tARG_CHECKER.check(args,mode='converting')\n\n\t\tif args.mapper_chunk:\n\t\t\tMAPPER_CHUNK_SIZE=args.mapper_chunk\n", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 30352}
{"pred": "   self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n    # Check if the file is a FF file\n    if validFFName(self.vid_path, 'fits'):\n        self.ff = readFF(self.dir_path, self", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 6383}
{"pred": "   im = ilms.LegendrePoly2P1D(order=2, constval=image.get_image().mean())\n\n\ndef create_state():\n    \"\"\"Creates a state, as a `peri.states.State`, which is similar\n    to the state", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 19876}
{"pred": "\t\tFoodModifier.sync(player);\n\t}\n\n\tpublic static void setInStone()\n\t{\n\t\tFoodGroupRegistry.setInStone();\n\t}\n\n\tpublic static void clear()\n\t{\n\t\tFoodGroupRegistry.clear", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 11054}
{"pred": "\nclass CommentView(generic.DetailView):\n\n    template_name = 'ploghubapp/comment.html'\n    form_class = CommentEditForm\n\n    def get(self, request, pk, username, slug):\n        comment = get_object_or", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 5167}
{"pred": "\t\t\t\t\t\tfor (ILayerCell cell : selectedCells) {\n\t\t\t\t\t\t\tif (cell instanceof ILayerCell) {\n\t\t\t\t\t\t\t\tISelection selection = ((ILayerCell) cell).getSelection();\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 25732}
{"pred": "   def __bytearray__(self):\n        _bytes = super(RevocationKey, self).__bytearray__()\n        _bytes += self.keyclass.encode()\n        return _bytes\n\n    def parse(self, packet):\n        super(RevocationKey, self", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 5519}
{"pred": "       if item is None:\n            yield context.root\n        elif is_xpath_node(item):\n            yield item\n\n\n@method(function('processing-instruction', nargs=(0, 1), bp=79, label='kind test'))\ndef nud_", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 13097}
{"pred": "def getAS2PuffleString(client, puffles):\n    puffles_as2_str = list()\n    for puffle in puffles:\n        p_id, p_type, p_sub_type, p_name, p_adopt, p", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 4763}
{"pred": "   im = util.NullImage(np.zeros((32,)*3))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 8669}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 11280}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 23799}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_FLEX_MS, 60_000L);\n        contentValues.put(JobStorage.COL", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 4465}
{"pred": "       super.onStart();\n        FragmentObservable.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable.getInstance().remove(this);\n    }\n\n    @Override\n    public void on", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 11841}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        model = Progress"], "all_classes": null, "length": 11784}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 8544}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 7384}
{"pred": "               new RegistrationParam(success, email, password, message));\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 12142}
{"pred": "   private final RoadMap map;\n    private final RoadMap map_ref;\n    private final RoadMap map_ref_ref;\n    private final RoadMap map_ref_ref_ref;\n    private final RoadMap map_ref_ref_ref_ref;\n    private final Road", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 11728}
{"pred": "   private String[] urls;\n    private List<String> urlsList;\n    private List<String> titlesList;\n    private List<String> urlsList2;\n    private List<String> titlesList2;\n    private List<String> urlsList3;\n    private List<", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 4368}
{"pred": " assert isinstance(args.gps_sv[0].getMessage(), ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 23004}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 10438}
{"pred": "\t\t\t\t\tif (data.startsWith(\"[\")) {\n\t\t\t\t\t\tString[] parts = data.split(\"\\\\s+\");\n\t\t\t\t\t\tif (parts.length == 2) {\n\t\t\t\t\t\t\ta = new AppData", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 24194}
{"pred": "               if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 19502}
{"pred": "       self.beg_alt = self.cartesian_points[0][1]\n        self.end_alt = self.cartesian_points[-1][1]\n\n        # Compute the great circle\n        self.gc = greatCircle(self.beg_vect, self", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 8412}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 4842}
{"pred": "\n    /**\n     * Called when the visitor first reaches a node with children.\n     * @return Determines whether the node's children will be visited.\n     */\n    boolean enter(Node node);\n\n    /**\n     * Called when the visitor reaches a leaf node.", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 8762}
{"pred": "   public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnv) {\n        super.init(processingEnv);\n        typeUtils = processingEnv.getType", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 4006}
{"pred": "       bind(GerritSettings.class).to(GerritSettingsImpl.class);\n\n        bind(GerritSettingsImpl.class).asEagerSingleton();\n\n        bind(GerritSettings.class).toProvider(new GerritSettingsProvider());\n\n        bind", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 17328}
{"pred": "                   if (getZxidFromName(snapshots.get(i).getName()) > zxidLong) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    } else {\r\n                        i--;\r\n                    }\r", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 10563}
{"pred": "\n\n\n Q: How to get the value of a variable in a function? I have a function that takes a variable as an argument. I want to get the value of that variable in the function. How can I do that?\n\nA: You can use the keyword \"self\" to refer to", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 8081}
{"pred": "   ]\n    def __init__(self, CallName='', ReprName=None, \n                 Pt=None, PtFunc=None, Val=None, \n                 Len=None, LenFunc=None,\n                 Dict=None, DictFunc=None, Re", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 23767}
{"pred": "\t\t\t\t\t\tsearchList.setVisibility(View.GONE);\n\t\t\t\t\t\ttabLayout.setVisibility(View.GONE);\n\t\t\t\t\t\tscanButton.setVisibility(View.GONE);\n\t\t\t\t\t\treturn Observable.empty", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 27680}
{"pred": "   # 1. particles + coverslip\n    rad = 0.5 * np.random.randn(POS.shape[0]) + 4.5  # 4.5 +- 0.5 px particles\n\n    # 1. particles + coverslip\n   ", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 19700}
{"pred": "   result, index = apply_fast_and(left.values, right.values,\n                                  left.index, right.index)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 6884}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request.getPackageName() == null) continue;\r\n                    stringBuilder.append(\"\\nPackage Name: \").append(request.getPackageName());\r\n                    stringBuilder.append(\"\\", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 30085}
{"pred": "   return isinstance(instance, (int, float, Decimal, AbstractDateTime, Duration))\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n        return issubclass(subclass", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 10423}
{"pred": "   return SearchMenuPage(self._createSearchHistory(context))\n\n\n Q: How to get the value of a variable in a function? I have a function that takes a variable as an argument. I want to get the value of that variable in the function. How can I do that?\n", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 7691}
{"pred": "   def validate(self, mode=\"Refine\"):\n        \"\"\"\n        validate the parameters, subclass and container to meet the refinement requirement\n\n        Arguments\n        - mode  :  string, validate mode, (Refine, Calculate)\n\n        Return  :  Boolean ", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 11234}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'type')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 14371}
{"pred": "   private RepoItemAdapter repoItemAdapter;\n    private List<RepoItem> repoItemList = new ArrayList<RepoItem>();\n\n\n    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 19320}
{"pred": "\t\t\t\tFile inputFile = new File(basePathDDI2FO + \"/\" + \"DDI_2015_01_01_01_01_01_01_01_01_01_01_01_0", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 11427}
{"pred": "                       user.setPw(passwordView.getText().toString());\n                        user.setId(userId);\n                        user.setName(nameTmp);\n                        user.setProduct(deviceProduct);\n                        user.setContactFlag(contactFlag);\n                        user", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 15218}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 23320}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, BandBitEncoder)\n  assert encoder.bandIndexes[0] == NormalRateConfig.GPS", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 7983}
{"pred": "   return tgAsDict[\"tier\"][0][\"entries\"]\n\n\ndef run_save_with_tier_names(\n    tg,\n    includeBlankSpaces=True,\n    minimumIntervalLength=None,\n    minTimestamp=None,\n    max", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 4748}
{"pred": "   def segment_vad_arguments(self) -> List[SegmentVadArguments]:\n        \"\"\"\n        Generate Job arguments for :class:`~montreal_forced_aligner.segmenter.SegmentVadFunction`\n\n        Returns\n        -------\n        list[", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 25579}
{"pred": "   def test_lasot(self):\n        root_dir = os.path.join(self.data_dir, 'LaSOT')\n        dataset = LaSOT(root_dir)\n        self._check_dataset(dataset)\n\n    def test_trackingnet(", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 15579}
{"pred": "   boolean isSet(FixTag tag, Validity validity);\n    Validity isValid(FixTag tag, Validity validity);\n    boolean isSet(FixTag tag, Validity validity, Validity validity2);\n    Validity isValid(FixTag", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 26134}
{"pred": "   def _create_thresholder(self):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 7230}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAndQueryNode andQueryNode, Void param) {\n\t\t\tAlvisIRAndQueryNode queryNode = new AlvisIRAndQueryNode();\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tfor (Al", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 15638}
{"pred": "\tprivate Validator validator;\n\t\n\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate ByteArrayOutputStream outputStream;\n\t\n\tprivate ByteArrayOutputStream tempByteArrayOutputStream;\n\t\n\tprivate File tempFile;\n\t\n\tprivate File tempFile2;\n\t\n", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 19544}
{"pred": "       registry.put((byte) (ADD_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 4620}
{"pred": "                       String id = LogDB.getNewId(lang);\n                        FileSaver fileSaver = new FileSaver(content, lang, url, id);\n                        fileSaver.save(logDb);\n                        map.put(tweet.getText(), true);\n", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 11429}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 10536}
{"pred": "       help=\"network delay [millisecond].\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 100ms\n        \"\"\".format(\n            \", \".join([\", \".join(values) for values in hr.Time.get_text", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 13208}
{"pred": "   self.contacts = Contact.objects.filter(phone_number=self.phone_number)\n\n\n    def get_contacts_by_group(self, group_name):\n        group = Group.objects.get(name=group_name)\n        return group.contact", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 4889}
{"pred": "   PCollection<GCPProject> liveProjects =\n        pipeline.apply(\"Read live data\",\n            Read.from(new LiveProjectSource(org)));\n\n    // Convert the live projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResource", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 11952}
{"pred": "       self.rule = ContentSimhashSampling()\n        self.rule.set_kb(self.kb)\n        self.rule.set_engine(self.engine)\n        self.rule.set_child_heuristics(self.child_heuristics)\n        self", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 7694}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 14313}
{"pred": "   conditions.append(AndCondition(**condition_for(\"and\", column=column)))\n\n\ndef conditions_for_not(operation, column=None):\n    return conditions_for(operation, column=column)[0]\n\n\ndef conditions_for_or(operation, column=", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 7089}
{"pred": "       assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 1\n        assert get_square_idx(0, 2) == 2\n        assert get_square_idx(0, 3)", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 5480}
{"pred": "   private final ICompilationUnit testClassWithSuperclass;\n\n    private final ICompilationUnit testClassWithSuperclassAndAnnotations;\n\n    private final ICompilationUnit testClassWithAnnotations;\n\n    private final ICompilationUnit testClassWithAnnotationsAnd", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 32768}
{"pred": "   self.next_sink.AsyncProcessRequest(self, sink_stack, msg, stream, headers)\n\n\nclass ClientMessageSink(ClientMessageSinkStack):\n  \"\"\"A sink that processes ClientMessageSinks.\"\"\"\n\n  def __init__(self, next_provider", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 5359}
{"pred": "\tprivate boolean debug = false;\n\n\tprivate LapdfDocument document;\n\tprivate AbstractModelFactory modelFactory;\n\tprivate IntegerFrequencyCounter avgHeightFrequencyCounter;\n\tprivate FrequencyCounter fontFrequencyCounter;\n\tprivate int mostPopularWordHeight = -1;\n", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 16120}
{"pred": "       \"--file-list-file=docer.files.txt --file-list-format=docer.files.txt\");\n    var options = docerConf.options().orElseGet(Next line of code:\n        \"--help\");\n    var args = docerConf.", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 18385}
{"pred": "\n\n\n Q: How to get the value of a variable in a function? I have a function that takes a variable as an argument. I want to get the value of that variable in the function.\nI tried this:\nfunction(var1) {\n    var2 = var1;\n", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 17458}
{"pred": "       registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_SPEAK", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 6918}
{"pred": "   if gopts.event_log:\n      git_trace2_event_log.Write(gopts.event_log)\n\n    # If the user specified a subcommand, then run it.\n    if name in self.commands:\n      cmd = self.commands[name]", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 6062}
{"pred": "   @Provides @Singleton\n    SharedPreferences provideSharedPreferences() { return PreferenceManager.getDefaultSharedPreferences(app); }\n\n    @Provides @Singleton\n    SharedPreferences provideSharedPreferences(Context context) {\n        return PreferenceManager.getDefaultSharedPreferences(", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 32768}
{"pred": "       Assert.assertThat(ds, totalQueryCount(3));\n\n        // Expected: 3 query executions\n        // Actual: 4 query executions\n        // AssertionError should be thrown\n    }\n\n    @Test\n    public void testBatchCount() {\n", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 7315}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 15076}
{"pred": "       for (VerifierProperty verifierProperty : processor.getVerifiers()) {\n            VerifierBackground verifier = new VerifierBackground(verifierProperty);\n            verifiers.put(verifierProperty.getClass().getName(), verifier);\n            currentVerifiers.add(verifier);", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 23165}
{"pred": "           showProgress(false);\n        }\n    }\n\n    public void onPostRegisterExecute(Boolean success) {\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n\n        if (success) {\n            //Initialize database (once in application)", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 14896}
{"pred": "   DrupalUser getUser() throws DrupalFetchException;\n\n    /**\n     * returns a list of users (via user.get)\n     *\n     * @param uid the user ID to return\n     * @return a list of DrupalUser objects\n     * @throws", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 6041}
{"pred": "       for q in quirks:\n            if q.type == 'prefix':\n                self.textInput.changeTheme(q.quirk)\n            elif q.type == 'suffix':\n                self.textInput.changeTheme(q.quirk)\n            elif q.", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 11413}
{"pred": "           (r'/logout', LogOutHandler),\n            (r'/log', LogInHandler),\n            (r'/register', RegisterHandler),\n            (r'/login', LogInHandler),\n            (r'/logout', LogOutHandler),\n            (r", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 19429}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 14434}
{"pred": "               throw new ProtTestInternalException(\"Unknown criterion \" + criterion);\n        }\n\n        SelectionChunk selectionChunk = informationCriterion.getSelectionChunk();\n\n        return selectionChunk;\n    }\n\n    /* (non-Javadoc)\n", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 32768}
{"pred": "   return Pair(ty1, ty2, e1, e2)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn a simply typed argument into a Fst.\n    \n    Arguments:\n    - `expr`: an expression", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 5184}
{"pred": "   void inject(BatteryStatusIndicator batteryStatusIndicator);\n    void inject(AudioBookManager audioBookManager);\n    void inject(AudioBookPlayerModule audioBookPlayerModule);\n    void inject(DemoSamplesInstaller demoSamplesInstaller);\n    void inject(PlaybackService play", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 28536}
{"pred": "   private List<Expense> expenses;\n    private List<CreditPeriod> creditPeriods;\n    private List<CreditPeriod> creditPeriodsList;\n    private List<Expense> expensesList;\n    private List<CreditPeriod> creditPeriodsList2;", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 16771}
{"pred": "   response = Response(status_code=500, content_type='text/plain')\n    response.body = 'error'\n    response.json_body = {'error': 'something went wrong'}\n    response.text = 'error'\n    response.headers = {'Content-", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 5689}
{"pred": "\t/**\n\t * @param ctx\n\t */\n\tvoid enterCommandChain(CommandParser.CommandChainContext ctx) {\n\t\tatomicalConsole.getDocumentGraphEditor().getDocumentGraph().getCorpusGraphs().get(0).getDocumentGraph().getSDocumentGraph().getS", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 15288}
{"pred": "   except TextGridParseError as e:\n        self.return_dict[\"decode_error_files\"].append(e)\n\n\nclass Job:\n    \"\"\"\n    Job class for storing information about a file to be processed\n\n    Parameters\n    ----------\n    file_name", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 12684}
{"pred": "   api.add_resource(\n        PressureSensorResource,\n        \"/aircraft/sensors/pressure_sensor\",\n        resource_class_args=(sensors.pressure_sensor,)\n    )\n\n    api.add_resource(\n        Pitot", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 11303}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 5059}
{"pred": "   '--iq, --include-qualifiers Include qualifiers in the returned',\n    '--rc, --result-class CLASSNAME Filter the result set by result class',\n    '--rr, --result-role PROPERTYNAME Filter the result set by far end role',", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 7821}
{"pred": "\tprivate UserList userList;\n\t@Resource\n\tprivate SubmissionList submissionList;\n\t@Resource\n\tprivate ChallengeInManager challengeInManager;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate NewsServices newsServices;\n\t@Resource\n\t", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 30527}
{"pred": "                           logError(title + \" failed: \" + t.getMessage());\n                        } else if(exceptionClass.equals(InvalidOperationException.class)){Next line of code:\n                            logError(title + \" failed: \" + t.getMessage());\n                        } else if(exception", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 4549}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 15194}
{"pred": "\n  protected void setLocationManager(LocationManager locationManager) {\n    this.locationManager = locationManager;\n  }\n\n  protected void setPackageManager(PackageManager packageManager) {\n    this.packageManager = packageManager;\n  }\n\n  protected void setNotificationManager(", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 14040}
{"pred": "def get_static_info(file_path, file_md5):\n\n    unzip_dir = os.path.join(UPLOAD_DIR, file_md5)\n    unzip_result = Unzip(file_path, unzip_dir)\n    print 'len", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 6557}
{"pred": "# 44018, section 9.1\n# RRC procedures dictionnary\n# 44018, section 10.1\n# standard RRC header\n# 44018, section 9.1\n# RRC procedures dictionnary", "answers": ["class Header(Layer):"], "all_classes": null, "length": 26760}
{"pred": "\t\t\t\t# Create adjacency set\n\t\t\t\tadjac = CreateAdjSet(v_lh, v_rh, faces_lh, faces_rh, opts.vertexdist, opts.vertextriangularmesh, opts.vertexsrf, opts", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 20088}
{"pred": "     result.append(\" = :\").append(baseVariableName);\n    } else {\n      result.append(\" \").append(exp.getOperator()).append(\" :\").append(baseVariableName);\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 8911}
{"pred": "       cacheService.storeCacheList(new CacheList(listName));\n        cacheService.storeCaches(cacheService.getAllCaches());\n        cacheService.storeCaches(cacheService.getAllCaches());\n        cacheService.storeCaches(cacheService.getAllC", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 5836}
{"pred": "       # 1st: reserve space for the next header\r\n        self.append( shtr('') )\r\n        # 2nd: reserve space for the next header\r\n        self.append( shtr('') )\r\n        # 3rd: reserve space for the", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 25440}
{"pred": "                       TimeEntryOvertimeAggregation.class)\n        );\n\n        timeEntriesTable.getColumn(\"status\").setAggregation(\n                ScreensHelper.createAggregationInfo(\n                        projectsService.getEntityMetaPropertyPath(TimeEntry.class, \"", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 9004}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 18286}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 20821}
{"pred": "   self.key_size = read_u16le(f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 6498}
{"pred": "   user = create_inactive_user(email, full_name)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 5627}
{"pred": "\n\n\n Q: How to get the current date in a string format in python? I am trying to get the current date in a string format in python. I have tried the following:\nimport datetime\n\ntoday = datetime.datetime.now()\n\nprint(today)\n\nBut I am", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 15181}
{"pred": "   elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 8012}
{"pred": "   elif self.xsd_types is None:\n        for item in context.iter_self():\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 17062}
{"pred": "   DummySherpaServer server = new DummySherpaServer(\n        new DummyQueryResponder(10) {\n          public QueryResponse query(QueryRequest query)\n              throws AvroRemoteException {\n            return super.query(query);\n          }\n        });", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 17143}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tresult.setNormalizationOptions(new NormalizationOptions(get", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 10561}
{"pred": "                   MiPushClient.getInstance().init(this, \"100000000000000000000000000000000000000000000000000", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 4155}
{"pred": "   public static void main(String[] args) throws IOException, RoutingException\n    {\n        KadServer server = new KadServer(12345, new MessageFactory(null, null, null), null, new DefaultConfiguration());\n        server.startRefreshOperation();\n        server", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 9199}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 16920}
{"pred": "from web.routes.api_word import words_api\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 5187}
{"pred": "\tprivate Connector connector;\n\t@Inject\n\tprivate ConnectorProjects connectorProjects;\n\t@Inject\n\tprivate ConnectorIssues connectorIssues;\n\t@Inject\n\tprivate ConnectorComments connectorComments;\n\t@Inject\n", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 13170}
{"pred": "       handle = CreateEvent(bManualReset=False, bInitialState=False)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 7074}
{"pred": "\n    public static void main(String[] args) {\n        SpringDirectorClient client = new SpringDirectorClient(URI.create(\"http://localhost:8080\"), new RestTemplate());\n        client.info().info();\n    }\n}\n\n\n\n\n\n\n\n", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 4733}
{"pred": "                   return parserHolder.parse(roundEnv, currentAnnotatedElement, originatingElements);\n                })\n                .map(ParsedPath::new)\n                .collect(Collectors.toList());\n\n        if (parsedPaths.isEmpty()) {\n            messager", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 4634}
{"pred": "   protected PageHandler pageHandler;\n\n    protected CrawlerRequest currentRequest;\n\n    protected CrawlerRequest lastRequest;\n\n    protected CrawlerRequest firstRequest;\n\n    protected CrawlerRequest lastRequest;\n\n    protected CrawlerRequest firstRequest;\n\n", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 5895}
{"pred": "           actionPopupGroup.add(new EditMongoDocumentAction(this));\n            actionPopupGroup.add(new DeleteMongoDocumentAction(this));\n            actionPopupGroup.add(new CopyNodeAction(this));\n            actionPopupGroup.addSeparator();\n           ", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 14530}
{"pred": "   private GuiScrollingPanel pms;\n    private GuiPanel settings;\n    private GuiScrollingPanel filters;\n    private GuiScrollingPanel colors;\n    private GuiScrollingPanel advanced;\n\n    private GuiButton save;\n    private GuiButton close", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 19151}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new BtnClear", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 10901}
{"pred": "       form.setHeaderVisible(true);\r\n        form.setText(Messages.configurationEditorWebModulesSection);\r\n        form.setWidth(300);\r\n        form.setHeight(200);\r\n        form.setLayout(new GridLayout(1, false));\r\n       ", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 8177}
{"pred": "\n    def test_type_get_sample__return_default_sample(self):\nNext line of code:\n\n    def test_type_get_sample__return_default_sample(self):\nNext line of code:\n\n    def test_type_get_sample__return", "answers": ["        type = Type()"], "all_classes": null, "length": 3856}
{"pred": "               new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetEndTimeCommand.class, EndEvent::fromCommand, this::queueEvent));\n        commandProcessor.", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 21313}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _datas", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 5772}
{"pred": "   if frob != '':\n        frob = frob.replace('%20', ' ')\n        frob = frob.replace('%3A', ':')\n        frob = frob.replace('%2C', ',')\n        frob = frob.", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 7308}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 17177}
{"pred": "   if bytecode[k][2] == BINARY_OR:\n      cond_stack_size += 1\n      k += 1\n    else:\n      cond_stack_size -= 1\n      k += 1\n\n    condition_bytecode.insert(0,", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 18801}
{"pred": "   private static final String TAG = OverviewFragment.class.getSimpleName();\n\n    //DATA\n    int activeCreditCardId = -1;\n    CreditCard activeCreditCard = null;\n\n    //UI\n    private ScrollView scrollView;\n    private TextView", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 19248}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\n\n\nclass LanguageAdmin(admin.ModelAdmin):\n    list_display = ('lang_name', 'lang_slug',", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 5844}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 27727}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 8840}
{"pred": "           //trying to get chat with chatId from server\r\n            try {\r\n                chat = MessageTask.getInstance().getChat(chatId);\r\n                latestMessageOnDisplay = new AtomicLong(0);\r\n            } catch (Exception e) {\r\n                Log.e(this.", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 24974}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 32768}
{"pred": "def complete_facebook(request):\n    redirect_uri = request.build_absolute_uri(reverse('complete-facebook'))\n    try:\n        code = request.GET[\"code\"]\n    except KeyError:\n        # Guess they cancelled. That's cool.\n        return", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 7470}
{"pred": "       assertThat(qe, is(batchStatement()));\n        assertThat(qe, isBatchStatement());\n        assertThat(qe, isPrepared());\n        assertThat(qe, isBatchPrepared());\n        assertThat(qe, isPreparedOr", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 10851}
{"pred": "   } else if (Utils.getXmlNodeValue(doc, TAG_INPROGRESS) != null) {\n      log(\"server response is: in progress \" + getFileNames(), null);\n      successful = true;\n      if (onSubmitComplete) {\n        log(\"POST", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 4472}
{"pred": "def merge_assembly_points(assembly_points_by_source):\n    unique_assembly_points = defaultdict(list)\n\n    for assembly_points in assembly_points_by_source.values():\n        for assembly_point in assembly_points:\n            seq1, seq2", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 7773}
{"pred": "   api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n\n Q: How to get the current page URL in a web page?", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 11288}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 12182}
{"pred": "\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\tgetString(R.string.install_levels),\n\t\t\t\t\t\t\tgetString(R.string.install_levels_confirmation),\n\t\t\t\t\t\t\tnew Runnable() {\n", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 24566}
{"pred": "   private final WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /**\n     * Defines the calendar's first visible day of week.\n     */\n    private int firstVisibleDayOfWeek = 1;\n\n    /**\n     * Defines the calendar's last visible", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 15610}
{"pred": "\n    public static void main(String[] args) {\n        SpringDirectorClient client = new SpringDirectorClient(new URI(\"http://localhost:8080\"), new RestTemplate());\n        client.info().info();\n    }\n}\n\n\n\n\n\n\n\n\n", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 4775}
{"pred": "   VerifierProvider rsaLocatorFromRuby =\n        new DefaultPublicKeyLocator(\n            new IdentityServerDescriptorProvider(\n                new IdentityServerDescriptorProvider.IdentityServerDescriptorResolver() {\n                  @Override\n                  public ServerDescriptor resolve(URI uri) {\n                    return", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 6682}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n\n    protected int mItemViewType;\n    protected int mItemViewLayoutId;\n\n    protected List<BaseAnimation>", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 7475}
{"pred": "                   assertTrue(retrievedContent.length == content.length);\n                } catch (IOException e) {\n                    fail(e.getMessage());\n                }\n            }\n\t\t\t\n\t\t\t// Clean up \n\t\t\tclient.deleteObject(containerName", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 32768}
{"pred": "                   trackHistoryRepository.getLastInsertedHistoryItem((trackHistoryEntry, dao) -> {\n                        if (trackHistoryEntry != null && trackHistoryEntry.title.equals(liveInfo.getTitle())) {\n                            // Prevent from generating several same entries when rapidly doing pause and", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 15644}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 20153}
{"pred": "                       ((CandyBarMainActivity) mContext).selectPosition(3);\r\n                        break;\r\n                    case REQUEST:\r\n                        ((CandyBarMainActivity) mContext).selectPosition(4);\r\n                        break;\r\n                    case WALLPAPERS:\r\n                ", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 22170}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 7325}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 29319}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 12421}
{"pred": "   if gopts.editor:\n      editor = cmd.client.editor\n      if editor is None:\n        print(\"repo: fatal: no editor specified\", file=sys.stderr)\n        return 1\n      else:\n        editor.SetEditor(gopts.editor)\n", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 6003}
{"pred": "               // 执行任务日志\n                taskData.setRanTimes(taskData.getRanTimes() + 1);\n                // 执行任务日志\n                taskData.setResultData(taskRunner.runTask(taskData));\n", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 22602}
{"pred": "       r.reject_set = set()\n        r.match_filter = None\n        r.exception_class = None\n        r.engine = None\n        r.performed = defaultdict(dict)\n        r.confirmation_factor = 1\n        r.soft_", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 5892}
{"pred": "       //用户的性别\n        stuSex = split[2];\n        //用户的学院\n        stuSchool = split[3];\n        //用户的班级\n        stuClass = split[4];\n        //", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 7520}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 8829}
{"pred": "   def serialize_player(self, player: Player) -> bytes:\n        state = {}\n        self.add_basic_properties(state, player)\n        state[\"inventory\"] = [item.serialize_item for item in player.inventory]\n        state[\"known_loc", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 18728}
{"pred": " public Query visit(BasicSearchType n, Query query) {\r\n    Operator op = orderOfOps.get(0);\r\n\r\n    if (op != Operator.PROXIMITY) {\r\n      return visitBooleanOp(new VisitOrd1(n), query, op", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 16703}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = false;\n\t}\n\n\tpublic ParameterizedGenerationService(PipelineGenerator pipelineGenerator, ValorizatorParameters valorizatorParameters, Validator validator, SchemaValidator schemaValidator,", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 19641}
{"pred": "       try {\r\n            if (dataDecoder.equals(\"UnicodeDecoder\")) {\r\n                decoder = new UnicodeDecoder();\r\n            } else if (dataDecoder.equals(\"DataDecoder\")) {\r\n                decoder = new DataDecoder();\r\n            } else if (dataDec", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 9546}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 21703}
{"pred": "       cursorById.close();\n\n        MovieSelection where = new MovieSelection();\n        where.id(movieRowId);\n        Cursor cursorById = mContext.getContentResolver().query(MovieColumns.CONTENT_URI,null,where.sel(),where.args(),null);\n", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 25197}
{"pred": "       DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 13676}
{"pred": "def etree_iter_paths(elem: Union[DocumentNode, ElementNode], with_root: bool = True) \\\n        -> Iterator[Tuple[ElementNode, str]]:\n\n    _root: Union[ElementProtocol, LxmlElementProtocol]\n    _lxml_", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 7250}
{"pred": "\t\tsetContentView(R.layout.map_view_activity);\n\t\tmapView = (MapView) findViewById(R.id.mapView);\n\t\tmapView.setBuiltInZoomControls(true);\n\t\tmapView.setSatellite(false);\n", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 7911}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 32768}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 10429}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 22437}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 18555}
{"pred": "   # TODO: we should only search and get phases that have the same sublattice_site_ratios as the phase in the database\n    desired_data = datasets.search(\n        (tinydb.where('output').test(lambda x: x in prop)) &\n        (tiny", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 6944}
{"pred": "\n\n\n Q: How to get the value of a variable in a function? I have a function that takes a variable as an argument. I want to get the value of that variable in the function. How can I do that?\nfunction get_value(var_name) {\n    var value", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 10947}
{"pred": "   def get_word_frequency(self):\n        \"\"\"\n        Calculate the relative word frequency across all the texts in the corpus\n\n        Returns\n        -------\n        dict[str, float]\n            Dictionary of words and their relative frequencies\n        \"\"\"\n        word_counts", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 20483}
{"pred": "   private static final String TAG_EXTRA_CAMERA_FACING = \"tagExtraCameraFacing\";\n    private static final String TAG_EXTRA_CAMERA_RESOLUTION = \"tagExtraCameraResolution\";\n    private static final String TAG", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 29939}
{"pred": "\t\tif (this.is_a_string) {\n\t\t\tthis.is_a_string = false;\n\t\t\tthis.is_a_string = true;\n\t\t}\n\t\telse {\n\t\t\tthis.is_a_string = false;", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 17232}
{"pred": "       return MongoConfiguration.getInstance(project).getServerConfigurations();\n    }\n\n    private void installActions() {\n        DefaultActionGroup actionGroup = new DefaultActionGroup();\n        actionGroup.add(new MongoServerAction(MongoServerAction.ADD_ACTION));\n        action", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 12551}
{"pred": "\t\tFluent header = container.header();\n\t\theader.h1(H1(Css.H1, \"TodoMVC\"));\n\t\theader.input(Input(Css.Input, \"Add Todo\"));\n\n\t\t// Footer with H1 and", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 11249}
{"pred": "               if(output != null) {\n                    Intent intent = new Intent(CameraActivity.this, CameraActivity.class);\n                    intent.putExtra(\"output\", output);\n                    startActivity(intent);\n                }\n            }\n        });\n\n        /**\n         * Initialize", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 32768}
{"pred": "\n    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        mActivity = (MainActivity) getActivity();\n\n        mRecyclerView = (RecyclerView) getView().findViewById(R.id.recycler_", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 21599}
{"pred": "   assert check_hash_key(query_on, key)\n\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_single_range_key_success(model, index):\n    \"\"\"Single key condition: equality comparison on", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 13125}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        addChart();\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,int id,String gcActivityName) {\n        addChart();\n    }\n", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 10518}
{"pred": "from floranet.web.rest.appproperty import RestAppProperty, RestAppPropertys\n\n\n\n\n\n Q: How to get the value of a variable in a function? I have a function that takes a variable as an argument. I want to get the value of that variable in", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 10831}
{"pred": "   def __init__(self, directory, settings_ini, default_dirs=True, tree_view=None, main_control=None,**kwargs):\n\n\n\n\n Q: How to get the current page URL in a web page? I am trying to get the current page URL", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 15356}
{"pred": "   parser.parser.add_argument(\n        \"--reordering\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"round trip packet reordering rate [%%]. the valid range is from {:d}\n        to {:d}. (default", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 13807}
{"pred": "   private final static TexturedModal MODAL = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n\n\n    private static final int MODAL_WIDTH = 254;\n   ", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 16279}
{"pred": "        */\n        void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface DateClickListener24h {\n        /**\n         * Triggered when a date was clicked\n         *\n         * @", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 25855}
{"pred": "   def set_db_type(self, db_type):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 9048}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onPing(client);\n            break;\n        }\n\n        case MESSAGE: {\n            Namespace namespace = namespacesHub.get(packet.getNsp());\n", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 11335}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private StarTask starTask;\n    private StarContentTask", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 19364}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 25113}
{"pred": "   PCollection<GCPProject> liveProjects =\n        pipeline.apply(\"Read live projects\",\n            new LiveProjectSource(org));\n    // Convert projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 8385}
{"pred": "class MyModel(BaseModel):\n    class Meta:\n        backups = {\"enabled\": True}\n        billing = {\"mode\": \"provisioned\"}\n        encryption = {\"enabled\": True}\n        stream = {\"include\": {\"old\", \"new\"}}\n        ttl = {\"", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 7649}
{"pred": "   def __init__(self, emb_dim, emb_def_dim, dim, num_input_words, def_num_input_words,\n                 num_output_words,\n                 vocab, retrieval=None,\n                 def_reader='LSTM',\n                 stand", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 9803}
{"pred": "   // private final boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isTyping;\n    // Guarded by _lockObject.\n    private boolean _is", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 8484}
{"pred": "   private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n    private int videoDuration;\n   ", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 10291}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 16888}
{"pred": "   def get_form(self, form_class):\n        if self.object.is_active:\n            form = form_class(self.object)\n        else:\n            form = form_class()\n        return form\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 6095}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 12008}
{"pred": "\t\treturn this.handle.readMatrixBlock(path, blockSizeX, blockSizeY, nbBlocksX, nbBlocksY); // TODO does not work if too big array\n\t}\n\t\n\tpublic String[] readStringBlock(String path, int blockSizeX,", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 32768}
{"pred": "   public static void main(String[] args) {\n        // TODO Auto-generated method stub\n\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 5865}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 18344}
{"pred": "   def __init__(self, *args, **kwargs):\n        super(ManagersMixin, self).__init__(*args, **kwargs)\n        self.inventory_manager = InventoryManager()\n        self.packages_manager = PackagesManager()\n        self.job", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 13607}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\"Service discovery file was cached, retrieving it.\");\n\t\t\tServiceDiscoveryInfo serviceDiscoveryInfo = cache\n\t\t\t\t\t.retrieveCachedServiceDiscoveryInfo(city);", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 11170}
{"pred": "       if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue creada con éx", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 5424}
{"pred": "   self._cstr = root.data[1]\n    self._live = set()\n    worklist = [root]\n    while worklist:\n      cur = worklist.pop(0)\n      if isinstance(cur, Ref):\n        self._live.add(cur", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 6239}
{"pred": " private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<MessageAction>        messageActionSupportHandler        = new ActionSupportHandler<MessageAction>(MessageAction.class", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 8330}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 12340}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\n    assert_array_equal", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 11715}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 24188}
{"pred": "\t\t\tif model_item is None:\n\t\t\t\treturn default_flags\n\t\t\telse:\n\t\t\t\treturn model_item.flags\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel::flags\")\n\t\t\tprint(str(e", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 31405}
{"pred": "\n    def test_hydrate_object__none(self):\n\n        version1 = Version()\n        version1.name = \"v1\"\n        version2 = Version()\n        version2.name = \"v2\"\n\n        versions = {\"v1\": version1,", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 7391}
{"pred": "         FASTDecoder decoder = new FASTDecoder(catBytes, clientConfig);\n          FASTReaderReactor reader = new FASTReaderReactor(decoder);\n          PipeReader pipeReader = new PipeReader(reader);\n          PipeBundle pipeBundle = Pipe", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 23718}
{"pred": " to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UN", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 14233}
{"pred": "               containsString(\"\\\"_index\\\":\\\"\" + mapping.getIndex() + \"\\\"\"));\n    }\n\n    @Test\n    public void storeWithSuggest() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadGetRecordsResponse(Resources.asByte", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 12989}
{"pred": "   def parse(self, packet):\n        super(PubKeyV4, self).parse(packet)\n        self.created = packet[0]\n        del packet[0]\n\n        self.pkalg = packet[0]\n        del packet[0]\n\n        self", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 18314}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n\n\t", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 24928}
{"pred": "                       res = Schema.get(\n                            new ExtMap().mput(\n                                Schema.InvokeKeys.ENTITY,\n                                context.get(Schema.InvokeKeys.ENTITY, ExtUUID.class)\n                            )\n                            .mput(\n", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 32768}
{"pred": "url(r'^users/$', users_list, name='users-list'),\nurl(r'^users/new/$', new_user, name='new_user'),\nurl(r'^users/edit/(?P<pk>[-\\w]+)/$', edit_user,", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 6868}
{"pred": "                           if (PreferenceManager.getDefaultSharedPreferences(getActivity())\n                                    .getBoolean(SettingsActivity.KEY_PREF_PLAY_SHUFFLE_TEST, true)) {\n                                stack.shuffle();\n                            }\n                        }\n                   ", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 29042}
{"pred": "   public static void main(String[] args) {\n        new MentalityHealthActivity().run();\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_mentality_", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 13325}
{"pred": "       obj.socketTags = []\n        obj.socketTags.append(ConnectorTag())\n        obj.socketTags.append(SocketLabel())\n        obj.socketTags.append(BlockLabel())\n        obj.socketTags.append(BlockConnectorShape())\n        obj.socketTags", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 32768}
{"pred": "       d1 = Constant(d1, DP_WIDTH)\n        d2 = Constant(d2, DP_WIDTH)\n        d3 = Constant(d3, DP_WIDTH)\n\n        d1 = Constant(d1, DP_WIDTH)\n        d2", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 15030}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 4527}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Add the listeners\n\t\tgetServer().getPluginManager().registerEvents(playerListener, this);\n\t\tgetServer().getPluginManager().registerEvents(blockListener, this);\n\t\t\n\t\t//", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 18479}
{"pred": "       String challengeData = doc.getText();\n        String hash = StringUtils.hash(challengeData);\n        if (connection.getSASLMechanism() == null) {\n            connection.setSASLMechanism(new SASLMechanism.Challenge(", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 9447}
{"pred": "\n\nclass TestCipher(unittest.TestCase):\n    \"\"\"Test cryptographic primitives.\"\"\"\n\n    def setUp(self):\n        self.ciphers = [\n            BvFunction(LeaCipher, 1),\n            BvFunction(Le", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 13773}
{"pred": "   private SongListAdapter mAdapter;\n\n    private Toolbar mToolbar;\n\n    private FastScroller mFastScroller;\n\n    private boolean mShowToolbar = true;\n\n    private boolean mShowFastScroller = true;\n\n    private boolean mShow", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 21204}
{"pred": "           mSpectaculumView.selectEffect(effect);\n            mSelectedEffect = effect;\n            mSelectedEffect.addListener(this);\n            return true;\n        }\n        if(effect instanceof ImmersiveEffect) {\n            mImmersiveSensorNavigation = new", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 25050}
{"pred": "       Bit('ESM_Cause', Pt=0, BitLen=4, Dict=ESMCause_dict, Repr='hum'),\n        Bit('ESM_Info', Pt=0, BitLen=4, Dict=ESM_dict, Repr='hum", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 25797}
{"pred": "           //TODO recycler oldValue ?\n        }\n    };\n\n    private SongLoader.OnSongSelectedListener mOnSongSelectedListener = new SongLoader.OnSongSelectedListener() {\n        @Override\n        public void onSongSelected(List<Song> song", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 21648}
{"pred": "   def _load_corpus_from_source_mp(self) -> None:\n        \"\"\"\n        Load a corpus without using multiprocessing\n        \"\"\"\n        begin_time = time.time()\n        sanitize_function = None\n        if hasattr(self,", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 26768}
{"pred": "\t@Override\n\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user.getUsername(), user.getPassword(),\n\t\t\t\tuser.getCallbackServiceUri(), user.getCallbackServiceWsdlUri(),\n\t\t\t\t", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 21026}
{"pred": "   @GET(\"shodan/host/search\")\n    Observable<HostReport> hostSearch(@Query(Constants.KEY) String apiKey,\n                                      @Query(Constants.QUERY) String query,\n                                      @Query(Constants.FACETS) String facets", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 8061}
{"pred": "   public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.name(), message.value());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 10551}
{"pred": "   \"\"\"\n    Example from the paper \"Auditory Filter Banks: A Review\" by Slaney.\n    \"\"\"\n    return gammatone(freq, bandwidth)\n\n\nclass TestPhon2dB(object):\n\n  @p((\"loudness\",", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 7295}
{"pred": "def read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset):\n    \"\"\"Read and return a Sequence -- i.e. a list of Datasets\"\"\"\n\n    # Read the next item in the sequence\n   ", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 19653}
{"pred": "   try {\n      final T expressionContext = proxyBuilder.build();\n      CoordinatesWalker walker = new BaseCoordinatesWalker(document) {\n        @Override\n        protected void onParagraph(ParagraphCoordinates paragraphCoordinates) {\n          resolveExpressionsForPar", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 11130}
{"pred": "   @SystemService(Context.INPUT_METHOD_SERVICE)\n    InputMethodManager inputMethodManager;\n\n    @SystemService(Context.INPUT_METHOD_SERVICE)\n    InputMethodManager inputMethodManager;\n\n    @SystemService(Context.IN", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 10044}
{"pred": "   @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags = self.bytes_to_int(val)\n\n    @sdproperty\n    def data(self):\n        return self._data\n\n    @data.register(", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 5440}
{"pred": "   @QtCore.pyqtSlot()\n    def addMessage(self, lexmsg, chum):\n        if not self.chumopen:\n            self.chumopen = True\n            self.chum = self.mainwindow.profile()\n            self.history.reset", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 11382}
{"pred": "def check(arg, env):\n    if isinstance(arg, _StringLike):\n        return arg\n    elif isinstance(arg, (list, tuple)):\n        return Tuple(check(i, env) for i in arg)\n    elif isinstance(arg, (dict,", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 6187}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 12857}
{"pred": "   if features is None:\n        features = {}\n    else:\n        features = OrderedDict(features)\n\n    # TODO: we should only search and get phases that have the same sublattice_site_ratios as the phase in the database\n    desired_data = get", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 9403}
{"pred": "   @Override\n    public void performWorkAndUpdatePlayerUI(@NonNull FsmPlayer fsmPlayer) {\n        super.performWorkAndUpdatePlayerUI(fsmPlayer);\n\n        if (isNull(fsmPlayer)) {\n            return;\n        }\n\n        pausePlayer", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 12189}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            TemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type ==", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 23042}
{"pred": "   @GET(\"suggest\")\n    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds);\n\n    @GET(\"suggest\")\n    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> service", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 4905}
{"pred": "   def delete(self, model_or_index, key, filter=None, projection=None, consistent=False, forward=True):\n        \"\"\"Delete one or more objects.\n\n        :param model_or_index: A model or index to delete.  For example, ``User``", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 14363}
{"pred": "   self.log.info(\"confusion matrix:\")\n    self.plot_confusion_matrix(confusion_matrix, data_set.label_map.keys(), normalize=True)\n Q: How to get the current page URL in a web page? I am trying to get", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 8986}
{"pred": "\t@Autowired\n\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate Subject subject;\n\t@Resource\n\tprivate BannedIpServices bannedIp", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 16856}
{"pred": "   def query(self, first_entity, *entities):\n        return Query(self, (first_entity,) + entities)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 13578}
{"pred": "   @scoped_subgraph\n Q: How to get the value of a variable in a function? I have a function that takes a variable as an argument. I want to get the value of that variable in the function.\nI tried this:\nfunction get_value(var_name)\n", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 7884}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\nall_platform_names = []\nNext line of code:\nfor platform in Platform.objects.all():\n    all_platform_names.append(platform.platform", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 5786}
{"pred": "   @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(ExpressionGroupNode node", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 8897}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 25914}
{"pred": "       final int numberOfRuns = benchRes.getNumberOfResult(AbstractMeter.class);\n        final int numberOfMethods = benchRes.getNumberOfResult(MethodResult.class);\n        final int numberOfClasses = benchRes.getNumberOfResult(ClassResult", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 14139}
{"pred": "   self._block_nodes[self.entry].data.jumps = get_cfg_tmp_values(self.entry_node)\n    self._block_nodes[self.exit].data.jumps = get_cfg_tmp_values(self.exit_node)\n    self", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 18751}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 7012}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 23517}
{"pred": "                   else if (Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(event.type)) {\n                        RoomMember member = JsonUtils.toRoomMember(event.content);\n                        RoomMember.MEMBERSHIP membership = member.memb", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 32768}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate DDI32ToDDI33Preprocessor ddi32ToDDI33 = new DDI32", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 24281}
{"pred": "   def OnGenerationEtatsPresence(self, _):\n        site = self.GetSelectedSite()\n        annee = self.presences_choice.GetClientData(self.presences_choice.GetSelection())\nNext line of code:\n    def OnGeneration", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 32768}
{"pred": "   def compute_angular_momentum_hessian(self, p):\n        \"\"\"\n        Returns the Hessian tensor :math:`H(q)` such that the rate of change of\n        the angular momentum with respect to point `P` is\n\n        .. math::\n\n", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 13458}
{"pred": "       View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n        }\n\n        if (queuedProjectResult != null) {\n            name.setText(queuedProjectResult.queuedProject.name);\n           ", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 18905}
{"pred": "               new VirtualBalanceCommand(),\n                new VirtualEconCommand(),\n                new VirtualRemoveCommand(),\n                new VirtualSetCommand(),\n                new VirtualPayCommand(),\n                new VirtualBalanceCommand(),\n                new VirtualEconCommand(),\n                new VirtualRemoveCommand(),\n                new VirtualSet", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 31264}
{"pred": "def setup_context(dbf, datasets, symbols_to_fit=None, data_weights=None, phase_models=None, make_callables=True):\n    \"\"\"\n    Set up a context dictionary for calculating error.\n\n    Parameters\n    ----------\n   ", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 8858}
{"pred": "   return Const.fromValue(arg)\n  elif op == LOAD_NAME:\n    return Ref.fromName(arg)\n  elif op == LOAD_ATTR:\n    return Ref.fromName(arg)\n  elif op == LOAD_FUNCTION:\n    return", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 6834}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 11871}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensor", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 22344}
{"pred": "\tpublic List<AuthorWithBooks> findAll() {\n\t\treturn authorRepository.findAll().stream().map(AuthorWithBooks::new).collect(Collectors.toList());\n\t}\n\n\t@Transactional(readOnly = true)\n\tpublic List<AuthorWith", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 5886}
{"pred": "\tpublic SQLQuery getRootQuery() {\n\t\treturn rootQuery;\n\t}\n\n\tpublic SQLQuery getRootQuery(Env env) {\n\t\treturn rootQuery;\n\t}\n\n\tpublic SQLQuery getRootQuery(Env env, SQLQuery query) {\n\t\t", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 7822}
{"pred": "       if app_info['is_activity']:\n            install_and_run(DYNAMIC_TOOL_DIR, file_path, app_info['package'], app_info['launcher'], True)\n        else:\n            install_and_run(DYNA", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 7457}
{"pred": "   Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return ancestries.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into ancestries\n     */\n", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 4080}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type},\n    )\n\n\ndef test_dict():\n    inc_type = Func[[Int", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 6489}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, prepared());\n        assertThat(pe, batchPrepared());\n        assertThat(pe, prepared", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 11320}
{"pred": "\t\t\tself._properties_dock.set_item(selection[0])\n\t\t\tself._properties_dock.set_item(selection[0])\n\t\t\tself._properties_dock.set_item(selection[0])\n\t\t\tself._properties_", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 32768}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return null;\n            }\n        };\n        _config = config;\n        mAdapter = new RestAdapter.Builder()\n", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 21641}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\n\t\tregisterRenderer(Token.class, new DefaultObjectRenderer());\n\t\tregisterRenderer(ErrorEntry.class, new DefaultObjectRenderer());\n\t\tregisterRenderer(String.class, new DefaultObjectRenderer());\n\t", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 5836}
{"pred": "\t\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final FacetSubQueryType getFacetSubQueryType(SearchConfig config, Element elt) throws SearchConfig", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 11792}
{"pred": "   url(r'^new/(?P<package_name>[\\w\\-\\+]+)$', staff_member_required(AddCIPipeline.as_view(), login_url=LOGIN_URL), name=\"add-ci-pipeline-package\"),\n    url(r'", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 21740}
{"pred": "                       if (bitmap != null) {\r\n                            intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        }\r\n                        intent.putExtra(Extras.EXTRA_SIZE, mWallpapers.get(position).getSize());\r\n                ", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 31938}
{"pred": "def signin_facebook(request):\n    query = {\n        'api_key': settings.FACEBOOK_KEY[0],\n        'scope': 'email,user_photos,user_videos,user_about_me,user_friends,user_birth", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 7399}
{"pred": "               # Compute the pointing direction and magnitude corrected for vignetting and extinction\n                #   (if the corner is below the elevation limit, the *_elev value will be -1)\n                #   (if the corner is below the elevation limit, the *_elev", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 32768}
{"pred": "   grid = _gen_grid(data, options)\n    \n    # Compute likelihood across grid\n    likelihood = _grid_likelihood(data, options, grid)\n    \n    # Compute integral of posterior surface\n    integral = _calc_integral(likelihood,", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 13232}
{"pred": "           Board.this.rollDices();\n          }\n      }\n    });\n    rollBtn.setX(getX() + (boardbg.getWidth() - rollBtn.getWidth()) / 2);\n    rollBtn.setY(getY() + (boardbg.", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 32768}
{"pred": "   for child in root:\n        if callable(child.tag):\n            # a comment or a process instruction\n            yield child, f'/comment()[{comment_nodes[child.tag]}]'\n            continue\n\n        yield child, f'/processing-instruction({child", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 7208}
{"pred": "\nclass TestContentSampling(TestCase):\n\n    def setUp(self):\n        self.rule = ContentSampling()\n        self.engine = FakeEngine()\n        self.runner = Pipeline(engine=self.engine)\n        self.runner.add(ContentHash", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 6455}
{"pred": "   cfecancelamento = CFeCancelamento(\n            chCanc=_opcao('--ch-canceled-cfe-ch-canc'),\n            CST=_opcao('--cnpj-ac'),\n            signAC=_opca", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 16823}
{"pred": "   List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a user name.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a user name\n    ", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 3947}
{"pred": "           EtsiResponse resp = this.client.sendRequest(req);\n            \n            // 5. Get SignatureResponse\n            EtsiResponse resp2 = this.client.getResponse(resp);\n            \n            // 6. Get SignatureValue\n            SignatureValue sigVal =", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 14951}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 31279}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 23055}
{"pred": "\tprivate List<PlayerOverview> playerOverview;\n\tprivate List<TeamLeaders> teamLeaders;\n\tprivate List<TeamScheduleResponse> schedule;\n\tprivate List<TeamRosterResponse> rosterResponse;\n\tprivate List<TeamLeadersResponse>", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 6316}
{"pred": "       AppliverySdk.Logger.log(\"Send feedback\");\n        FeedbackUseCase feedbackUseCase = FeedbackUseCase.Companion.getInstance();\n        feedbackUseCase.sendFeedback(userFeedback, new Function1<Unit>() {\n            @Override\n            public", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 10908}
{"pred": "           table_index[table_name] = obj.Meta.indexes\n            object_index[table_name] = obj.Meta.columns\n            request[table_name] = key\n\n        # noinspection PyProtectedMember\n        request = {\n            \"TableName", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 14220}
{"pred": "   async def list_keys(self, user=None, with_art=False):\n        backend = await self.open_backend()\n        key_list = (await backend.list_keys(user))\n        self.print_key_list(key_list, with_art=", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 13861}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 12576}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 18518}
{"pred": "def node_nilled(obj: Any) -> Optional[bool]:\n    if is_element_node(obj):\n        return obj.get(XSI_NIL) in ('true', '1')\n    return None\n Q: How to get the value of a variable in a", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 7242}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:Next line of code:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 26087}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 17459}
{"pred": "   private final OkHttpClient httpClient;\n\n    private final String url;\n    private final Headers headers;\n\n    private final String userAgent;\n\n    private final OAuth2Requester requester;\n\n    private final String redirectUri;\n    private final String state;\n", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 11474}
{"pred": "   private final Tasks tasks;\n    private final Vms vms;\n    private final Errands errands;\n    private final Jobs jobs;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 4587}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 13290}
{"pred": "       return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand();\n    }\n\n    /**\n     * {@in", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 15034}
{"pred": "   @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        super.drawComponent(mouseX, mouseY);\n        if (this.isEnabled()) {\n            if (this.isHovered()) {\n                this.drawModalCorners(", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 7561}
{"pred": "           DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);\n        double[] d3 = price_Sad_Automatic(\n            DATA[looptest], \n            DATA[looptest+1], \n", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 11539}
{"pred": "           VotingModule.class,\n            PlayerFreezeModule.class,\n            SpectatorModule.class,\n            ChatModule.class,\n            VotingModule.class,\n            PlayerFreezeModule.class,\n            SpectatorModule.class,\n            ChatModule.class", "answers": ["            VotingModule.class"], "all_classes": null, "length": 15717}
{"pred": "   public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize download queue thread pool size.\n     * @return {@link DownloadQueue}.\n    ", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 9778}
{"pred": " public void init(MutableConfig config) {\n    // nothing to do\n  }\n\n  @Override\n  public void configure(MutableConfig config) {\n    // nothing to do\n  }\n\n  @Override\n  public void watch(Config config, WatcherRegistry registry) {", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 6520}
{"pred": "    * @throws JMingoParserException {@link JMingoParserException}\n     */\n    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {\n        Validate.notNull(element, \"parseQuerySetConfigTag::element cannot be null", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 4269}
{"pred": "\n\n\n Q: How to get the value of a variable in a function? I have a function that takes a variable as an argument. I want to get the value of that variable in the function.\nI tried this:\nfunction get_value(var_name)\n{\n    var_", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 5244}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 20301}
{"pred": "   BvNot, BvNeg, BvNot, BvNeg, BvNot, BvNot, BvNot, BvNot, BvNot, BvNot, BvNot, BvNot, BvNot, BvNot, BvNot, B", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 19636}
{"pred": "\t\t\tnew APP2Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew DQTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew DHTSegment", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 11901}
{"pred": "           if (type == HibiscusExportType.SAMMEL) {\n                HibiscusExporter exporter = new HibiscusExporter(\n                        NamiBeitragConfiguration.getInstance());\n                exporter.exportSammelLastschrift(sl,\n", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 19234}
{"pred": "   def generate_pronunciations_arguments(\n        self,\n        log_path: str,\n        dictionaries: List[str],\n        text_int_paths: Dict[str, str],\n        word_boundary_paths: Dict[str, str],\n", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 12648}
{"pred": "       Lore lore = LoreLoader.getLore(category, ident);\n\n        if (lore != null) {\n            ItemStack stack = new ItemStack(ItemLorePage.class, 1);\n            ItemLorePage.setLore(stack, key);", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 6202}
{"pred": "   private static final DateTimeFormatter REPORT_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM yyyy\");\n\n\n    private final UserDAO userDAO;\n    private final BudgetDAO budgetDAO;\n    private final CategoryDAO categoryDAO;", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 11438}
{"pred": "\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(CloudUtil.getMyIP());\n\t\tSystem.out.println(CloudUtil.getMyIPPrivate());\n", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 18748}
{"pred": "   FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInYaxis(FlipInYaxis.class),\n    Flip", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 16757}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if verbose_level >= 1:\n        smart_print(\"Search problem:\")\n        smart_print(problem)\n\n    if verbose_level >= 2:\n        smart_print(\"Initial", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 32768}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 5133}
{"pred": "   def __get_device_qdisc_major_id(self):\n        if self.__is_ipv6:\n            return self.__get_unique_qdisc_major_id()\n\n        return self.__get_unique_netem_major_id()\n\n", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 10775}
{"pred": "   assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 23387}
{"pred": "    * @return a List of Expenses\n     */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses =", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 11793}
{"pred": "   private CalendarController<MonthCalendarConfiguration, Calendar> controller;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> controller;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> controller;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> controller;\n\n    private CalendarController", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 12803}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 7758}
{"pred": "   def unify(t1, t2, backref=None):\n        \"\"\"Unify `t1` to match `t2`\n\n    After unification `t1` should be equal to `t2` or `t1` would be\n    a subtype of `t", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 6071}
{"pred": "       self.available = False\n        self.auth = Auth(self)\n        self.api = api.API(self)\n        self.blink = api.Blink(self)\n        self.cameras = api.Cameras(self)\n        self.events =", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 7705}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 31409}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 9818}
{"pred": "       assertThat(out.toString(), equalTo(\"[remotely-observed-thread]\"));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaCliWithAuth() throws Exception {\n        TestThread.JMXProcess process = disposer.register", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 18686}
{"pred": "       data.setOperation(DrumOperation.UPDATE);\n        return data;\n    }\n\n    @Test\n    void testCheckUpdate() throws Exception {\n        try (SimpleDataStore<PLDTestData> dataStore = new SimpleDataStoreImpl<>(this.testDir + \"/", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 13887}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 7739}
{"pred": "       return new RoxanaPropertiesMockBuilder().build();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManager(this.getRoxanaProperties(), this.getTranslator());\n    }\n\n    private void validateMinConstraint", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 6379}
{"pred": "   self._ping_ar = self._SendMessage(self._ping_msg, self._ping_timeout)\n    if self._ping_ar.exception:\n      self._log.error('Ping failed: %s', self._ping_ar.exception)\n      self._Shut", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 8870}
{"pred": "   assert freq2lag(v) == lag2freq(v)\n\n  def test_freq_lag_converters_are_inverses_with_float_inputs(self):\n    for v in [37, 12, .5, -", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 7252}
{"pred": "\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        System.out.println(\"Hello World!\");\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 5799}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 10710}
{"pred": "   if operands[0] is None:\n        return operands[1]\n    elif operands[1] is None:\n        return operands[0]\n    elif isinstance(operands[0], UntypedAtomic):\n        return operands[0].value", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 18490}
{"pred": "       welcomeString.setText(getResources().getString(R.string.welcome_string));\n\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEvents.add(new Event(MENU_ID_IMAGE1", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 17209}
{"pred": "           Toast.makeText(getActivity(), R.string.chat_created, Toast.LENGTH_LONG).show();\n            // Notify the fragment to show the chat\n            if (classToNotify != null) {\n                classToNotify.notify(R.id.chat_created", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 14458}
{"pred": "       MchPayResponse response = wxPayClient.unifiedOrder(request);\n\n        Assert.assertEquals(response.getResultCode(), \"SUCCESS\");\n        Assert.assertEquals(response.getErrCode(), \"SUCCESS\");\n        Assert.assertEquals(response.getErrCode", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 20000}
{"pred": "       Message message = creator.create(KEY, RANDOM_STRING_PARAMETER_VALUE_01, RANDOM_STRING_PARAMETER_VALUE_02);\n\n        assertEquals(MessageSeverity.ERROR, message.getSeverity());\n        assert", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 4695}
{"pred": "   public int readCodeInteger(int i) throws IOException {\n\t\tint d1 = in.read1();\n\t\tint tag = d1 & 0x07;\n\t\tif (tag == CODEINT4_TAG)\n\t\t\treturn readSmallIntValue", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 32768}
{"pred": "\n    def __repr__(self):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 5120}
{"pred": "\n\n\n Q: How to get the value of a variable in a function? I have a function that takes a variable as an argument. I want to get the value of that variable in the function. How can I do that?\nfunction get_value(var_name) {\n    var value", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 9131}
{"pred": "           m.videoSetFrameRate.setText(Integer.toString(Main.DEFAULT_VIDEO_FRAME_RATE));// set to default\r\n        } else if (Integer.parseInt(m.videoSetFrameRate.getText()) < 1) {// set to default\r\n", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 13628}
{"pred": "   self._probe = probe\n\n\n    def _get_spike_samples(self, spike_samples, spike_recordings):\n        \"\"\"Get the spike samples.\n\n        Parameters\n        ----------\n\n        spike_samples : ndarray", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 7257}
{"pred": "   @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 7637}
{"pred": "   self._cdg = ControlDependence(self)\n    return self._cdg\n\n  @property\n  def entry_node_interval(self):\n    \"\"\"\n      Returns the interval of the entry node.\n    \"\"\"\n    return self._entry_node_interval\n\n", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 18276}
{"pred": "   }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_qr_code, container, false);\n\n        scanButton = (Button)", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 7286}
{"pred": "   result.append(OPEN_BRACKET);\n    visit(column);\n    result.append(\" \").append(BETWEEN).append(\" \");\n    acceptOrVisitValue(betweenExp.getValueStart(), column.getName());\n    result.append(\" \").append(", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 9221}
{"pred": "\t\t\tFile baseFile = new File(basePath);\n\t\t\tFile baseFile2 = new File(basePath + \"/\" + \"DDI_2_XFORMS_1.xml\");\n\t\t\tFile baseFile3 = new File(basePath + \"/\" + \"", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 7898}
{"pred": "\n\n\n Q: How to get the value of a variable in a function? I have a function that returns a value. I want to get the value of that variable in another function.\nI have tried:\nvar x = function() {\n    return 1;\n}\n\nvar y", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 9931}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 10987}
{"pred": "\tpublic void acceptString(final StringTag tag, final CharSequence value) throws InvalidValueException {\n\t\tif (tag == null) {\n\t\t\tthrow new InvalidValueException(\"tag is null\");\n\t\t}\n\t\tif (value == null) {\n\t\t\tthrow", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 25790}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 9391}
{"pred": "                       expect(systemUnderTestMock.failWithParameter(GIVEN_STRING)).andReturn(EXPECTED_ERROR_MESSAGE);\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenS", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 4786}
{"pred": "   #\n    # map the rest bits\n    #\n    # if the rest bits are not mapped,\n    # we need to map the rest bits of the string\n    #\n    # if the rest bits are mapped,\n    # we need to map the rest bits of the string\n   ", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 21237}
{"pred": "       # Make sure we're looking at models\n        validate_is_model(model)\n\n        # Make sure we're looking at models\n        validate_is_model(model)\n\n        # Make sure we're looking at models\n        validate_is_model(model)", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 13697}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 18903}
{"pred": "   engine.bind(User, skip_table_setup=True)\n\n\ndef test_bind_model_abstract(engine):\n    \"\"\"Can't bind abstract models\"\"\"\nNext line of code:\n    engine.bind(AbstractModel, skip_table_setup=True)\n", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 17827}
{"pred": "   assert u6.dimensions == mass\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"A/cm**3\")\n    assert u7.dimensions == energy\n    assert u7.base_", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 6089}
{"pred": "   'root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"\"',\n                 'root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"\"',\n                 'root/cimv2:TST_Person.name=", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 7475}
{"pred": "       // Load modules\n        List<Module> modules = new ArrayList<>();\n        modules.add(new SqlModule());\n        modules.add(new LoanModule());\n        modules.add(new CurrencyModule());\n        modules.add(new VirtualModule());\n        modules.add(new", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 30798}
{"pred": "   return self.system_object.play_sound(self, channel_group, paused)\n\n    def get_tag_info(self, index, name=None):\n        \"\"\"Retrieve a metadata tag.\n\n        'Tags' are metadata stored within a sound file. These can", "answers": ["        tag = TAG()"], "all_classes": null, "length": 8963}
{"pred": "                   public void startNewAccountActivity() {\n                        startActivity(SettingsActivity.newIntent(MainActivity.this));\n                    }\n\n                    @Override\n                    public void startNewAccountActivity(Account account) {\n                        startActivity(SettingsActivity.newIntent(MainActivity.", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 15325}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 17017}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 16782}
{"pred": "   column = User.age\n    value = 3\n    expected_ref = \":v0.#n0\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0\": expected_action.value}\n\n    ref", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 8091}
{"pred": "           Platform.runLater(new Runnable() {\r\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void run() {\r\n\t\t\t\t\t\t\tprogressDialog.close();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tAlert", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 31939}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 5184}
{"pred": "   Call<EmojiResponse> getEmoji(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending gifs based on a query tag\n     *\n     * @param serviceIds a {@link Map} of a collection of", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 3880}
{"pred": "           of(mWifiStateListener).ifPresent(stateListener -> stateListener.isSuccess(false));\n            of(mConnectionWpsListener).ifPresent(wpsListener -> wpsListener.isSuccessful(false));\n            of(mConnectionSuccessListener).ifPresent", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 9394}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 23055}
{"pred": "\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack.get", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 11421}
{"pred": "def get_initial_segmentation(\n    frames: List[int], frame_shift: int\n) -> List[SegmentationType]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 25637}
{"pred": "   private final Deployments deployments;\n    private final Vms vms;\n    private final Tasks tasks;\n    private final Errands errands;\n    private final Info info;\n    private final Releases releases;\n    private final Stemcells stemcells;\n   ", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 4577}
{"pred": "   return self.system_object.play_sound(self, channel_group, paused)\n\n    def get_tag_info(self, index, name=None):\n        \"\"\"Retrieve a metadata tag.\n\n        'Tags' are metadata stored within a sound file. These can", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 8940}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 15972}
{"pred": "\n        abuse_report = AbuseReport.objects.create(\n            logged_against=logged_against,\n            logged_by=logged_by,\n            abuse_comment=request.POST['comments'],\n            moderator=logged_by,", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 5361}
{"pred": "   @Override\n    public void listenToResultSet(final AbstractResult paramResult, final AbstractMeter paramMeter, final double paramData) {\n        final NiceTable table = new NiceTable(paramResult.getNumberOfResult(paramMeter));\n        table.addRow(paramResult", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 14111}
{"pred": "       // Checking PhyML version\n        if (!PhyMLv3AminoAcidRunEstimator.checkVersion())\n        {\n        \tfinalize(1);\n        }\n\n        // Checking PhyML version\n        if (!PhyMLv3A", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 32768}
{"pred": "\t\ttropo.record(URL(\"http://www.example.com/record.mp3\"), true, 10000);\n\t\t\n\t\ttropo.say(\"This call will be recorded. Please wait.\");\n\t\t\n\t\ttropo.record", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 4388}
{"pred": "               listaDeRespostas.getPropriedades().getTurma() == null) {\n            //Se a lista de respostas não estiver salva e não tiver turma,\n            //não é possível salvar uma resposta.\n            return;\n        }", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 8143}
{"pred": "\t\t\tpublic void onResult(int code,DefaultDataConnector connector) {\n\t\t\t\tProgramManager.getInstance().parseTrack(connector.getResultDoc());\n\t\t\t}\n\t\t});\n        adapter = new PageViewPagerAdapter<ProgramTrack>(ProgramTrack.", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 8222}
{"pred": "   @Mock\n    MediaModel nextAdMedia;\n\n    @Mock\n    PlayerUIController controller;\n\n    @Mock\n    PlayerAdLogicController componentController;\n\n    @Mock\n    AdInterface adServerInterface;\n\n    @Mock\n    AdRetriever adRet", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 14044}
{"pred": "\t\t\t\t\tappEvent.removeObserver(client);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error occurred while initializing the stage\", e);\n\t\t}\n\t\t\n\t\t\n\t", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 9550}
{"pred": "   String className = adapterName(type, INJECT_ADAPTER_SUFFIX);\n    TypeSpec.Builder builder = TypeSpec.classBuilder(className);\n    builder.addModifiers(PUBLIC, FINAL);\n    builder.addSuperinterface(ClassName.bestGu", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 11987}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        /**\r\n         * 打开/关闭透传消息\r\n         * @param enable 打开/关闭\r\n         */\r\n", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 14012}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 1\n\n\ndef test_parameters_msgtype3():\n  '''\n  Zero", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 23028}
{"pred": "   if isinstance(item, TypedElement):\n        elem = item.elem\n    elif isinstance(item, TextNode):\n        elem = item.parent\n    elif isinstance(item, AttributeNode):\n        elem = item.parent\n    elif isinstance(item, Namespace", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 24089}
{"pred": "   def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\nNext line of code:\n    def fillna(self, reverse=False, fillvalue=None):\n        \"\"\"\n", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 7626}
{"pred": "\n                    if (message.getType() == MessageType.TYPING)\n                    {\n                        TypingMessage m = (TypingMessage)message;\n\n                        addMessage(new ChatMessage(ChatMessageSource.AUDIOLOGIST, m));\n\n", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 9016}
{"pred": "\t\tif opts.covariates:\n\t\t\tEXOG.append(dmy_covariates)\n\n\t\tif opts.covariates:\n\t\t\tEXOG.append(dmy_covariates)\n\n\t\tif opts.covariates", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 19707}
{"pred": "       assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNING));\n        assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNING));\n        assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNING));\n       ", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 7122}
{"pred": "               // 2000~2050年的日期\n                // 2000~2050年的日期\n                // 2000~2050年的日期\n                // 2000~2050年", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 28718}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 23052}
{"pred": "   private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private ViewPager viewPager;\n    private Toolbar toolbar;\n    private TabLayout tabLayout;\n    private int mCurrentPage = 0;\n    private int mCurrentPosition = 0;", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 13368}
{"pred": "       self.flow_manager = FlowManager.FlowManager(config, parent=self)\n        self.flow_manager.lock = threading.RLock()\n        self.flow_manager.flow_id_to_address = {}\n        self.flow_manager.api_new_", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 20931}
{"pred": "\n\n\n Q: How to get the value of a variable in a function? I have a function that takes a variable as an argument. I want to get the value of that variable in the function. How can I do that?\n\nfunction get_value(var_name) {\n    return", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 6169}
{"pred": "   def _validate_open_hours(self, emails, open_hours, free_busy):\n        if open_hours is None:\n            return\n        if len(open_hours) != len(emails):\n            raise ValueError(\n                \"open_", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 14334}
{"pred": "       skyView);\n    activityLightLevelChanger.setNightMode(nightMode);\n\n    // TODO(jontayler): this should be in the model.\n    // We should also be able to set the search target from the model.\n    // We should also be able to", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 17358}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 9170}
{"pred": "           Str('IMSI', Pt=IMSI(), Len=1),\r\n            Str('Net', Pt=Net(), Len=1),\r\n            Str('MS', Pt=MS(), Len=1),\r\n            Str('Classmark', Pt=Classmark(),", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 24673}
{"pred": "       self.__class_parser.parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 9967}
{"pred": "   if type(right) == Column:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 6854}
{"pred": "   @validation_error(ResponseValidationError)\n    def validate_response(response, validator_map):\n        \"\"\"Validates response against our schemas.\n\n        :param response: the response object to validate\n        :type response: :class:`pyramid.response.Response`", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 6688}
